{"version":3,"file":"static/js/471.8c1c76d8.chunk.js","mappings":"2MAMA,MAAMA,EAAqBC,IAA0B,IAAzB,MAAEC,EAAK,SAAEC,GAAUF,EAC7C,MAAOG,EAAaC,IAAkBC,EAAAA,EAAAA,WAAS,IACxCC,EAAYC,IAAiBF,EAAAA,EAAAA,UAAS,IACtCG,EAAYC,IAAiBJ,EAAAA,EAAAA,UAAS,GAEvCK,EAAkBC,IAA2B,IAA1B,QAAEC,EAAO,QAAEC,GAASF,EAC3CP,GAAe,GACfG,EAAcK,GACdH,EAAcI,EAAQ,EAkBxB,OAJAC,EAAAA,EAAAA,YAAUC,EAAAA,EAAAA,IAAoB,YAAaL,GAAkB,CAACP,KAC9DW,EAAAA,EAAAA,YAAUC,EAAAA,EAAAA,IAAoB,aAZNC,IAA2B,IAA1B,QAAEJ,EAAO,QAAEC,GAASG,EAC3Cd,EAAS,CACPe,OAAQhB,EAAQW,EAAUN,EAC1BY,OAAQjB,EAAQY,EAAUL,GAC1B,IAQyD,CAACL,KAC9DW,EAAAA,EAAAA,YAAUC,EAAAA,EAAAA,IAAoB,WANRI,KACpBf,GAAe,EAAM,IAKkC,CAACD,KAGxDiB,EAAAA,EAAAA,KAACC,EAAAA,WAAU,CAAAC,UACTF,EAAAA,EAAAA,KAACG,EAAAA,UAAS,CAACC,YAAad,EAAiBe,KAAMxB,KACpC,C,2FCjCjB,MAAMoB,EAAaK,EAAAA,EAAOC,IAAGC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,8GAQvBN,EAAYG,EAAAA,EAAOC,IAAGG,IAAAA,GAAAD,EAAAA,EAAAA,GAAA,sIAGlB7B,IAAe,IAAd,KAAEyB,GAAMzB,EACf,OAAOyB,CAAI,G","sources":["pages/test/DraggableComponent.jsx","pages/test/SimplestCustomRangeStyle.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\n\nimport { handleEventListener } from \"../../hooks\";\n\nimport { RangeField, RangeDial } from \"./SimplestCustomRangeStyle\";\n\nconst DraggableComponent = ({ value, onChange }) => {\n  const [isDraggable, setIsDraggable] = useState(false);\n  const [mouseDownY, setMouseDownY] = useState(0);\n  const [mouseDownX, setMouseDownX] = useState(0);\n\n  const handleMouseDown = ({ clientY, clientX }) => {\n    setIsDraggable(true);\n    setMouseDownY(clientY);\n    setMouseDownX(clientX);\n  };\n\n  const handleMouseMove = ({ clientY, clientX }) => {\n    onChange({\n      valueY: value + clientY - mouseDownY,\n      valueX: value + clientX - mouseDownX,\n    });\n  };\n\n  const handleMouseUp = () => {\n    setIsDraggable(false);\n  };\n\n  useEffect(handleEventListener(\"mousedown\", handleMouseDown), [isDraggable]);\n  useEffect(handleEventListener(\"mousemove\", handleMouseMove), [isDraggable]);\n  useEffect(handleEventListener(\"mouseup\", handleMouseUp), [isDraggable]);\n\n  return (\n    <RangeField>\n      <RangeDial onMouseDown={handleMouseDown} left={value}></RangeDial>\n    </RangeField>\n  );\n};\n\nexport { DraggableComponent };\n","import styled from \"@emotion/styled\";\n\nconst RangeField = styled.div`\n  width: 500px;\n  height: 50px;\n  background-color: rgb(200, 200, 250);\n\n  position: relative;\n`;\n\nconst RangeDial = styled.div`\n  position: absolute;\n  top: 0;\n  left: ${({ left }) => {\n    return left;\n  }}px;\n  width: 50px;\n  height: 50px;\n  background-color: rgb(100, 100, 250);\n`;\n\nexport { RangeField, RangeDial };\n"],"names":["DraggableComponent","_ref","value","onChange","isDraggable","setIsDraggable","useState","mouseDownY","setMouseDownY","mouseDownX","setMouseDownX","handleMouseDown","_ref2","clientY","clientX","useEffect","handleEventListener","_ref3","valueY","valueX","handleMouseUp","_jsx","RangeField","children","RangeDial","onMouseDown","left","styled","div","_templateObject","_taggedTemplateLiteral","_templateObject2"],"sourceRoot":""}