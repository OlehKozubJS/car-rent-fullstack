{"version":3,"file":"static/js/82.e1e2a5d2.chunk.js","mappings":"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","sources":["pages/test/AnimationTest/AnimationTest.jsx","pages/test/AnimationTest/AnimationTestController.jsx","pages/test/DraggableComponent/DraggableComponent.jsx","pages/test/DraggableComponent/DraggableComponentField.jsx","pages/test/DraggableComponent/DraggableComponentStyle.js"],"sourcesContent":["import { useState } from \"react\";\n\nimport { AnimationTestController } from \"./AnimationTestController\";\n\nconst AnimationTest = () => {\n  const [transformRotateValue, setTransformRotateValue] = useState(0);\n  const [transformRotateYvalue, setTransformRotateYvalue] = useState(0);\n  const [transformRotateXvalue, setTransformRotateXvalue] = useState(0);\n  const [perspectiveValue, setPerspectiveValue] = useState(0);\n\n  const handleTransformRotateValue = (value) => setTransformRotateValue(value);\n  const handleTransformRotateYvalue = (value) =>\n    setTransformRotateYvalue(value);\n  const handleTransformRotateXvalue = (value) =>\n    setTransformRotateXvalue(value);\n  const handlePerspectiveValue = (value) => setPerspectiveValue(value);\n\n  return (\n    <div>\n      <AnimationTestController\n        onChange={handleTransformRotateValue}\n        value={transformRotateValue}\n        range={180}\n        color={\"red\"}\n      />\n      <AnimationTestController\n        onChange={handleTransformRotateYvalue}\n        value={transformRotateYvalue}\n        range={180}\n        color={\"green\"}\n      />\n      <AnimationTestController\n        onChange={handleTransformRotateXvalue}\n        value={transformRotateXvalue}\n        range={180}\n        color={\"blue\"}\n      />\n      <AnimationTestController\n        onChange={handlePerspectiveValue}\n        value={perspectiveValue}\n        range={300}\n        color={\"cyan\"}\n      />\n      <p>transform: rotate: {transformRotateValue}</p>\n      <p>transfrom: rotateY: {transformRotateYvalue}</p>\n      <p>transform: rotateX: {transformRotateXvalue}</p>\n      <p>transform: perspective: {perspectiveValue}</p>\n      <div>\n        <div\n          style={{\n            height: \"250px\",\n            width: \"250px\",\n            border: \"5px solid rgb(150, 250, 250)\",\n            backgroundColor: \"red\",\n            transformOrigin: \"center\",\n            transform: `perspective(${perspectiveValue}px) rotate(${transformRotateValue}deg) rotateY(${transformRotateYvalue}deg) rotateX(${transformRotateXvalue}deg)`,\n          }}\n        >\n          Hello\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport { AnimationTest };\n","import { DraggableComponent } from \"../DraggableComponent\";\n\nconst AnimationTestController = ({ onChange, value, range, color }) => {\n  const handleValue = ({ valueX }) => {\n    if (valueX >= 0 && valueX <= range) {\n      onChange(valueX);\n    }\n  };\n\n  return (\n    <div style={{ position: \"relative\", height: \"50px\" }}>\n      <DraggableComponent\n        onChange={handleValue}\n        valueX={value}\n        valueY={0}\n        height={50}\n        width={50}\n        backgroundColor={color}\n      />\n    </div>\n  );\n};\n\nexport { AnimationTestController };\n","import { useEffect, useState } from \"react\";\n\nimport { handleEventListener } from \"../../../hooks\";\n\nimport { DraggableComponentStyle } from \"./DraggableComponentStyle\";\n\nconst DraggableComponent = ({\n  onChange,\n  valueY,\n  valueX,\n  height,\n  width,\n  backgroundColor,\n}) => {\n  const [isDraggable, setIsDraggable] = useState(false);\n  const [mouseDownY, setMouseDownY] = useState(valueY);\n  const [mouseDownX, setMouseDownX] = useState(valueX);\n\n  const handleMouseDown = ({ clientY, clientX }) => {\n    setIsDraggable(true);\n    setMouseDownY(clientY);\n    setMouseDownX(clientX);\n  };\n\n  const handleMouseMove = ({ clientY, clientX }) => {\n    if (isDraggable) {\n      onChange({\n        valueY: valueY + clientY - mouseDownY,\n        valueX: valueX + clientX - mouseDownX,\n      });\n    }\n  };\n\n  const handleMouseUp = () => {\n    setIsDraggable(false);\n  };\n\n  useEffect(handleEventListener(\"mousemove\", handleMouseMove), [isDraggable]);\n  useEffect(handleEventListener(\"mouseup\", handleMouseUp), [isDraggable]);\n\n  return (\n    <DraggableComponentStyle\n      onMouseDown={handleMouseDown}\n      top={valueY}\n      left={valueX}\n      height={height}\n      width={width}\n      backgroundColor={backgroundColor}\n    ></DraggableComponentStyle>\n  );\n};\n\nexport { DraggableComponent };\n","import { useEffect, useState } from \"react\";\n\nimport { DraggableComponent } from \"./DraggableComponent\";\n\nconst DraggableComponentField = () => {\n  const [valueY, setValueY] = useState(200);\n  const [valueX, setValueX] = useState(0);\n\n  const handleXYvalue = ({ valueY, valueX }) => {\n    if (valueY >= 200) {\n      setValueY(valueY);\n    }\n    if (valueX >= 0) {\n      setValueX(valueX);\n    }\n  };\n\n  return (\n    <section>\n      <DraggableComponent\n        valueY={valueY}\n        valueX={valueX}\n        onChange={handleXYvalue}\n      />\n      <p>valueY={valueY}</p>\n      <p>valueX={valueX}</p>\n    </section>\n  );\n};\n\nexport { DraggableComponentField };\n","import styled from \"@emotion/styled\";\n\nconst DraggableComponentStyle = styled.div`\n  position: absolute;\n\n  top: ${({ top }) => {\n    return top;\n  }}px;\n\n  left: ${({ left }) => {\n    return left;\n  }}px;\n\n  height: ${({ height }) => {\n    return height;\n  }}px;\n\n  width: ${({ width }) => {\n    return width;\n  }}px;\n\n  background-color: ${({ backgroundColor }) => {\n    return backgroundColor;\n  }};\n`;\n\nexport { DraggableComponentStyle };\n"],"names":["AnimationTest","transformRotateValue","setTransformRotateValue","useState","transformRotateYvalue","setTransformRotateYvalue","transformRotateXvalue","setTransformRotateXvalue","perspectiveValue","setPerspectiveValue","_jsxs","children","_jsx","AnimationTestController","onChange","value","range","color","style","height","width","border","backgroundColor","transformOrigin","transform","concat","_ref","position","DraggableComponent","_ref2","valueX","valueY","isDraggable","setIsDraggable","mouseDownY","setMouseDownY","mouseDownX","setMouseDownX","useEffect","handleEventListener","_ref3","clientY","clientX","handleMouseUp","DraggableComponentStyle","onMouseDown","top","left","DraggableComponentField","setValueY","setValueX","styled","div","_templateObject","_taggedTemplateLiteral","_ref4","_ref5"],"sourceRoot":""}