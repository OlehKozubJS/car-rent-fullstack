{"version":3,"file":"static/js/82.90da068b.chunk.js","mappings":"8MAIA,MAAMA,EAAgBA,KACpB,MAAOC,EAAsBC,IAA2BC,EAAAA,EAAAA,UAAS,GAMjE,OACEC,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACEC,EAAAA,EAAAA,KAAA,OAAKC,MAAO,CAAEC,SAAU,WAAYC,OAAQ,QAASJ,UACnDC,EAAAA,EAAAA,KAACI,EAAAA,mBAAkB,CACjBC,SAR2BC,IAAiB,IAAhB,OAAEC,GAAQD,EAC5CV,EAAwBW,EAAO,EAQzBA,OAAQZ,EACRa,OAAQ,OAGZR,EAAAA,EAAAA,KAAA,KAAAD,SAAIJ,MACA,C,sLCfV,MAAMS,EAAqBE,IAAmC,IAAlC,OAAEE,EAAM,OAAED,EAAM,SAAEF,GAAUC,EACtD,MAAOG,EAAaC,IAAkBb,EAAAA,EAAAA,WAAS,IACxCc,EAAYC,IAAiBf,EAAAA,EAAAA,UAASW,IACtCK,EAAYC,IAAiBjB,EAAAA,EAAAA,UAASU,GAEvCQ,EAAkBC,IAA2B,IAA1B,QAAEC,EAAO,QAAEC,GAASF,EAC3CN,GAAe,GACfE,EAAcK,GACdH,EAAcI,EAAQ,EAoBxB,OAJAC,EAAAA,EAAAA,YAAUC,EAAAA,EAAAA,IAAoB,YAAaL,GAAkB,CAACN,KAC9DU,EAAAA,EAAAA,YAAUC,EAAAA,EAAAA,IAAoB,aAdNC,IAA2B,IAA1B,QAAEJ,EAAO,QAAEC,GAASG,EACvCZ,GACFJ,EAAS,CACPG,OAAQA,EAASS,EAAUN,EAC3BJ,OAAQA,EAASW,EAAUL,GAE/B,IAQ2D,CAACJ,KAC9DU,EAAAA,EAAAA,YAAUC,EAAAA,EAAAA,IAAoB,WANRE,KACpBZ,GAAe,EAAM,IAKkC,CAACD,KAGxDT,EAAAA,EAAAA,KAACuB,EAAAA,wBAAuB,CACtBC,YAAaT,EACbU,IAAKjB,EACLkB,KAAMnB,GACmB,C,iGCnC/B,MAAMoB,EAA0BA,KAC9B,MAAOnB,EAAQoB,IAAa/B,EAAAA,EAAAA,UAAS,MAC9BU,EAAQsB,IAAahC,EAAAA,EAAAA,UAAS,GAWrC,OACEC,EAAAA,EAAAA,MAAA,WAAAC,SAAA,EACEC,EAAAA,EAAAA,KAACI,EAAAA,mBAAkB,CACjBI,OAAQA,EACRD,OAAQA,EACRF,SAdgBC,IAAyB,IAAxB,OAAEE,EAAM,OAAED,GAAQD,EACnCE,GAAU,KACZoB,EAAUpB,GAERD,GAAU,GACZsB,EAAUtB,EACZ,KAUET,EAAAA,EAAAA,MAAA,KAAAC,SAAA,CAAG,UAAQS,MACXV,EAAAA,EAAAA,MAAA,KAAAC,SAAA,CAAG,UAAQQ,OACH,C,8ECxBd,MAAMgB,E,QAA0BO,EAAOC,IAAGC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,0IAEjC3B,IAAc,IAAb,IAAEmB,GAAKnB,EACb,OAAOmB,CAAG,IAEJT,IAAe,IAAd,KAAEU,GAAMV,EACf,OAAOU,CAAI,G","sources":["pages/test/AnimationTest/AnimationTest.jsx","pages/test/DraggableComponent/DraggableComponent.jsx","pages/test/DraggableComponent/DraggableComponentField.jsx","pages/test/DraggableComponent/DraggableComponentStyle.js"],"sourcesContent":["import { useState } from \"react\";\n\nimport { DraggableComponent } from \"../DraggableComponent\";\n\nconst AnimationTest = () => {\n  const [transformRotateValue, setTransformRotateValue] = useState(0);\n\n  const handleTransformRotateValue = ({ valueX }) => {\n    setTransformRotateValue(valueX);\n  };\n\n  return (\n    <div>\n      <div style={{ position: \"relative\", height: \"50px\" }}>\n        <DraggableComponent\n          onChange={handleTransformRotateValue}\n          valueX={transformRotateValue}\n          valueY={0}\n        />\n      </div>\n      <p>{transformRotateValue}</p>\n    </div>\n  );\n};\n\nexport { AnimationTest };\n","import { useEffect, useState } from \"react\";\n\nimport { handleEventListener } from \"../../../hooks\";\n\nimport { DraggableComponentStyle } from \"./DraggableComponentStyle\";\n\nconst DraggableComponent = ({ valueY, valueX, onChange }) => {\n  const [isDraggable, setIsDraggable] = useState(false);\n  const [mouseDownY, setMouseDownY] = useState(valueY);\n  const [mouseDownX, setMouseDownX] = useState(valueX);\n\n  const handleMouseDown = ({ clientY, clientX }) => {\n    setIsDraggable(true);\n    setMouseDownY(clientY);\n    setMouseDownX(clientX);\n  };\n\n  const handleMouseMove = ({ clientY, clientX }) => {\n    if (isDraggable) {\n      onChange({\n        valueY: valueY + clientY - mouseDownY,\n        valueX: valueX + clientX - mouseDownX,\n      });\n    }\n  };\n\n  const handleMouseUp = () => {\n    setIsDraggable(false);\n  };\n\n  useEffect(handleEventListener(\"mousedown\", handleMouseDown), [isDraggable]);\n  useEffect(handleEventListener(\"mousemove\", handleMouseMove), [isDraggable]);\n  useEffect(handleEventListener(\"mouseup\", handleMouseUp), [isDraggable]);\n\n  return (\n    <DraggableComponentStyle\n      onMouseDown={handleMouseDown}\n      top={valueY}\n      left={valueX}\n    ></DraggableComponentStyle>\n  );\n};\n\nexport { DraggableComponent };\n","import { useEffect, useState } from \"react\";\n\nimport { DraggableComponent } from \"./DraggableComponent\";\n\nconst DraggableComponentField = () => {\n  const [valueY, setValueY] = useState(200);\n  const [valueX, setValueX] = useState(0);\n\n  const handleXYvalue = ({ valueY, valueX }) => {\n    if (valueY >= 200) {\n      setValueY(valueY);\n    }\n    if (valueX >= 0) {\n      setValueX(valueX);\n    }\n  };\n\n  return (\n    <section>\n      <DraggableComponent\n        valueY={valueY}\n        valueX={valueX}\n        onChange={handleXYvalue}\n      />\n      <p>valueY={valueY}</p>\n      <p>valueX={valueX}</p>\n    </section>\n  );\n};\n\nexport { DraggableComponentField };\n","import styled from \"@emotion/styled\";\n\nconst DraggableComponentStyle = styled.div`\n  position: absolute;\n  top: ${({ top }) => {\n    return top;\n  }}px;\n  left: ${({ left }) => {\n    return left;\n  }}px;\n  width: 50px;\n  height: 50px;\n  background-color: rgb(100, 100, 250);\n`;\n\nexport { DraggableComponentStyle };\n"],"names":["AnimationTest","transformRotateValue","setTransformRotateValue","useState","_jsxs","children","_jsx","style","position","height","DraggableComponent","onChange","_ref","valueX","valueY","isDraggable","setIsDraggable","mouseDownY","setMouseDownY","mouseDownX","setMouseDownX","handleMouseDown","_ref2","clientY","clientX","useEffect","handleEventListener","_ref3","handleMouseUp","DraggableComponentStyle","onMouseDown","top","left","DraggableComponentField","setValueY","setValueX","styled","div","_templateObject","_taggedTemplateLiteral"],"sourceRoot":""}