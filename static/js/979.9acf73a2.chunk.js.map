{"version":3,"file":"static/js/979.9acf73a2.chunk.js","mappings":"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","sources":["pages/test/DraggableComponent/DraggableComponent.jsx","pages/test/DraggableComponent/DraggableComponentField.jsx","pages/test/DraggableComponent/DraggableComponentStyle.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\n\nimport { handleEventListener } from \"../../../hooks\";\n\nimport { DraggableComponentStyle } from \"./DraggableComponentStyle\";\n\nconst DraggableComponent = ({ valueY, valueX, onChange }) => {\n  const [isDraggable, setIsDraggable] = useState(false);\n  const [mouseDownY, setMouseDownY] = useState(valueY);\n  const [mouseDownX, setMouseDownX] = useState(valueX);\n\n  const handleMouseDown = ({ clientY, clientX }) => {\n    setIsDraggable(true);\n    setMouseDownY(clientY);\n    setMouseDownX(clientX);\n  };\n\n  const handleMouseMove = ({ clientY, clientX }) => {\n    if (isDraggable) {\n      onChange({\n        valueY: valueY + clientY - mouseDownY,\n        valueX: valueX + clientX - mouseDownX,\n      });\n    }\n  };\n\n  const handleMouseUp = () => {\n    setIsDraggable(false);\n  };\n\n  useEffect(handleEventListener(\"mousedown\", handleMouseDown), [isDraggable]);\n  useEffect(handleEventListener(\"mousemove\", handleMouseMove), [isDraggable]);\n  useEffect(handleEventListener(\"mouseup\", handleMouseUp), [isDraggable]);\n\n  return (\n    <DraggableComponentStyle\n      onMouseDown={handleMouseDown}\n      top={valueY}\n      left={valueX}\n    ></DraggableComponentStyle>\n  );\n};\n\nexport { DraggableComponent };\n","import { useEffect, useState } from \"react\";\n\nimport { DraggableComponent } from \"./DraggableComponent\";\n\nconst DraggableComponentField = () => {\n  const [componentName, setComponentName] = useState(\"Logic gates\");\n  const [rangeValue, setRangeValue] = useState(0);\n  const [valueY, setValueY] = useState(200);\n  const [valueX, setValueX] = useState(0);\n  const [pagePath, setPagePath] = useState(\"test\");\n\n  const handlePagePath = (event) => {\n    event.preventDefault();\n    setPagePath(event.currentTarget.elements.pageNameInput.value);\n    event.currentTarget.reset();\n  };\n\n  const handleRangeValue = (newRangeValue) => {\n    setRangeValue(newRangeValue);\n  };\n\n  const chooseComponent = (newComponentName) => {\n    setComponentName(newComponentName);\n  };\n\n  const handleXYvalue = ({ valueY, valueX }) => {\n    if (valueY >= 200) {\n      setValueY(valueY);\n    }\n    if (valueX >= 0) {\n      setValueX(valueX);\n    }\n  };\n\n  return (\n    <section>\n      <ComponentChooser\n        componentNames={[\n          \"Logic gates\",\n          \"Simplest custom range\",\n          \"Draggable component\",\n        ]}\n        currentComponentName={componentName}\n        onChange={chooseComponent}\n      />\n      {componentName === \"Logic gates\" && <LogicGates />}\n      {componentName === \"Simplest custom range\" && (\n        <SimplestCustomRange onChange={handleRangeValue} value={rangeValue} />\n      )}\n      {componentName === \"Draggable component\" && (\n        <DraggableComponent\n          valueY={valueY}\n          valueX={valueX}\n          onChange={handleXYvalue}\n        />\n      )}\n      <p>{rangeValue}</p>\n      <p>valueY={valueY}</p>\n      <p>valueX={valueX}</p>\n      <div>\n        <form onSubmit={handlePagePath}>\n          <input\n            name=\"pageNameInput\"\n            type=\"text\"\n            placeholder=\"Enter page name\"\n          />\n          <button type=\"submit\">Enter</button>\n        </form>\n        <Navigate to={`/${pagePath}`} />\n      </div>\n      <RecursionFunctionTest />\n    </section>\n  );\n};\n\nexport { DraggableComponentField };\n","import styled from \"@emotion/styled\";\n\nconst DraggableComponentStyle = styled.div`\n  position: absolute;\n  top: ${({ top }) => {\n    return top;\n  }}px;\n  left: ${({ left }) => {\n    return left;\n  }}px;\n  width: 50px;\n  height: 50px;\n  background-color: rgb(100, 100, 250);\n`;\n\nexport { DraggableComponentStyle };\n"],"names":["DraggableComponent","_ref","valueY","valueX","onChange","isDraggable","setIsDraggable","useState","mouseDownY","setMouseDownY","mouseDownX","setMouseDownX","handleMouseDown","_ref2","clientY","clientX","useEffect","handleEventListener","_ref3","handleMouseUp","_jsx","DraggableComponentStyle","onMouseDown","top","left","DraggableComponentField","componentName","setComponentName","rangeValue","setRangeValue","setValueY","setValueX","pagePath","setPagePath","_jsxs","children","ComponentChooser","componentNames","currentComponentName","newComponentName","LogicGates","SimplestCustomRange","newRangeValue","value","onSubmit","event","preventDefault","currentTarget","elements","pageNameInput","reset","name","type","placeholder","Navigate","to","concat","RecursionFunctionTest","styled","div","_templateObject","_taggedTemplateLiteral"],"sourceRoot":""}