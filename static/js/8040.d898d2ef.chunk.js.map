{"version":3,"file":"static/js/8040.d898d2ef.chunk.js","mappings":"4NAMA,MAAMA,EAAqBC,IAOpB,IAPqB,SAC1BC,EAAQ,OACRC,EAAM,OACNC,EAAM,OACNC,EAAM,MACNC,EAAK,gBACLC,GACDN,EACC,MAAOO,EAAaC,IAAkBC,EAAAA,EAAAA,WAAS,IACxCC,EAAYC,IAAiBF,EAAAA,EAAAA,UAASP,IACtCU,EAAYC,IAAiBJ,EAAAA,EAAAA,UAASN,GAwB7C,OAHAW,EAAAA,EAAAA,YAAUC,EAAAA,EAAAA,IAAoB,aAbNC,IAA2B,IAA1B,QAAEC,EAAO,QAAEC,GAASF,EACvCT,GACFN,EAAS,CACPC,OAAQA,EAASe,EAAUP,EAC3BP,OAAQA,EAASe,EAAUN,GAE/B,IAO2D,CAACL,KAC9DO,EAAAA,EAAAA,YAAUC,EAAAA,EAAAA,IAAoB,WALRI,KACpBX,GAAe,EAAM,IAIkC,CAACD,KAGxDa,EAAAA,EAAAA,KAACC,EAAAA,wBAAuB,CACtBC,YAxBoBC,IAA2B,IAA1B,QAAEN,EAAO,QAAEC,GAASK,EAC3Cf,GAAe,GACfG,EAAcM,GACdJ,EAAcK,EAAQ,EAsBpBM,IAAKtB,EACLuB,KAAMtB,EACNC,OAAQA,EACRC,MAAOA,EACPC,gBAAiBA,GACQ,C,iGC5C/B,MAAMoB,EAA0BA,KAC9B,MAAOxB,EAAQyB,IAAalB,EAAAA,EAAAA,UAAS,MAC9BN,EAAQyB,IAAanB,EAAAA,EAAAA,UAAS,GAWrC,OACEoB,EAAAA,EAAAA,MAAA,WAAAC,SAAA,EACEV,EAAAA,EAAAA,KAACrB,EAAAA,mBAAkB,CACjBG,OAAQA,EACRC,OAAQA,EACRF,SAdgBD,IAAyB,IAAxB,OAAEE,EAAM,OAAEC,GAAQH,EACnCE,GAAU,KACZyB,EAAUzB,GAERC,GAAU,GACZyB,EAAUzB,EACZ,KAUE0B,EAAAA,EAAAA,MAAA,KAAAC,SAAA,CAAG,UAAQ5B,MACX2B,EAAAA,EAAAA,MAAA,KAAAC,SAAA,CAAG,UAAQ3B,OACH,C,8ECxBd,MAAMkB,E,QAA0BU,EAAOC,IAAGC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,uIAGjClC,IAAc,IAAb,IAAEwB,GAAKxB,EACb,OAAOwB,CAAG,IAGJD,IAAe,IAAd,KAAEE,GAAMF,EACf,OAAOE,CAAI,IAGHT,IAAiB,IAAhB,OAAEZ,GAAQY,EACnB,OAAOZ,CAAM,IAGN+B,IAAgB,IAAf,MAAE9B,GAAO8B,EACjB,OAAO9B,CAAK,IAGM+B,IAA0B,IAAzB,gBAAE9B,GAAiB8B,EACtC,OAAO9B,CAAe,G","sources":["pages/test/DraggableComponent/DraggableComponent.jsx","pages/test/DraggableComponent/DraggableComponentField.jsx","pages/test/DraggableComponent/DraggableComponentStyle.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\n\nimport { handleEventListener } from \"../../../hooks\";\n\nimport { DraggableComponentStyle } from \"./DraggableComponentStyle\";\n\nconst DraggableComponent = ({\n  onChange,\n  valueY,\n  valueX,\n  height,\n  width,\n  backgroundColor,\n}) => {\n  const [isDraggable, setIsDraggable] = useState(false);\n  const [mouseDownY, setMouseDownY] = useState(valueY);\n  const [mouseDownX, setMouseDownX] = useState(valueX);\n\n  const handleMouseDown = ({ clientY, clientX }) => {\n    setIsDraggable(true);\n    setMouseDownY(clientY);\n    setMouseDownX(clientX);\n  };\n\n  const handleMouseMove = ({ clientY, clientX }) => {\n    if (isDraggable) {\n      onChange({\n        valueY: valueY + clientY - mouseDownY,\n        valueX: valueX + clientX - mouseDownX,\n      });\n    }\n  };\n\n  const handleMouseUp = () => {\n    setIsDraggable(false);\n  };\n\n  useEffect(handleEventListener(\"mousemove\", handleMouseMove), [isDraggable]);\n  useEffect(handleEventListener(\"mouseup\", handleMouseUp), [isDraggable]);\n\n  return (\n    <DraggableComponentStyle\n      onMouseDown={handleMouseDown}\n      top={valueY}\n      left={valueX}\n      height={height}\n      width={width}\n      backgroundColor={backgroundColor}\n    ></DraggableComponentStyle>\n  );\n};\n\nexport { DraggableComponent };\n","import { useEffect, useState } from \"react\";\n\nimport { DraggableComponent } from \"./DraggableComponent\";\n\nconst DraggableComponentField = () => {\n  const [valueY, setValueY] = useState(200);\n  const [valueX, setValueX] = useState(0);\n\n  const handleXYvalue = ({ valueY, valueX }) => {\n    if (valueY >= 200) {\n      setValueY(valueY);\n    }\n    if (valueX >= 0) {\n      setValueX(valueX);\n    }\n  };\n\n  return (\n    <section>\n      <DraggableComponent\n        valueY={valueY}\n        valueX={valueX}\n        onChange={handleXYvalue}\n      />\n      <p>valueY={valueY}</p>\n      <p>valueX={valueX}</p>\n    </section>\n  );\n};\n\nexport { DraggableComponentField };\n","import styled from \"@emotion/styled\";\n\nconst DraggableComponentStyle = styled.div`\n  position: absolute;\n\n  top: ${({ top }) => {\n    return top;\n  }}px;\n\n  left: ${({ left }) => {\n    return left;\n  }}px;\n\n  height: ${({ height }) => {\n    return height;\n  }}px;\n\n  width: ${({ width }) => {\n    return width;\n  }}px;\n\n  background-color: ${({ backgroundColor }) => {\n    return backgroundColor;\n  }};\n`;\n\nexport { DraggableComponentStyle };\n"],"names":["DraggableComponent","_ref","onChange","valueY","valueX","height","width","backgroundColor","isDraggable","setIsDraggable","useState","mouseDownY","setMouseDownY","mouseDownX","setMouseDownX","useEffect","handleEventListener","_ref3","clientY","clientX","handleMouseUp","_jsx","DraggableComponentStyle","onMouseDown","_ref2","top","left","DraggableComponentField","setValueY","setValueX","_jsxs","children","styled","div","_templateObject","_taggedTemplateLiteral","_ref4","_ref5"],"sourceRoot":""}