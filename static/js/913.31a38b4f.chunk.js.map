{"version":3,"file":"static/js/913.31a38b4f.chunk.js","mappings":"wNAKA,MAAMA,EAAsBA,KAC1B,MAAOC,EAAOC,IAAYC,EAAAA,EAAAA,UAAS,KAC5BC,EAAQC,IAAaF,EAAAA,EAAAA,UAAS,IAqB/BG,EAAwBA,KAC5BD,EACEJ,EACGM,MAAM,IACNC,QAAO,CAACC,EAAOC,EAAWC,EAAgBC,KACzC,IAAIC,EAAWJ,EAAQC,EASvB,OANEC,EAAiB,IAAM,GACvBA,IAAmBC,EAAeE,OAAS,IAE3CD,GAAY,KAGPA,CAAQ,GACd,IACFN,MAAM,KACNQ,KAAKL,GACGM,EAAGC,OAAOP,MAElBQ,KAAK,IACT,EAGH,OACEC,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACED,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACEC,EAAAA,EAAAA,KAAA,UACEC,QA3CsBC,KAC5BlB,EACEJ,EACGM,MAAM,IACNQ,KAAKL,IACJ,IAAIc,EAAcR,EAAGS,QAAQf,GAI7B,OAHIc,EAAc,KAChBA,EAAc,IAAMA,GAEfE,OAAOF,EAAY,IAE3BN,KAAK,IACT,EAgCKS,MAAO,CACLC,gBAAiB,iBACjBC,MAAO,qBACPT,SACH,oBAGDC,EAAAA,EAAAA,KAAA,UACEC,QAAShB,EACTqB,MAAO,CACLC,gBAAiB,iBACjBC,MAAO,qBACPT,SACH,oBAGDC,EAAAA,EAAAA,KAAA,UACEC,QAAShB,EACTqB,MAAO,CACLC,gBAAiB,iBACjBC,MAAO,qBACPT,SACH,0BAIHC,EAAAA,EAAAA,KAAA,YACES,SA3EcC,IAAiB,IAAhB,OAAEC,GAAQD,EAC7B7B,EAAS8B,EAAOC,MAAM,EA2ElBC,YAAY,6BACZP,MAAO,CAAEQ,OAAQ,QAASC,MAAO,QAASC,OAAQ,WAEpDhB,EAAAA,EAAAA,KAAA,KAAGM,MAAO,CAAES,MAAO,QAASE,aAAc,cAAelB,SAAEhB,MACvD,C","sources":["pages/test/TotalDigitalization/TotalDigitalization.jsx"],"sourcesContent":["import { useState } from \"react\";\n\nimport db from \"./totalDigitalizationDB.json\";\nimport ctr from \"./romanCyrillicDB.json\";\n\nconst TotalDigitalization = () => {\n  const [query, setQuery] = useState(\"\");\n  const [result, setResult] = useState(\"\");\n\n  const handleQuery = ({ target }) => {\n    setQuery(target.value);\n  };\n\n  const transformTextToDigits = () => {\n    setResult(\n      query\n        .split(\"\")\n        .map((character) => {\n          let binaryDigit = db.indexOf(character);\n          if (binaryDigit < 10) {\n            binaryDigit = \"0\" + binaryDigit;\n          }\n          return String(binaryDigit);\n        })\n        .join(\"\")\n    );\n  };\n\n  const transformDigitsToText = () => {\n    setResult(\n      query\n        .split(\"\")\n        .reduce((total, character, characterIndex, characterArray) => {\n          let newTotal = total + character;\n\n          if (\n            characterIndex % 2 === 1 &&\n            characterIndex !== characterArray.length - 1\n          ) {\n            newTotal += \" \";\n          }\n\n          return newTotal;\n        }, \"\")\n        .split(\" \")\n        .map((character) => {\n          return db[Number(character)];\n        })\n        .join(\"\")\n    );\n  };\n\n  return (\n    <div>\n      <div>\n        <button\n          onClick={transformTextToDigits}\n          style={{\n            backgroundColor: \"rgb(0, 0, 200)\",\n            color: \"rgb(255, 255, 55)\",\n          }}\n        >\n          Text to digits\n        </button>\n        <button\n          onClick={transformDigitsToText}\n          style={{\n            backgroundColor: \"rgb(0, 0, 200)\",\n            color: \"rgb(255, 255, 55)\",\n          }}\n        >\n          Digits to text\n        </button>\n        <button\n          onClick={transformDigitsToText}\n          style={{\n            backgroundColor: \"rgb(0, 0, 200)\",\n            color: \"rgb(255, 255, 55)\",\n          }}\n        >\n          Cyrillic to Latin\n        </button>\n      </div>\n      <textarea\n        onChange={handleQuery}\n        placeholder=\"Enter some text or numbers\"\n        style={{ height: \"300px\", width: \"750px\", resize: \"none\" }}\n      />\n      <p style={{ width: \"750px\", overflowWrap: \"break-word\" }}>{result}</p>\n    </div>\n  );\n};\n\nexport { TotalDigitalization };\n"],"names":["TotalDigitalization","query","setQuery","useState","result","setResult","transformDigitsToText","split","reduce","total","character","characterIndex","characterArray","newTotal","length","map","db","Number","join","_jsxs","children","_jsx","onClick","transformTextToDigits","binaryDigit","indexOf","String","style","backgroundColor","color","onChange","_ref","target","value","placeholder","height","width","resize","overflowWrap"],"sourceRoot":""}