{"version":3,"file":"static/js/474.1829d515.chunk.js","mappings":"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","sources":["pages/test/AnimationTest/AnimationTestController.jsx","pages/test/AnimationTest/AnimationTestControllers.jsx","pages/test/DraggableComponent/DraggableComponent.jsx","pages/test/DraggableComponent/DraggableComponentField.jsx","pages/test/DraggableComponent/DraggableComponentStyle.js"],"sourcesContent":["import { DraggableComponent } from \"../DraggableComponent\";\n\nconst AnimationTestController = ({ onChange, value, range, color }) => {\n  const handleValue = ({ valueX }) => {\n    if (valueX >= 0 && valueX <= range) {\n      onChange(valueX);\n    }\n  };\n\n  return (\n    <div style={{ position: \"relative\", height: \"50px\" }}>\n      <DraggableComponent\n        onChange={handleValue}\n        valueX={value}\n        valueY={0}\n        height={50}\n        width={50}\n        backgroundColor={color}\n      />\n    </div>\n  );\n};\n\nexport { AnimationTestController };\n","import { useEffect, useState } from \"react\";\n\nimport { AnimationTestController } from \"./AnimationTestController\";\n\nconst AnimationTestControllers = () => {\n  const [transformRotateValue, setTransformRotateValue] = useState(0);\n  const [transformRotateYvalue, setTransformRotateYvalue] = useState(0);\n  const [transformRotateXvalue, setTransformRotateXvalue] = useState(0);\n  const [perspectiveValue, setPerspectiveValue] = useState(500);\n\n  const handleTransformRotateValue = (value) => setTransformRotateValue(value);\n  const handleTransformRotateYvalue = (value) =>\n    setTransformRotateYvalue(value);\n  const handleTransformRotateXvalue = (value) =>\n    setTransformRotateXvalue(value);\n  const handlePerspectiveValue = (value) => setPerspectiveValue(value);\n\n  const reset = () => {\n    setTransformRotateValue(0);\n    setTransformRotateYvalue(0);\n    setTransformRotateXvalue(0);\n    setPerspectiveValue(500);\n  };\n\n  useEffect(() => {\n    onChange({\n      r: transformRotateValue,\n      ry: transformRotateYvalue,\n      rx: transformRotateXvalue,\n      p: perspectiveValue,\n    });\n  }, [\n    transformRotateValue,\n    transformRotateYvalue,\n    transformRotateXvalue,\n    perspectiveValue,\n  ]);\n\n  return (\n    <div>\n      <AnimationTestController\n        onChange={handleTransformRotateValue}\n        value={transformRotateValue}\n        range={180}\n        color={\"red\"}\n      />\n      <AnimationTestController\n        onChange={handleTransformRotateYvalue}\n        value={transformRotateYvalue}\n        range={180}\n        color={\"green\"}\n      />\n      <AnimationTestController\n        onChange={handleTransformRotateXvalue}\n        value={transformRotateXvalue}\n        range={180}\n        color={\"blue\"}\n      />\n      <AnimationTestController\n        onChange={handlePerspectiveValue}\n        value={perspectiveValue}\n        range={500}\n        color={\"cyan\"}\n      />\n      <button\n        type=\"button\"\n        onClick={reset}\n        style={{ backgroundColor: \"rgb(250, 225, 225)\" }}\n      >\n        Reset\n      </button>\n      <p>transform: rotate: {transformRotateValue}</p>\n      <p>transfrom: rotateY: {transformRotateYvalue}</p>\n      <p>transform: rotateX: {transformRotateXvalue}</p>\n      <p>transform: perspective: {perspectiveValue}</p>\n    </div>\n  );\n};\n\nexport { AnimationTestControllers };\n","import { useEffect, useState } from \"react\";\n\nimport { handleEventListener } from \"../../../hooks\";\n\nimport { DraggableComponentStyle } from \"./DraggableComponentStyle\";\n\nconst DraggableComponent = ({\n  onChange,\n  valueY,\n  valueX,\n  height,\n  width,\n  backgroundColor,\n}) => {\n  const [isDraggable, setIsDraggable] = useState(false);\n  const [mouseDownY, setMouseDownY] = useState(valueY);\n  const [mouseDownX, setMouseDownX] = useState(valueX);\n\n  const handleMouseDown = ({ clientY, clientX }) => {\n    setIsDraggable(true);\n    setMouseDownY(clientY);\n    setMouseDownX(clientX);\n  };\n\n  const handleMouseMove = ({ clientY, clientX }) => {\n    if (isDraggable) {\n      onChange({\n        valueY: valueY + clientY - mouseDownY,\n        valueX: valueX + clientX - mouseDownX,\n      });\n    }\n  };\n\n  const handleMouseUp = () => {\n    setIsDraggable(false);\n  };\n\n  useEffect(handleEventListener(\"mousemove\", handleMouseMove), [isDraggable]);\n  useEffect(handleEventListener(\"mouseup\", handleMouseUp), [isDraggable]);\n\n  return (\n    <DraggableComponentStyle\n      onMouseDown={handleMouseDown}\n      top={valueY}\n      left={valueX}\n      height={height}\n      width={width}\n      backgroundColor={backgroundColor}\n    ></DraggableComponentStyle>\n  );\n};\n\nexport { DraggableComponent };\n","import { useEffect, useState } from \"react\";\n\nimport { DraggableComponent } from \"./DraggableComponent\";\n\nconst DraggableComponentField = () => {\n  const [valueY, setValueY] = useState(200);\n  const [valueX, setValueX] = useState(0);\n\n  const handleXYvalue = ({ valueY, valueX }) => {\n    if (valueY >= 200) {\n      setValueY(valueY);\n    }\n    if (valueX >= 0) {\n      setValueX(valueX);\n    }\n  };\n\n  return (\n    <section>\n      <DraggableComponent\n        valueY={valueY}\n        valueX={valueX}\n        onChange={handleXYvalue}\n      />\n      <p>valueY={valueY}</p>\n      <p>valueX={valueX}</p>\n    </section>\n  );\n};\n\nexport { DraggableComponentField };\n","import styled from \"@emotion/styled\";\n\nconst DraggableComponentStyle = styled.div`\n  position: absolute;\n\n  top: ${({ top }) => {\n    return top;\n  }}px;\n\n  left: ${({ left }) => {\n    return left;\n  }}px;\n\n  height: ${({ height }) => {\n    return height;\n  }}px;\n\n  width: ${({ width }) => {\n    return width;\n  }}px;\n\n  background-color: ${({ backgroundColor }) => {\n    return backgroundColor;\n  }};\n`;\n\nexport { DraggableComponentStyle };\n"],"names":["AnimationTestController","_ref","onChange","value","range","color","_jsx","style","position","height","children","DraggableComponent","_ref2","valueX","valueY","width","backgroundColor","AnimationTestControllers","transformRotateValue","setTransformRotateValue","useState","transformRotateYvalue","setTransformRotateYvalue","transformRotateXvalue","setTransformRotateXvalue","perspectiveValue","setPerspectiveValue","useEffect","r","ry","rx","p","_jsxs","type","onClick","reset","isDraggable","setIsDraggable","mouseDownY","setMouseDownY","mouseDownX","setMouseDownX","handleEventListener","_ref3","clientY","clientX","handleMouseUp","DraggableComponentStyle","onMouseDown","top","left","DraggableComponentField","setValueY","setValueX","styled","div","_templateObject","_taggedTemplateLiteral","_ref4","_ref5"],"sourceRoot":""}