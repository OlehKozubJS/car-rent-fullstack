{"version":3,"file":"static/js/562.b39a0582.chunk.js","mappings":"qwBAIA,MAAMA,EAAmBA,KACvB,MAAOC,EAAmBC,IAAwBC,EAAAA,EAAAA,UAAS,CAAC,IA8B5D,OAFAC,EAAAA,EAAAA,YAAUC,EAAAA,EAAAA,iBA1BmBC,KAC3B,IAAIC,EAAkBN,EAAkBA,EAAkBO,OAAS,GAEnE,GAAID,GAAmB,IACrB,OAGF,IAAIE,EAAiBF,EAErB,OAAa,CACXE,GAAkB,EAQlB,GANqBR,EAAkBS,OACpCC,GACCF,EAAiBE,IACjBC,KAAKC,MAAMJ,EAAiBE,KAI9B,KAEJ,CAEAT,EAAqB,IAAID,EAAmBQ,GAAgB,GAGf,KAAO,CAACR,KAEhDa,EAAAA,EAAAA,KAAA,KAAAC,SAAId,EAAkBe,KAAK,OAAU,C","sources":["pages/TestPages/testComponents/PrimeNumbersTest/PrimeNumbersTest.jsx"],"sourcesContent":["import { useState, useEffect } from \"react\";\n\nimport { handleInterval } from \"./imports\";\n\nconst PrimeNumbersTest = () => {\n  const [primeNumbersArray, setPrimeNumbersArray] = useState([2]);\n\n  const primeNumbersFunction = () => {\n    let lastPrimeNumber = primeNumbersArray[primeNumbersArray.length - 1];\n\n    if (lastPrimeNumber >= 100) {\n      return;\n    }\n\n    let newPrimeNumber = lastPrimeNumber;\n\n    while (true) {\n      newPrimeNumber += 1;\n\n      const isNoDivisors = primeNumbersArray.every(\n        (primeNumber) =>\n          newPrimeNumber / primeNumber !==\n          Math.floor(newPrimeNumber / primeNumber)\n      );\n\n      if (isNoDivisors) {\n        break;\n      }\n    }\n\n    setPrimeNumbersArray([...primeNumbersArray, newPrimeNumber]);\n  };\n\n  useEffect(handleInterval(primeNumbersFunction, 1000), [primeNumbersArray]);\n\n  return <p>{primeNumbersArray.join(\", \")}</p>;\n};\n\nexport { PrimeNumbersTest };\n"],"names":["PrimeNumbersTest","primeNumbersArray","setPrimeNumbersArray","useState","useEffect","handleInterval","primeNumbersFunction","lastPrimeNumber","length","newPrimeNumber","every","primeNumber","Math","floor","_jsx","children","join"],"sourceRoot":""}