{"version":3,"file":"static/js/44.f2ba73a6.chunk.js","mappings":"+MAMA,MAAMA,EAAqBC,IAAmC,IAAlC,OAAEC,EAAM,OAAEC,EAAM,SAAEC,GAAUH,EACtD,MAAOI,EAAaC,IAAkBC,EAAAA,EAAAA,WAAS,IACxCC,EAAYC,IAAiBF,EAAAA,EAAAA,UAASL,IACtCQ,EAAYC,IAAiBJ,EAAAA,EAAAA,UAASJ,GAwB7C,OAHAS,EAAAA,EAAAA,YAAUC,EAAAA,EAAAA,IAAoB,aAbNC,IAA2B,IAA1B,QAAEC,EAAO,QAAEC,GAASF,EACvCT,GACFD,EAAS,CACPF,OAAQA,EAASa,EAAUP,EAC3BL,OAAQA,EAASa,EAAUN,GAE/B,IAO2D,CAACL,KAC9DO,EAAAA,EAAAA,YAAUC,EAAAA,EAAAA,IAAoB,WALRI,KACpBX,GAAe,EAAM,IAIkC,CAACD,KAGxDa,EAAAA,EAAAA,KAACC,EAAAA,wBAAuB,CACtBC,YAxBoBC,IAA2B,IAA1B,QAAEN,EAAO,QAAEC,GAASK,EAC3Cf,GAAe,GACfG,EAAcM,GACdJ,EAAcK,EAAQ,EAsBpBM,IAAKpB,EACLqB,KAAMpB,GACmB,C,8ECpC/B,MAAMgB,E,QAA0BK,EAAOC,IAAGC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,uIAGjC1B,IAAc,IAAb,IAAEqB,GAAKrB,EACb,OAAOqB,CAAG,IAGJD,IAAe,IAAd,KAAEE,GAAMF,EACf,OAAOE,CAAI,IAGJT,IAAgB,IAAf,MAAEc,GAAOd,EACjB,OAAOc,CAAK,IAGJC,IAAiB,IAAhB,OAAEC,GAAQD,EACnB,OAAOC,CAAM,IAGKC,IAA0B,IAAzB,gBAAEC,GAAiBD,EACtC,OAAOC,CAAe,G","sources":["pages/test/DraggableComponent/DraggableComponent.jsx","pages/test/DraggableComponent/DraggableComponentStyle.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\n\nimport { handleEventListener } from \"../../../hooks\";\n\nimport { DraggableComponentStyle } from \"./DraggableComponentStyle\";\n\nconst DraggableComponent = ({ valueY, valueX, onChange }) => {\n  const [isDraggable, setIsDraggable] = useState(false);\n  const [mouseDownY, setMouseDownY] = useState(valueY);\n  const [mouseDownX, setMouseDownX] = useState(valueX);\n\n  const handleMouseDown = ({ clientY, clientX }) => {\n    setIsDraggable(true);\n    setMouseDownY(clientY);\n    setMouseDownX(clientX);\n  };\n\n  const handleMouseMove = ({ clientY, clientX }) => {\n    if (isDraggable) {\n      onChange({\n        valueY: valueY + clientY - mouseDownY,\n        valueX: valueX + clientX - mouseDownX,\n      });\n    }\n  };\n\n  const handleMouseUp = () => {\n    setIsDraggable(false);\n  };\n\n  useEffect(handleEventListener(\"mousemove\", handleMouseMove), [isDraggable]);\n  useEffect(handleEventListener(\"mouseup\", handleMouseUp), [isDraggable]);\n\n  return (\n    <DraggableComponentStyle\n      onMouseDown={handleMouseDown}\n      top={valueY}\n      left={valueX}\n    ></DraggableComponentStyle>\n  );\n};\n\nexport { DraggableComponent };\n","import styled from \"@emotion/styled\";\n\nconst DraggableComponentStyle = styled.div`\n  position: absolute;\n\n  top: ${({ top }) => {\n    return top;\n  }}px;\n\n  left: ${({ left }) => {\n    return left;\n  }}px;\n\n  width: ${({ width }) => {\n    return width;\n  }}px;\n\n  height: ${({ height }) => {\n    return height;\n  }}px;\n\n  background-color: ${({ backgroundColor }) => {\n    return backgroundColor;\n  }};\n`;\n\nexport { DraggableComponentStyle };\n"],"names":["DraggableComponent","_ref","valueY","valueX","onChange","isDraggable","setIsDraggable","useState","mouseDownY","setMouseDownY","mouseDownX","setMouseDownX","useEffect","handleEventListener","_ref3","clientY","clientX","handleMouseUp","_jsx","DraggableComponentStyle","onMouseDown","_ref2","top","left","styled","div","_templateObject","_taggedTemplateLiteral","width","_ref4","height","_ref5","backgroundColor"],"sourceRoot":""}