{"version":3,"file":"static/js/929.b4565c1b.chunk.js","mappings":"iOAKA,MAAMA,EAAgBA,KACpB,MAAOC,EAAiBC,IAAsBC,EAAAA,EAAAA,UAAS,CACrDC,EAAG,EACHC,GAAI,EACJC,GAAI,EACJC,EAAG,MAKL,OACEC,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACEC,EAAAA,EAAAA,KAACC,EAAAA,yBAAwB,CACvBC,SALyBC,GAAcX,EAAmBW,GAM1DC,MAAOb,KAETS,EAAAA,EAAAA,KAACK,EAAAA,oBAAmB,CAACd,gBAAiBA,MAClC,C,uFCpBV,MAAMe,EAA0BC,IAAwC,IAAvC,SAAEL,EAAQ,MAAEE,EAAK,MAAEI,EAAK,MAAEC,GAAOF,EAOhE,OACEP,EAAAA,EAAAA,KAAA,OAAKU,MAAO,CAAEC,SAAU,WAAYC,OAAQ,QAASb,UACnDC,EAAAA,EAAAA,KAACa,EAAAA,mBAAkB,CACjBX,SATcY,IAAiB,IAAhB,OAAEC,GAAQD,EACzBC,GAAU,GAAKA,GAAUP,GAC3BN,EAASa,EACX,EAOIA,OAAQX,EACRY,OAAQ,EACRJ,OAAQ,GACRK,MAAO,GACPC,gBAAiBT,KAEf,C,kGCfV,MAAMR,EAA2BM,IAA0B,IAAzB,SAAEL,EAAQ,MAAEE,GAAOG,EACnD,MAAOY,EAAsBC,IAA2B3B,EAAAA,EAAAA,UAASW,EAAMV,IAChE2B,EAAuBC,IAA4B7B,EAAAA,EAAAA,UAASW,EAAMT,KAClE4B,EAAuBC,IAA4B/B,EAAAA,EAAAA,UAASW,EAAMR,KAClE6B,EAAkBC,IAAuBjC,EAAAA,EAAAA,UAASW,EAAMP,GA8B/D,OAdA8B,EAAAA,EAAAA,YAAU,KACRzB,EAAS,CACPR,EAAGyB,EACHxB,GAAI0B,EACJzB,GAAI2B,EACJ1B,EAAG4B,GACH,GACD,CACDN,EACAE,EACAE,EACAE,KAIA3B,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACEC,EAAAA,EAAAA,KAACM,EAAAA,wBAAuB,CACtBJ,SA/B8BE,GAAUgB,EAAwBhB,GAgChEA,MAAOe,EACPX,MAAO,IACPC,MAAO,SAETT,EAAAA,EAAAA,KAACM,EAAAA,wBAAuB,CACtBJ,SApC+BE,GACnCkB,EAAyBlB,GAoCrBA,MAAOiB,EACPb,MAAO,IACPC,MAAO,WAETT,EAAAA,EAAAA,KAACM,EAAAA,wBAAuB,CACtBJ,SAxC+BE,GACnCoB,EAAyBpB,GAwCrBA,MAAOmB,EACPf,MAAO,IACPC,MAAO,UAETT,EAAAA,EAAAA,KAACM,EAAAA,wBAAuB,CACtBJ,SA5C0BE,GAAUsB,EAAoBtB,GA6CxDA,MAAOqB,EACPjB,MAAO,IACPC,MAAO,UAETT,EAAAA,EAAAA,KAAA,UACE4B,KAAK,SACLC,QAjDQC,KACZV,EAAwB,GACxBE,EAAyB,GACzBE,EAAyB,GACzBE,EAAoB,IAAI,EA8CpBhB,MAAO,CAAEQ,gBAAiB,sBAAuBnB,SAClD,WAGDD,EAAAA,EAAAA,MAAA,KAAAC,SAAA,CAAG,sBAAoBoB,MACvBrB,EAAAA,EAAAA,MAAA,KAAAC,SAAA,CAAG,uBAAqBsB,MACxBvB,EAAAA,EAAAA,MAAA,KAAAC,SAAA,CAAG,uBAAqBwB,MACxBzB,EAAAA,EAAAA,MAAA,KAAAC,SAAA,CAAG,2BAAyB0B,OACxB,C,yEC3EV,MAAMpB,EAAsBE,IAA0B,IAAzB,gBAAEhB,GAAiBgB,EAC9C,OACEP,EAAAA,EAAAA,KAAA,OAAAD,UACEC,EAAAA,EAAAA,KAAA,OACEU,MAAO,CACLE,OAAQ,QACRK,MAAO,QACPc,OAAQ,+BACRb,gBAAiB,MACjBc,gBAAiB,SACjBC,UAAU,eAADC,OAAiB3C,EAAgBM,EAAC,eAAAqC,OAAc3C,EAAgBG,EAAC,iBAAAwC,OAAgB3C,EAAgBI,GAAE,iBAAAuC,OAAgB3C,EAAgBK,GAAE,SAC9IG,SACH,WAGG,C,sGCTV,MAAMc,EAAqBN,IAOpB,IAPqB,SAC1BL,EAAQ,OACRc,EAAM,OACND,EAAM,OACNH,EAAM,MACNK,EAAK,gBACLC,GACDX,EACC,MAAO4B,EAAaC,IAAkB3C,EAAAA,EAAAA,WAAS,IACxC4C,EAAYC,IAAiB7C,EAAAA,EAAAA,UAASuB,IACtCuB,EAAYC,IAAiB/C,EAAAA,EAAAA,UAASsB,GAwB7C,OAHAY,EAAAA,EAAAA,YAAUc,EAAAA,EAAAA,IAAoB,aAbNC,IAA2B,IAA1B,QAAEC,EAAO,QAAEC,GAASF,EACvCP,GACFjC,EAAS,CACPc,OAAQA,EAAS2B,EAAUN,EAC3BtB,OAAQA,EAAS6B,EAAUL,GAE/B,IAO2D,CAACJ,KAC9DR,EAAAA,EAAAA,YAAUc,EAAAA,EAAAA,IAAoB,WALRI,KACpBT,GAAe,EAAM,IAIkC,CAACD,KAGxDnC,EAAAA,EAAAA,KAAC8C,EAAAA,wBAAuB,CACtBC,YAxBoBjC,IAA2B,IAA1B,QAAE6B,EAAO,QAAEC,GAAS9B,EAC3CsB,GAAe,GACfE,EAAcK,GACdH,EAAcI,EAAQ,EAsBpBI,IAAKhC,EACLiC,KAAMlC,EACNH,OAAQA,EACRK,MAAOA,EACPC,gBAAiBA,GACQ,C,iGC5C/B,MAAMgC,EAA0BA,KAC9B,MAAOlC,EAAQmC,IAAa1D,EAAAA,EAAAA,UAAS,MAC9BsB,EAAQqC,IAAa3D,EAAAA,EAAAA,UAAS,GAWrC,OACEK,EAAAA,EAAAA,MAAA,WAAAC,SAAA,EACEC,EAAAA,EAAAA,KAACa,EAAAA,mBAAkB,CACjBG,OAAQA,EACRD,OAAQA,EACRb,SAdgBK,IAAyB,IAAxB,OAAES,EAAM,OAAED,GAAQR,EACnCS,GAAU,KACZmC,EAAUnC,GAERD,GAAU,GACZqC,EAAUrC,EACZ,KAUEjB,EAAAA,EAAAA,MAAA,KAAAC,SAAA,CAAG,UAAQiB,MACXlB,EAAAA,EAAAA,MAAA,KAAAC,SAAA,CAAG,UAAQgB,OACH,C,8ECxBd,MAAM+B,E,QAA0BO,EAAOC,IAAGC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,uIAGjCjD,IAAc,IAAb,IAAEyC,GAAKzC,EACb,OAAOyC,CAAG,IAGJlC,IAAe,IAAd,KAAEmC,GAAMnC,EACf,OAAOmC,CAAI,IAGHP,IAAiB,IAAhB,OAAE9B,GAAQ8B,EACnB,OAAO9B,CAAM,IAGN6C,IAAgB,IAAf,MAAExC,GAAOwC,EACjB,OAAOxC,CAAK,IAGMyC,IAA0B,IAAzB,gBAAExC,GAAiBwC,EACtC,OAAOxC,CAAe,G","sources":["pages/test/AnimationTest/AnimationTest.jsx","pages/test/AnimationTest/AnimationTestController.jsx","pages/test/AnimationTest/AnimationTestControllers.jsx","pages/test/AnimationTest/AnimationTestObject.jsx","pages/test/DraggableComponent/DraggableComponent.jsx","pages/test/DraggableComponent/DraggableComponentField.jsx","pages/test/DraggableComponent/DraggableComponentStyle.js"],"sourcesContent":["import { useState } from \"react\";\n\nimport { AnimationTestControllers } from \"./AnimationTestControllers\";\nimport { AnimationTestObject } from \"./AnimationTestObject\";\n\nconst AnimationTest = () => {\n  const [transformValues, setTransformValues] = useState({\n    r: 0,\n    ry: 0,\n    rx: 0,\n    p: 500,\n  });\n\n  const handleTransformValues = (newValues) => setTransformValues(newValues);\n\n  return (\n    <div>\n      <AnimationTestControllers\n        onChange={handleTransformValues}\n        value={transformValues}\n      />\n      <AnimationTestObject transformValues={transformValues} />\n    </div>\n  );\n};\n\nexport { AnimationTest };\n","import { DraggableComponent } from \"../DraggableComponent\";\n\nconst AnimationTestController = ({ onChange, value, range, color }) => {\n  const handleValue = ({ valueX }) => {\n    if (valueX >= 0 && valueX <= range) {\n      onChange(valueX);\n    }\n  };\n\n  return (\n    <div style={{ position: \"relative\", height: \"50px\" }}>\n      <DraggableComponent\n        onChange={handleValue}\n        valueX={value}\n        valueY={0}\n        height={50}\n        width={50}\n        backgroundColor={color}\n      />\n    </div>\n  );\n};\n\nexport { AnimationTestController };\n","import { useEffect, useState } from \"react\";\n\nimport { AnimationTestController } from \"./AnimationTestController\";\n\nconst AnimationTestControllers = ({ onChange, value }) => {\n  const [transformRotateValue, setTransformRotateValue] = useState(value.r);\n  const [transformRotateYvalue, setTransformRotateYvalue] = useState(value.ry);\n  const [transformRotateXvalue, setTransformRotateXvalue] = useState(value.rx);\n  const [perspectiveValue, setPerspectiveValue] = useState(value.p);\n\n  const handleTransformRotateValue = (value) => setTransformRotateValue(value);\n  const handleTransformRotateYvalue = (value) =>\n    setTransformRotateYvalue(value);\n  const handleTransformRotateXvalue = (value) =>\n    setTransformRotateXvalue(value);\n  const handlePerspectiveValue = (value) => setPerspectiveValue(value);\n\n  const reset = () => {\n    setTransformRotateValue(0);\n    setTransformRotateYvalue(0);\n    setTransformRotateXvalue(0);\n    setPerspectiveValue(500);\n  };\n\n  useEffect(() => {\n    onChange({\n      r: transformRotateValue,\n      ry: transformRotateYvalue,\n      rx: transformRotateXvalue,\n      p: perspectiveValue,\n    });\n  }, [\n    transformRotateValue,\n    transformRotateYvalue,\n    transformRotateXvalue,\n    perspectiveValue,\n  ]);\n\n  return (\n    <div>\n      <AnimationTestController\n        onChange={handleTransformRotateValue}\n        value={transformRotateValue}\n        range={180}\n        color={\"red\"}\n      />\n      <AnimationTestController\n        onChange={handleTransformRotateYvalue}\n        value={transformRotateYvalue}\n        range={180}\n        color={\"green\"}\n      />\n      <AnimationTestController\n        onChange={handleTransformRotateXvalue}\n        value={transformRotateXvalue}\n        range={180}\n        color={\"blue\"}\n      />\n      <AnimationTestController\n        onChange={handlePerspectiveValue}\n        value={perspectiveValue}\n        range={500}\n        color={\"cyan\"}\n      />\n      <button\n        type=\"button\"\n        onClick={reset}\n        style={{ backgroundColor: \"rgb(250, 225, 225)\" }}\n      >\n        Reset\n      </button>\n      <p>transform: rotate: {transformRotateValue}</p>\n      <p>transfrom: rotateY: {transformRotateYvalue}</p>\n      <p>transform: rotateX: {transformRotateXvalue}</p>\n      <p>transform: perspective: {perspectiveValue}</p>\n    </div>\n  );\n};\n\nexport { AnimationTestControllers };\n","const AnimationTestObject = ({ transformValues }) => {\n  return (\n    <div>\n      <div\n        style={{\n          height: \"250px\",\n          width: \"250px\",\n          border: \"5px solid rgb(150, 250, 250)\",\n          backgroundColor: \"red\",\n          transformOrigin: \"center\",\n          transform: `perspective(${transformValues.p}px) rotate(${transformValues.r}deg) rotateY(${transformValues.ry}deg) rotateX(${transformValues.rx}deg)`,\n        }}\n      >\n        Hello\n      </div>\n    </div>\n  );\n};\n\nexport { AnimationTestObject };\n","import { useEffect, useState } from \"react\";\n\nimport { handleEventListener } from \"../../../hooks\";\n\nimport { DraggableComponentStyle } from \"./DraggableComponentStyle\";\n\nconst DraggableComponent = ({\n  onChange,\n  valueY,\n  valueX,\n  height,\n  width,\n  backgroundColor,\n}) => {\n  const [isDraggable, setIsDraggable] = useState(false);\n  const [mouseDownY, setMouseDownY] = useState(valueY);\n  const [mouseDownX, setMouseDownX] = useState(valueX);\n\n  const handleMouseDown = ({ clientY, clientX }) => {\n    setIsDraggable(true);\n    setMouseDownY(clientY);\n    setMouseDownX(clientX);\n  };\n\n  const handleMouseMove = ({ clientY, clientX }) => {\n    if (isDraggable) {\n      onChange({\n        valueY: valueY + clientY - mouseDownY,\n        valueX: valueX + clientX - mouseDownX,\n      });\n    }\n  };\n\n  const handleMouseUp = () => {\n    setIsDraggable(false);\n  };\n\n  useEffect(handleEventListener(\"mousemove\", handleMouseMove), [isDraggable]);\n  useEffect(handleEventListener(\"mouseup\", handleMouseUp), [isDraggable]);\n\n  return (\n    <DraggableComponentStyle\n      onMouseDown={handleMouseDown}\n      top={valueY}\n      left={valueX}\n      height={height}\n      width={width}\n      backgroundColor={backgroundColor}\n    ></DraggableComponentStyle>\n  );\n};\n\nexport { DraggableComponent };\n","import { useEffect, useState } from \"react\";\n\nimport { DraggableComponent } from \"./DraggableComponent\";\n\nconst DraggableComponentField = () => {\n  const [valueY, setValueY] = useState(200);\n  const [valueX, setValueX] = useState(0);\n\n  const handleXYvalue = ({ valueY, valueX }) => {\n    if (valueY >= 200) {\n      setValueY(valueY);\n    }\n    if (valueX >= 0) {\n      setValueX(valueX);\n    }\n  };\n\n  return (\n    <section>\n      <DraggableComponent\n        valueY={valueY}\n        valueX={valueX}\n        onChange={handleXYvalue}\n      />\n      <p>valueY={valueY}</p>\n      <p>valueX={valueX}</p>\n    </section>\n  );\n};\n\nexport { DraggableComponentField };\n","import styled from \"@emotion/styled\";\n\nconst DraggableComponentStyle = styled.div`\n  position: absolute;\n\n  top: ${({ top }) => {\n    return top;\n  }}px;\n\n  left: ${({ left }) => {\n    return left;\n  }}px;\n\n  height: ${({ height }) => {\n    return height;\n  }}px;\n\n  width: ${({ width }) => {\n    return width;\n  }}px;\n\n  background-color: ${({ backgroundColor }) => {\n    return backgroundColor;\n  }};\n`;\n\nexport { DraggableComponentStyle };\n"],"names":["AnimationTest","transformValues","setTransformValues","useState","r","ry","rx","p","_jsxs","children","_jsx","AnimationTestControllers","onChange","newValues","value","AnimationTestObject","AnimationTestController","_ref","range","color","style","position","height","DraggableComponent","_ref2","valueX","valueY","width","backgroundColor","transformRotateValue","setTransformRotateValue","transformRotateYvalue","setTransformRotateYvalue","transformRotateXvalue","setTransformRotateXvalue","perspectiveValue","setPerspectiveValue","useEffect","type","onClick","reset","border","transformOrigin","transform","concat","isDraggable","setIsDraggable","mouseDownY","setMouseDownY","mouseDownX","setMouseDownX","handleEventListener","_ref3","clientY","clientX","handleMouseUp","DraggableComponentStyle","onMouseDown","top","left","DraggableComponentField","setValueY","setValueX","styled","div","_templateObject","_taggedTemplateLiteral","_ref4","_ref5"],"sourceRoot":""}