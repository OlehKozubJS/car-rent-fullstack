{"version":3,"file":"static/js/929.59988dfe.chunk.js","mappings":"2MAIA,MAAMA,EAAgBA,KACpB,MAAOC,EAAsBC,IAA2BC,EAAAA,EAAAA,UAAS,GAQjE,OACEC,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACEC,EAAAA,EAAAA,KAAA,OAAKC,MAAO,CAAEC,SAAU,WAAYC,OAAQ,QAASJ,UACnDC,EAAAA,EAAAA,KAACI,EAAAA,mBAAkB,CACjBC,SAV2BC,IAAiB,IAAhB,OAAEC,GAAQD,EACxCC,GAAU,GAAKA,GAAU,KAC3BX,EAAwBW,EAC1B,EAQMA,OAAQZ,EACRa,OAAQ,OAGZR,EAAAA,EAAAA,KAAA,KAAAD,SAAIJ,MACA,C,sGCjBV,MAAMS,EAAqBE,IAAmC,IAAlC,OAAEE,EAAM,OAAED,EAAM,SAAEF,GAAUC,EACtD,MAAOG,EAAaC,IAAkBb,EAAAA,EAAAA,WAAS,IACxCc,EAAYC,IAAiBf,EAAAA,EAAAA,UAASW,IACtCK,EAAYC,IAAiBjB,EAAAA,EAAAA,UAASU,GAwB7C,OAHAQ,EAAAA,EAAAA,YAAUC,EAAAA,EAAAA,IAAoB,aAbNC,IAA2B,IAA1B,QAAEC,EAAO,QAAEC,GAASF,EACvCR,GACFJ,EAAS,CACPG,OAAQA,EAASU,EAAUP,EAC3BJ,OAAQA,EAASY,EAAUN,GAE/B,IAO2D,CAACJ,KAC9DM,EAAAA,EAAAA,YAAUC,EAAAA,EAAAA,IAAoB,WALRI,KACpBV,GAAe,EAAM,IAIkC,CAACD,KAGxDT,EAAAA,EAAAA,KAACqB,EAAAA,wBAAuB,CACtBC,YAxBoBC,IAA2B,IAA1B,QAAEL,EAAO,QAAEC,GAASI,EAC3Cb,GAAe,GACfE,EAAcM,GACdJ,EAAcK,EAAQ,EAsBpBK,IAAKhB,EACLiB,KAAMlB,GACmB,C,iGClC/B,MAAMmB,EAA0BA,KAC9B,MAAOlB,EAAQmB,IAAa9B,EAAAA,EAAAA,UAAS,MAC9BU,EAAQqB,IAAa/B,EAAAA,EAAAA,UAAS,GAWrC,OACEC,EAAAA,EAAAA,MAAA,WAAAC,SAAA,EACEC,EAAAA,EAAAA,KAACI,EAAAA,mBAAkB,CACjBI,OAAQA,EACRD,OAAQA,EACRF,SAdgBC,IAAyB,IAAxB,OAAEE,EAAM,OAAED,GAAQD,EACnCE,GAAU,KACZmB,EAAUnB,GAERD,GAAU,GACZqB,EAAUrB,EACZ,KAUET,EAAAA,EAAAA,MAAA,KAAAC,SAAA,CAAG,UAAQS,MACXV,EAAAA,EAAAA,MAAA,KAAAC,SAAA,CAAG,UAAQQ,OACH,C,8ECxBd,MAAMc,E,QAA0BQ,EAAOC,IAAGC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,0IAEjC1B,IAAc,IAAb,IAAEkB,GAAKlB,EACb,OAAOkB,CAAG,IAEJD,IAAe,IAAd,KAAEE,GAAMF,EACf,OAAOE,CAAI,G","sources":["pages/test/AnimationTest/AnimationTest.jsx","pages/test/DraggableComponent/DraggableComponent.jsx","pages/test/DraggableComponent/DraggableComponentField.jsx","pages/test/DraggableComponent/DraggableComponentStyle.js"],"sourcesContent":["import { useState } from \"react\";\n\nimport { DraggableComponent } from \"../DraggableComponent\";\n\nconst AnimationTest = () => {\n  const [transformRotateValue, setTransformRotateValue] = useState(0);\n\n  const handleTransformRotateValue = ({ valueX }) => {\n    if (valueX >= 0 && valueX <= 180) {\n      setTransformRotateValue(valueX);\n    }\n  };\n\n  return (\n    <div>\n      <div style={{ position: \"relative\", height: \"50px\" }}>\n        <DraggableComponent\n          onChange={handleTransformRotateValue}\n          valueX={transformRotateValue}\n          valueY={0}\n        />\n      </div>\n      <p>{transformRotateValue}</p>\n    </div>\n  );\n};\n\nexport { AnimationTest };\n","import { useEffect, useState } from \"react\";\n\nimport { handleEventListener } from \"../../../hooks\";\n\nimport { DraggableComponentStyle } from \"./DraggableComponentStyle\";\n\nconst DraggableComponent = ({ valueY, valueX, onChange }) => {\n  const [isDraggable, setIsDraggable] = useState(false);\n  const [mouseDownY, setMouseDownY] = useState(valueY);\n  const [mouseDownX, setMouseDownX] = useState(valueX);\n\n  const handleMouseDown = ({ clientY, clientX }) => {\n    setIsDraggable(true);\n    setMouseDownY(clientY);\n    setMouseDownX(clientX);\n  };\n\n  const handleMouseMove = ({ clientY, clientX }) => {\n    if (isDraggable) {\n      onChange({\n        valueY: valueY + clientY - mouseDownY,\n        valueX: valueX + clientX - mouseDownX,\n      });\n    }\n  };\n\n  const handleMouseUp = () => {\n    setIsDraggable(false);\n  };\n\n  useEffect(handleEventListener(\"mousemove\", handleMouseMove), [isDraggable]);\n  useEffect(handleEventListener(\"mouseup\", handleMouseUp), [isDraggable]);\n\n  return (\n    <DraggableComponentStyle\n      onMouseDown={handleMouseDown}\n      top={valueY}\n      left={valueX}\n    ></DraggableComponentStyle>\n  );\n};\n\nexport { DraggableComponent };\n","import { useEffect, useState } from \"react\";\n\nimport { DraggableComponent } from \"./DraggableComponent\";\n\nconst DraggableComponentField = () => {\n  const [valueY, setValueY] = useState(200);\n  const [valueX, setValueX] = useState(0);\n\n  const handleXYvalue = ({ valueY, valueX }) => {\n    if (valueY >= 200) {\n      setValueY(valueY);\n    }\n    if (valueX >= 0) {\n      setValueX(valueX);\n    }\n  };\n\n  return (\n    <section>\n      <DraggableComponent\n        valueY={valueY}\n        valueX={valueX}\n        onChange={handleXYvalue}\n      />\n      <p>valueY={valueY}</p>\n      <p>valueX={valueX}</p>\n    </section>\n  );\n};\n\nexport { DraggableComponentField };\n","import styled from \"@emotion/styled\";\n\nconst DraggableComponentStyle = styled.div`\n  position: absolute;\n  top: ${({ top }) => {\n    return top;\n  }}px;\n  left: ${({ left }) => {\n    return left;\n  }}px;\n  width: 50px;\n  height: 50px;\n  background-color: rgb(100, 100, 250);\n`;\n\nexport { DraggableComponentStyle };\n"],"names":["AnimationTest","transformRotateValue","setTransformRotateValue","useState","_jsxs","children","_jsx","style","position","height","DraggableComponent","onChange","_ref","valueX","valueY","isDraggable","setIsDraggable","mouseDownY","setMouseDownY","mouseDownX","setMouseDownX","useEffect","handleEventListener","_ref3","clientY","clientX","handleMouseUp","DraggableComponentStyle","onMouseDown","_ref2","top","left","DraggableComponentField","setValueY","setValueX","styled","div","_templateObject","_taggedTemplateLiteral"],"sourceRoot":""}