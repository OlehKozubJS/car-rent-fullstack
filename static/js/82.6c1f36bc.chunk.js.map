{"version":3,"file":"static/js/82.6c1f36bc.chunk.js","mappings":"kNAIA,MAAMA,EAAeC,GACZC,IAAiB,IAAhB,OAAEC,GAAQD,EACZC,GAAU,GAAKA,GAAU,KAC3BF,EAAYG,KAAKC,MAAMF,EAAS,GAClC,EAIEG,EAAgBA,KACpB,MAAOC,EAAsBC,IAA2BC,EAAAA,EAAAA,UAAS,IAC1DC,EAAuBC,IAA4BF,EAAAA,EAAAA,UAAS,IAC5DG,EAAuBC,IAA4BJ,EAAAA,EAAAA,UAAS,IAC5DK,EAAkBC,IAAuBN,EAAAA,EAAAA,UAAS,GAEnDO,EAA6BhB,EAAYQ,GACzCS,EAA8BjB,EAAYW,GAC1CO,EAA8BlB,EAAYa,GAC1CM,EAAyBnB,EAAYe,GAE3C,OACEK,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACEC,EAAAA,EAAAA,KAACC,EAAAA,wBAAuB,CACtBC,SAAUR,EACVS,MAAOlB,EACPmB,MAAO,SAETJ,EAAAA,EAAAA,KAACC,EAAAA,wBAAuB,CACtBC,SAAUP,EACVQ,MAAOf,EACPgB,MAAO,WAETJ,EAAAA,EAAAA,KAACC,EAAAA,wBAAuB,CACtBC,SAAUN,EACVO,MAAOb,EACPc,MAAO,UAETJ,EAAAA,EAAAA,KAACC,EAAAA,wBAAuB,CACtBC,SAAUL,EACVM,MAAOX,EACPY,MAAO,UAETN,EAAAA,EAAAA,MAAA,KAAAC,SAAA,CAAG,sBAAoBd,MACvBa,EAAAA,EAAAA,MAAA,KAAAC,SAAA,CAAG,uBAAqBX,MACxBU,EAAAA,EAAAA,MAAA,KAAAC,SAAA,CAAG,uBAAqBT,MACxBQ,EAAAA,EAAAA,MAAA,KAAAC,SAAA,CAAG,2BAAyBP,MAC5BQ,EAAAA,EAAAA,KAAA,OAAAD,UACEC,EAAAA,EAAAA,KAAA,cAEE,C,+FChDV,MAAMC,EAA0BrB,IAAiC,IAAhC,SAAEsB,EAAQ,MAAEC,EAAK,MAAEC,GAAOxB,EACzD,OACEoB,EAAAA,EAAAA,KAAA,OAAKK,MAAO,CAAEC,SAAU,WAAYC,OAAQ,QAASR,UACnDC,EAAAA,EAAAA,KAACQ,EAAAA,mBAAkB,CACjBN,SAAUA,EACVrB,OAAQsB,EACRM,OAAQ,EACRF,OAAQ,GACRG,MAAO,GACPC,gBAAiBP,KAEf,C,sLCTV,MAAMI,EAAqB5B,IAOpB,IAPqB,SAC1BsB,EAAQ,OACRO,EAAM,OACN5B,EAAM,OACN0B,EAAM,MACNG,EAAK,gBACLC,GACD/B,EACC,MAAOgC,EAAaC,IAAkB1B,EAAAA,EAAAA,WAAS,IACxC2B,EAAYC,IAAiB5B,EAAAA,EAAAA,UAASsB,IACtCO,EAAYC,IAAiB9B,EAAAA,EAAAA,UAASN,GAwB7C,OAHAqC,EAAAA,EAAAA,YAAUC,EAAAA,EAAAA,IAAoB,aAbNC,IAA2B,IAA1B,QAAEC,EAAO,QAAEC,GAASF,EACvCR,GACFV,EAAS,CACPO,OAAQA,EAASY,EAAUP,EAC3BjC,OAAQA,EAASyC,EAAUN,GAE/B,IAO2D,CAACJ,KAC9DM,EAAAA,EAAAA,YAAUC,EAAAA,EAAAA,IAAoB,WALRI,KACpBV,GAAe,EAAM,IAIkC,CAACD,KAGxDZ,EAAAA,EAAAA,KAACwB,EAAAA,wBAAuB,CACtBC,YAxBoBC,IAA2B,IAA1B,QAAEL,EAAO,QAAEC,GAASI,EAC3Cb,GAAe,GACfE,EAAcM,GACdJ,EAAcK,EAAQ,EAsBpBK,IAAKlB,EACLmB,KAAM/C,EACN0B,OAAQA,EACRG,MAAOA,EACPC,gBAAiBA,GACQ,C,iGC5C/B,MAAMkB,EAA0BA,KAC9B,MAAOpB,EAAQqB,IAAa3C,EAAAA,EAAAA,UAAS,MAC9BN,EAAQkD,IAAa5C,EAAAA,EAAAA,UAAS,GAWrC,OACEW,EAAAA,EAAAA,MAAA,WAAAC,SAAA,EACEC,EAAAA,EAAAA,KAACQ,EAAAA,mBAAkB,CACjBC,OAAQA,EACR5B,OAAQA,EACRqB,SAdgBtB,IAAyB,IAAxB,OAAE6B,EAAM,OAAE5B,GAAQD,EACnC6B,GAAU,KACZqB,EAAUrB,GAER5B,GAAU,GACZkD,EAAUlD,EACZ,KAUEiB,EAAAA,EAAAA,MAAA,KAAAC,SAAA,CAAG,UAAQU,MACXX,EAAAA,EAAAA,MAAA,KAAAC,SAAA,CAAG,UAAQlB,OACH,C,8ECxBd,MAAM2C,E,QAA0BQ,EAAOC,IAAGC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,uIAGjCvD,IAAc,IAAb,IAAE+C,GAAK/C,EACb,OAAO+C,CAAG,IAGJD,IAAe,IAAd,KAAEE,GAAMF,EACf,OAAOE,CAAI,IAGHR,IAAiB,IAAhB,OAAEb,GAAQa,EACnB,OAAOb,CAAM,IAGN6B,IAAgB,IAAf,MAAE1B,GAAO0B,EACjB,OAAO1B,CAAK,IAGM2B,IAA0B,IAAzB,gBAAE1B,GAAiB0B,EACtC,OAAO1B,CAAe,G","sources":["pages/test/AnimationTest/AnimationTest.jsx","pages/test/AnimationTest/AnimationTestController.jsx","pages/test/DraggableComponent/DraggableComponent.jsx","pages/test/DraggableComponent/DraggableComponentField.jsx","pages/test/DraggableComponent/DraggableComponentStyle.js"],"sourcesContent":["import { useState } from \"react\";\n\nimport { AnimationTestController } from \"./AnimationTestController\";\n\nconst handleValue = (valueSetter) => {\n  return ({ valueX }) => {\n    if (valueX >= 0 && valueX <= 360) {\n      valueSetter(Math.floor(valueX / 2));\n    }\n  };\n};\n\nconst AnimationTest = () => {\n  const [transformRotateValue, setTransformRotateValue] = useState(0);\n  const [transformRotateYvalue, setTransformRotateYvalue] = useState(0);\n  const [transformRotateXvalue, setTransformRotateXvalue] = useState(0);\n  const [perspectiveValue, setPerspectiveValue] = useState(0);\n\n  const handleTransformRotateValue = handleValue(setTransformRotateValue);\n  const handleTransformRotateYvalue = handleValue(setTransformRotateYvalue);\n  const handleTransformRotateXvalue = handleValue(setTransformRotateXvalue);\n  const handlePerspectiveValue = handleValue(setPerspectiveValue);\n\n  return (\n    <div>\n      <AnimationTestController\n        onChange={handleTransformRotateValue}\n        value={transformRotateValue}\n        color={\"red\"}\n      />\n      <AnimationTestController\n        onChange={handleTransformRotateYvalue}\n        value={transformRotateYvalue}\n        color={\"green\"}\n      />\n      <AnimationTestController\n        onChange={handleTransformRotateXvalue}\n        value={transformRotateXvalue}\n        color={\"blue\"}\n      />\n      <AnimationTestController\n        onChange={handlePerspectiveValue}\n        value={perspectiveValue}\n        color={\"cyan\"}\n      />\n      <p>transform: rotate: {transformRotateValue}</p>\n      <p>transfrom: rotateY: {transformRotateYvalue}</p>\n      <p>transform: rotateX: {transformRotateXvalue}</p>\n      <p>transform: perspective: {perspectiveValue}</p>\n      <div>\n        <div></div>\n      </div>\n    </div>\n  );\n};\n\nexport { AnimationTest };\n","import { useState } from \"react\";\n\nimport { DraggableComponent } from \"../DraggableComponent\";\n\nconst AnimationTestController = ({ onChange, value, color }) => {\n  return (\n    <div style={{ position: \"relative\", height: \"25px\" }}>\n      <DraggableComponent\n        onChange={onChange}\n        valueX={value}\n        valueY={0}\n        height={25}\n        width={50}\n        backgroundColor={color}\n      />\n    </div>\n  );\n};\n\nexport { AnimationTestController };\n","import { useEffect, useState } from \"react\";\n\nimport { handleEventListener } from \"../../../hooks\";\n\nimport { DraggableComponentStyle } from \"./DraggableComponentStyle\";\n\nconst DraggableComponent = ({\n  onChange,\n  valueY,\n  valueX,\n  height,\n  width,\n  backgroundColor,\n}) => {\n  const [isDraggable, setIsDraggable] = useState(false);\n  const [mouseDownY, setMouseDownY] = useState(valueY);\n  const [mouseDownX, setMouseDownX] = useState(valueX);\n\n  const handleMouseDown = ({ clientY, clientX }) => {\n    setIsDraggable(true);\n    setMouseDownY(clientY);\n    setMouseDownX(clientX);\n  };\n\n  const handleMouseMove = ({ clientY, clientX }) => {\n    if (isDraggable) {\n      onChange({\n        valueY: valueY + clientY - mouseDownY,\n        valueX: valueX + clientX - mouseDownX,\n      });\n    }\n  };\n\n  const handleMouseUp = () => {\n    setIsDraggable(false);\n  };\n\n  useEffect(handleEventListener(\"mousemove\", handleMouseMove), [isDraggable]);\n  useEffect(handleEventListener(\"mouseup\", handleMouseUp), [isDraggable]);\n\n  return (\n    <DraggableComponentStyle\n      onMouseDown={handleMouseDown}\n      top={valueY}\n      left={valueX}\n      height={height}\n      width={width}\n      backgroundColor={backgroundColor}\n    ></DraggableComponentStyle>\n  );\n};\n\nexport { DraggableComponent };\n","import { useEffect, useState } from \"react\";\n\nimport { DraggableComponent } from \"./DraggableComponent\";\n\nconst DraggableComponentField = () => {\n  const [valueY, setValueY] = useState(200);\n  const [valueX, setValueX] = useState(0);\n\n  const handleXYvalue = ({ valueY, valueX }) => {\n    if (valueY >= 200) {\n      setValueY(valueY);\n    }\n    if (valueX >= 0) {\n      setValueX(valueX);\n    }\n  };\n\n  return (\n    <section>\n      <DraggableComponent\n        valueY={valueY}\n        valueX={valueX}\n        onChange={handleXYvalue}\n      />\n      <p>valueY={valueY}</p>\n      <p>valueX={valueX}</p>\n    </section>\n  );\n};\n\nexport { DraggableComponentField };\n","import styled from \"@emotion/styled\";\n\nconst DraggableComponentStyle = styled.div`\n  position: absolute;\n\n  top: ${({ top }) => {\n    return top;\n  }}px;\n\n  left: ${({ left }) => {\n    return left;\n  }}px;\n\n  height: ${({ height }) => {\n    return height;\n  }}px;\n\n  width: ${({ width }) => {\n    return width;\n  }}px;\n\n  background-color: ${({ backgroundColor }) => {\n    return backgroundColor;\n  }};\n`;\n\nexport { DraggableComponentStyle };\n"],"names":["handleValue","valueSetter","_ref","valueX","Math","floor","AnimationTest","transformRotateValue","setTransformRotateValue","useState","transformRotateYvalue","setTransformRotateYvalue","transformRotateXvalue","setTransformRotateXvalue","perspectiveValue","setPerspectiveValue","handleTransformRotateValue","handleTransformRotateYvalue","handleTransformRotateXvalue","handlePerspectiveValue","_jsxs","children","_jsx","AnimationTestController","onChange","value","color","style","position","height","DraggableComponent","valueY","width","backgroundColor","isDraggable","setIsDraggable","mouseDownY","setMouseDownY","mouseDownX","setMouseDownX","useEffect","handleEventListener","_ref3","clientY","clientX","handleMouseUp","DraggableComponentStyle","onMouseDown","_ref2","top","left","DraggableComponentField","setValueY","setValueX","styled","div","_templateObject","_taggedTemplateLiteral","_ref4","_ref5"],"sourceRoot":""}