{"version":3,"file":"static/js/285.887c2a18.chunk.js","mappings":"yMAOA,MAAMA,EAAwBA,KAC5B,MAAOC,EAAWC,IAAgBC,EAAAA,EAAAA,UAAS,IAmC3C,OACEC,EAAAA,EAAAA,KAACC,EAAAA,uBAAsB,CAACC,QAjBLC,IACnB,MAAM,MAAEC,EAAK,MAAEC,GAlBQF,KACvB,MAAM,QAAEG,EAAO,QAAEC,EAAO,OAAEC,GAAWL,GAC/B,IAAEM,EAAG,KAAEC,GAASF,EAAOG,wBACvBC,EAAIN,EAAUG,EACdI,EAAIN,EAAUG,EAIpB,MAAO,CAAEN,MAHKQ,EAAKA,EAAI,GAGPP,MAFFQ,EAAKA,EAAI,GAEA,EAUEC,CAAgBX,GAEzCL,EAAa,IACRD,GAEHG,EAAAA,EAAAA,KAACe,EAAAA,cAAa,CAEZN,IAAKL,EACLM,KAAML,EACNW,UAAU,GAAK,GAAAC,OAHPb,EAAK,MAAAa,OAAKZ,MAMtBa,QAAQC,IAnBQC,EAACC,EAAOjB,EAAOC,IACxBgB,EAAMC,MACVC,GAASA,EAAKC,MAAMf,MAAQL,GAASmB,EAAKC,MAAMd,OAASL,IAiBhDe,CAAUvB,EAAWO,EAAOC,GAAO,EAIFoB,SAC1C5B,EAAU6B,KAAKH,GACPA,KAEc,C,6GC9C7B,MAAMtB,EAAyB0B,EAAAA,EAAOC,IAAGC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,yNAenCf,EAAgBY,EAAAA,EAAOC,IAAGG,IAAAA,GAAAD,EAAAA,EAAAA,GAAA,wPAMvBE,IAAc,IAAb,IAAEvB,GAAKuB,EACb,OAAOvB,CAAG,IAGJwB,IAAe,IAAd,KAAEvB,GAAMuB,EACf,OAAOvB,CAAI,IAOOwB,IAAmB,IAAlB,SAAElB,GAAUkB,EAC/B,OAAQlB,EAAY,eAAmB,oBAAoB,IAKpDmB,IAAmB,IAAlB,SAAEnB,GAAUmB,EACpB,OAAQnB,EAAY,qBAAyB,cAAc,G","sources":["pages/test/CellularAutomatonLite/CellularAutomatonLite.jsx","pages/test/CellularAutomatonLite/CellularAutomatonLiteStyle.js"],"sourcesContent":["import { useState } from \"react\";\n\nimport {\n  CellularFieldStyleBase,\n  CellStyleBase,\n} from \"./CellularAutomatonLiteStyle\";\n\nconst CellularAutomatonLite = () => {\n  const [cellsData, setCellsData] = useState([]);\n\n  const getCellPosition = (event) => {\n    const { clientY, clientX, target } = event;\n    const { top, left } = target.getBoundingClientRect();\n    const y = clientY - top;\n    const x = clientX - left;\n    const cellY = y - (y % 10);\n    const cellX = x - (x % 10);\n\n    return { cellY, cellX };\n  };\n\n  const getIsCell = (cells, cellY, cellX) => {\n    return cells.find(\n      (cell) => cell.props.top === cellY && cell.props.left === cellX\n    );\n  };\n\n  const addCellData = (event) => {\n    const { cellY, cellX } = getCellPosition(event);\n\n    setCellsData([\n      ...cellsData,\n\n      <CellStyleBase\n        key={`${cellY}, ${cellX}`}\n        top={cellY}\n        left={cellX}\n        isActive={true}\n      ></CellStyleBase>,\n    ]);\n    console.log(getIsCell(cellsData, cellY, cellX));\n  };\n\n  return (\n    <CellularFieldStyleBase onClick={addCellData}>\n      {cellsData.map((cell) => {\n        return cell;\n      })}\n    </CellularFieldStyleBase>\n  );\n};\n\nexport { CellularAutomatonLite };\n/*\n\n      {cellsData.map((cellData, cellNumber) => {\n        return (\n\n        );\n      })}\n\n*/\n","import styled from \"@emotion/styled\";\n\nconst CellularFieldStyleBase = styled.div`\n  box-sizing: content-box;\n  height: 500px;\n  width: 500px;\n\n  border-style: solid;\n  border-width: 1px;\n  border-color: rgb(0, 0, 0);\n\n  display: flex;\n  flex-wrap: wrap;\n\n  position: relative;\n`;\n\nconst CellStyleBase = styled.div`\n  position: absolute;\n\n  height: 10px;\n  width: 10px;\n\n  top: ${({ top }) => {\n    return top;\n  }}px;\n\n  left: ${({ left }) => {\n    return left;\n  }}px;\n\n  border-style: solid;\n  border-width: 1px;\n  border-color: rgb(0, 0, 0);\n\n  background-color: ${({ isActive }) => {\n    return (isActive && \"rgb(0, 0, 0)\") || \"rgb(255, 255, 255)\";\n  }};\n\n  font-size: 9px;\n\n  color: ${({ isActive }) => {\n    return (isActive && \"rgb(255, 255, 255)\") || \"rgb(0, 0, 0)\";\n  }};\n`;\n\nexport { CellularFieldStyleBase, CellStyleBase };\n"],"names":["CellularAutomatonLite","cellsData","setCellsData","useState","_jsx","CellularFieldStyleBase","onClick","event","cellY","cellX","clientY","clientX","target","top","left","getBoundingClientRect","y","x","getCellPosition","CellStyleBase","isActive","concat","console","log","getIsCell","cells","find","cell","props","children","map","styled","div","_templateObject","_taggedTemplateLiteral","_templateObject2","_ref","_ref2","_ref3","_ref4"],"sourceRoot":""}