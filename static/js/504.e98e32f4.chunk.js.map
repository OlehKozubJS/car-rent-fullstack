{"version":3,"file":"static/js/504.e98e32f4.chunk.js","mappings":"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","sources":["pages/test/AnimationTest/AnimationTest.jsx","pages/test/AnimationTest/AnimationTestController.jsx","pages/test/AnimationTest/AnimationTestControllers.jsx","pages/test/AnimationTest/AnimationTestObject.jsx","pages/test/BinarySystemTest/BinarySystemTest.jsx","pages/test/CellularAutomaton/Cells.jsx","pages/test/CellularAutomaton/CellularAutomaton.jsx","pages/test/CellularAutomaton/CellularAutomatonStyle.js","pages/test/CellularAutomatonLite/CellularAutomatonLite.jsx","pages/test/CellularAutomatonLite/CellularAutomatonLiteStyle.js","pages/test/ComponentSelector/ComponentSelector.jsx","pages/test/ComponentSelector/ComponentSelectorStyle.js","pages/test/CustomRange/CustomRange.jsx","pages/test/CustomRange/CustomRangeField.jsx","pages/test/CustomRange/CustomRangeStyle.js","pages/test/DraggableComponent/DraggableComponent.jsx","pages/test/DraggableComponent/DraggableComponentField.jsx","pages/test/DraggableComponent/DraggableComponentStyle.js","pages/test/GradientHover/GradientHover.jsx","pages/test/GradientHover/GradientHoverField.jsx","pages/test/GradientHover/GradientHoverFieldStyle.js","pages/test/GradientHover/GradientHoverStyle.js","pages/test/GradientHover/setLinearGradient.js","pages/test/LogicGates/LogicGates.jsx","pages/test/NavigationTest/NavigationTest.jsx","pages/test/Recursion/RecursionFunctionTest.jsx","pages/test/TestPage.jsx","pages/test/TotalDigitalization/TotalDigitalization.jsx"],"sourcesContent":["import { useState } from \"react\";\n\nimport { AnimationTestControllers } from \"./AnimationTestControllers\";\nimport { AnimationTestObject } from \"./AnimationTestObject\";\n\nconst AnimationTest = () => {\n  const [transformValues, setTransformValues] = useState({\n    r: 0,\n    ry: 0,\n    rx: 0,\n    p: 500,\n  });\n\n  const handleTransformValues = (newValues) => setTransformValues(newValues);\n\n  return (\n    <div>\n      <AnimationTestControllers\n        onChange={handleTransformValues}\n        value={transformValues}\n      />\n      <AnimationTestObject transformValues={transformValues} />\n    </div>\n  );\n};\n\nexport { AnimationTest };\n","import { DraggableComponent } from \"../DraggableComponent\";\n\nconst AnimationTestController = ({ onChange, value, range, color }) => {\n  const handleValue = ({ valueX }) => {\n    if (valueX >= 0 && valueX <= range) {\n      onChange(valueX);\n    }\n  };\n\n  return (\n    <div style={{ position: \"relative\", height: \"50px\" }}>\n      <DraggableComponent\n        onChange={handleValue}\n        valueX={value}\n        valueY={0}\n        height={50}\n        width={50}\n        backgroundColor={color}\n      />\n    </div>\n  );\n};\n\nexport { AnimationTestController };\n","import { useEffect, useState } from \"react\";\n\nimport { AnimationTestController } from \"./AnimationTestController\";\n\nconst AnimationTestControllers = ({ onChange, value }) => {\n  const [transformRotateValue, setTransformRotateValue] = useState(value.r);\n  const [transformRotateYvalue, setTransformRotateYvalue] = useState(value.ry);\n  const [transformRotateXvalue, setTransformRotateXvalue] = useState(value.rx);\n  const [perspectiveValue, setPerspectiveValue] = useState(value.p);\n\n  const handleTransformRotateValue = (value) => setTransformRotateValue(value);\n  const handleTransformRotateYvalue = (value) =>\n    setTransformRotateYvalue(value);\n  const handleTransformRotateXvalue = (value) =>\n    setTransformRotateXvalue(value);\n  const handlePerspectiveValue = (value) => setPerspectiveValue(value);\n\n  const reset = () => {\n    setTransformRotateValue(0);\n    setTransformRotateYvalue(0);\n    setTransformRotateXvalue(0);\n    setPerspectiveValue(500);\n  };\n\n  useEffect(() => {\n    onChange({\n      r: transformRotateValue,\n      ry: transformRotateYvalue,\n      rx: transformRotateXvalue,\n      p: perspectiveValue,\n    });\n  }, [\n    transformRotateValue,\n    transformRotateYvalue,\n    transformRotateXvalue,\n    perspectiveValue,\n  ]);\n\n  return (\n    <div>\n      <AnimationTestController\n        onChange={handleTransformRotateValue}\n        value={transformRotateValue}\n        range={180}\n        color={\"red\"}\n      />\n      <AnimationTestController\n        onChange={handleTransformRotateYvalue}\n        value={transformRotateYvalue}\n        range={180}\n        color={\"green\"}\n      />\n      <AnimationTestController\n        onChange={handleTransformRotateXvalue}\n        value={transformRotateXvalue}\n        range={180}\n        color={\"blue\"}\n      />\n      <AnimationTestController\n        onChange={handlePerspectiveValue}\n        value={perspectiveValue}\n        range={500}\n        color={\"cyan\"}\n      />\n      <button\n        type=\"button\"\n        onClick={reset}\n        style={{ backgroundColor: \"rgb(250, 225, 225)\" }}\n      >\n        Reset\n      </button>\n      <p>transform: rotate: {transformRotateValue}</p>\n      <p>transfrom: rotateY: {transformRotateYvalue}</p>\n      <p>transform: rotateX: {transformRotateXvalue}</p>\n      <p>transform: perspective: {perspectiveValue}</p>\n    </div>\n  );\n};\n\nexport { AnimationTestControllers };\n","const AnimationTestObject = ({ transformValues }) => {\n  return (\n    <div>\n      <div\n        style={{\n          height: \"250px\",\n          width: \"250px\",\n          border: \"5px solid rgb(150, 250, 250)\",\n          backgroundColor: \"red\",\n          transformOrigin: \"center\",\n          transform: `perspective(${transformValues.p}px) rotate(${transformValues.r}deg) rotateY(${transformValues.ry}deg) rotateX(${transformValues.rx}deg)`,\n        }}\n      >\n        Hello\n      </div>\n    </div>\n  );\n};\n\nexport { AnimationTestObject };\n","import { useState } from \"react\";\n\nconst BinarySystemTest = () => {\n  const [query, setQuery] = useState(\"\");\n  const [result, setResult] = useState(\"\");\n\n  const handleQuery = ({ target }) => {\n    setQuery(target.value);\n  };\n\n  return (\n    <div>\n      <input type=\"text\" placeholder=\"Enter a number\" onChange={handleQuery} />\n      <button>Decimal to binary</button>\n      <button>Binary to decimal</button>\n      <p>{result}</p>\n      {query}\n    </div>\n  );\n};\n\nexport { BinarySystemTest };\n","import { CellStyleBase } from \"./CellularAutomatonStyle\";\n\nconst Cells = () => {\n  let cells = [];\n\n  for (let cellNumber = 1; cellNumber <= 2500; cellNumber += 1) {\n    cells = [\n      ...cells,\n      <CellStyleBase key={cellNumber} isActive={false}></CellStyleBase>,\n    ];\n  }\n\n  return cells;\n};\n\nexport { Cells };\n","import { useState } from \"react\";\n\nimport {\n  CellularFieldStyleBase,\n  CellStyleBase,\n} from \"./CellularAutomatonStyle\";\n\nimport { Cells } from \"./Cells\";\n\nconst createCellsDataArray = () => {\n  let cellsData = [];\n\n  for (let cellNumber = 1; cellNumber <= 2500; cellNumber += 1) {\n    cellsData = [...cellsData, false];\n  }\n\n  return cellsData;\n};\n\nconst CellularAutomaton = () => {\n  const [cellsData, setCellsData] = useState(createCellsDataArray());\n\n  const changeCellData = ({ target }) => {\n    setCellsData(\n      cellsData.map((cellData, cellNumber) => {\n        if (Number(target.dataset.number) === cellNumber) {\n          return !cellData;\n        } else {\n          return cellData;\n        }\n      })\n    );\n  };\n\n  return (\n    <CellularFieldStyleBase onClick={changeCellData}>\n      {cellsData.map((cellData, cellNumber) => {\n        return (\n          <CellStyleBase\n            key={cellNumber}\n            data-number={cellNumber}\n            isActive={cellData}\n          ></CellStyleBase>\n        );\n      })}\n    </CellularFieldStyleBase>\n  );\n};\n\nexport { CellularAutomaton };\n","import styled from \"@emotion/styled\";\n\nconst CellularFieldStyleBase = styled.div`\n  box-sizing: content-box;\n  height: 500px;\n  width: 500px;\n\n  border-style: solid;\n  border-width: 1px;\n  border-color: rgb(0, 0, 0);\n\n  display: flex;\n  flex-wrap: wrap;\n`;\n\nconst CellStyleBase = styled.div`\n  height: 10px;\n  width: 10px;\n\n  border-style: solid;\n  border-width: 1px;\n  border-color: rgb(0, 0, 0);\n\n  background-color: ${({ isActive }) => {\n    return isActive ? \"rgb(0, 0, 0)\" : \"rgb(255, 255, 255)\";\n  }};\n\n  font-size: 9px;\n  color: ${({ isActive }) => {\n    return isActive ? \"rgb(255, 255, 255)\" : \"rgb(0, 0, 0)\";\n  }};\n`;\n\nexport { CellularFieldStyleBase, CellStyleBase };\n","import { useState } from \"react\";\n\nimport {\n  CellularFieldStyleBase,\n  CellStyleBase,\n} from \"./CellularAutomatonLiteStyle\";\n\nconst CellularAutomatonLite = () => {\n  const [cellsData, setCellsData] = useState([]);\n\n  const getCellPosition = (event) => {\n    const { clientY, clientX, currentTarget } = event;\n    const { top, left } = currentTarget.getBoundingClientRect();\n    const y = clientY - top;\n    const x = clientX - left;\n    const cellY = y - (y % 10);\n    const cellX = x - (x % 10);\n\n    return { cellY, cellX };\n  };\n\n  const getIsCell = (cells, cellY, cellX) => {\n    return cells.some(\n      (cell) => cell.props.top === cellY && cell.props.left === cellX\n    );\n  };\n\n  const removeCell = (cells, cellY, cellX) => {\n    return cells.filter(\n      (cell) => !(cell.props.top === cellY && cell.props.left === cellX)\n    );\n  };\n\n  const addCellData = (event) => {\n    const { cellY, cellX } = getCellPosition(event);\n\n    if (getIsCell(cellsData, cellY, cellX)) {\n      setCellsData(removeCell(cellsData, cellY, cellX));\n    } else {\n      setCellsData([\n        ...cellsData,\n\n        <CellStyleBase\n          key={`${cellY}, ${cellX}`}\n          top={cellY}\n          left={cellX}\n          isActive={true}\n        ></CellStyleBase>,\n      ]);\n    }\n  };\n\n  return (\n    <CellularFieldStyleBase onClick={addCellData}>\n      {cellsData.map((cell) => {\n        return cell;\n      })}\n    </CellularFieldStyleBase>\n  );\n};\n\nexport { CellularAutomatonLite };\n","import styled from \"@emotion/styled\";\n\nconst CellularFieldStyleBase = styled.div`\n  box-sizing: content-box;\n  height: 500px;\n  width: 500px;\n\n  border-style: solid;\n  border-width: 1px;\n  border-color: rgb(0, 0, 0);\n\n  display: flex;\n  flex-wrap: wrap;\n\n  position: relative;\n`;\n\nconst CellStyleBase = styled.div`\n  position: absolute;\n\n  height: 10px;\n  width: 10px;\n\n  top: ${({ top }) => {\n    return top;\n  }}px;\n\n  left: ${({ left }) => {\n    return left;\n  }}px;\n\n  border-style: solid;\n  border-width: 1px;\n  border-color: rgb(0, 0, 0);\n\n  background-color: ${({ isActive }) => {\n    return (isActive && \"rgb(0, 0, 0)\") || \"rgb(255, 255, 255)\";\n  }};\n\n  font-size: 9px;\n\n  color: ${({ isActive }) => {\n    return (isActive && \"rgb(255, 255, 255)\") || \"rgb(0, 0, 0)\";\n  }};\n`;\n\nexport { CellularFieldStyleBase, CellStyleBase };\n","import { useState } from \"react\";\n\nimport {\n  ComponentSelectorContainerStyleBase,\n  ComponentSelectorButtonStyleBase,\n  ComponentSelectorRadioButtonStyleBase,\n  ComponentSelectorRadioButtonTextStyleBase,\n} from \"./ComponentSelectorStyle\";\n\nconst ComponentSelector = ({\n  componentNames,\n  initialComponentName,\n  onChange,\n}) => {\n  const [componentName, setComponentName] = useState(initialComponentName);\n\n  const chooseComponent = (event) => {\n    const newComponentName = event.target.value;\n    setComponentName(newComponentName);\n    onChange(newComponentName);\n  };\n\n  return (\n    <ComponentSelectorContainerStyleBase>\n      {componentNames.map((value) => {\n        return (\n          <ComponentSelectorButtonStyleBase\n            key={value}\n            htmlFor={value}\n            isactive={(componentName === value).toString()}\n          >\n            <ComponentSelectorRadioButtonStyleBase\n              id={value}\n              name=\"chooseComponentRadio\"\n              type=\"radio\"\n              value={value}\n              checked={componentName === value}\n              onChange={chooseComponent}\n            />\n            <ComponentSelectorRadioButtonTextStyleBase>\n              {value}\n            </ComponentSelectorRadioButtonTextStyleBase>\n          </ComponentSelectorButtonStyleBase>\n        );\n      })}\n    </ComponentSelectorContainerStyleBase>\n  );\n};\n\nexport { ComponentSelector };\n","import styled from \"@emotion/styled\";\n\nconst ComponentSelectorContainerStyleBase = styled.nav`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  gap: 12px;\n\n  margin-bottom: 10px;\n`;\n\nconst ComponentSelectorButtonStyleBase = styled.label`\n  height: 24px;\n\n  display: flex;\n  padding-inline: 24px;\n  justify-content: center;\n  align-items: center;\n\n  border: none;\n  border-radius: 12px;\n  background-color: ${({ isactive }) => {\n    return isactive === \"true\" ? \"rgb(112, 52, 255)\" : \"rgba(138, 138, 137, 1)\";\n  }};\n\n  color: #fff;\n  font-size: 14px;\n  line-height: 20px;\n\n  font-family: \"Manrope-SemiBold\", sans-serif;\n\n  &:hover {\n    background-color: rgb(68, 11, 205);\n  }\n`;\n\nconst ComponentSelectorRadioButtonStyleBase = styled.input`\n  display: none;\n`;\n\nconst ComponentSelectorRadioButtonTextStyleBase = styled.span`\n  display: inline;\n`;\n\nexport {\n  ComponentSelectorContainerStyleBase,\n  ComponentSelectorButtonStyleBase,\n  ComponentSelectorRadioButtonStyleBase,\n  ComponentSelectorRadioButtonTextStyleBase,\n};\n","import { useEffect, useState } from \"react\";\n\nimport { handleEventListener } from \"../../../hooks\";\n\nimport { RangeField, RangeDial } from \"./CustomRangeStyle\";\n\nconst CustomRange = ({ value, onChange }) => {\n  const [isDraggable, setIsDraggable] = useState(false);\n  const [mouseDownX, setMouseDownX] = useState(0);\n\n  const handleMouseDown = ({ clientX }) => {\n    setIsDraggable(true);\n    setMouseDownX(clientX);\n  };\n\n  const handleMouseMove = ({ clientX }) => {\n    if (isDraggable) {\n      const newRangeValue = value + clientX - mouseDownX;\n\n      if (newRangeValue >= 0 && newRangeValue <= 450) {\n        onChange(newRangeValue);\n      }\n    }\n  };\n\n  const handleMouseUp = () => {\n    setIsDraggable(false);\n  };\n\n  useEffect(handleEventListener(\"mousemove\", handleMouseMove), [isDraggable]);\n\n  useEffect(handleEventListener(\"mouseup\", handleMouseUp), [isDraggable]);\n\n  return (\n    <RangeField>\n      <RangeDial onMouseDown={handleMouseDown} left={value}></RangeDial>\n    </RangeField>\n  );\n};\n\nexport { CustomRange };\n","import { useState } from \"react\";\n\nimport { CustomRange } from \"./CustomRange\";\n\nconst CustomRangeField = () => {\n  const [rangeValue, setRangeValue] = useState(0);\n\n  const handleRangeValue = (newRangeValue) => {\n    setRangeValue(newRangeValue);\n  };\n\n  return (\n    <section>\n      <CustomRange onChange={handleRangeValue} value={rangeValue} />\n      <p>{rangeValue}</p>\n    </section>\n  );\n};\n\nexport { CustomRangeField };\n","import styled from \"@emotion/styled\";\n\nconst RangeField = styled.div`\n  width: 500px;\n  height: 50px;\n  background-color: rgb(200, 200, 250);\n\n  position: relative;\n`;\n\nconst RangeDial = styled.div`\n  position: absolute;\n  top: 0;\n  left: ${({ left }) => {\n    return left;\n  }}px;\n  width: 50px;\n  height: 50px;\n  background-color: rgb(100, 100, 250);\n`;\n\nexport { RangeField, RangeDial };\n","import { useEffect, useState } from \"react\";\n\nimport { handleEventListener } from \"../../../hooks\";\n\nimport { DraggableComponentStyle } from \"./DraggableComponentStyle\";\n\nconst DraggableComponent = ({\n  onChange,\n  valueY,\n  valueX,\n  height,\n  width,\n  backgroundColor,\n}) => {\n  const [isDraggable, setIsDraggable] = useState(false);\n  const [mouseDownY, setMouseDownY] = useState(valueY);\n  const [mouseDownX, setMouseDownX] = useState(valueX);\n\n  const handleMouseDown = ({ clientY, clientX }) => {\n    setIsDraggable(true);\n    setMouseDownY(clientY);\n    setMouseDownX(clientX);\n  };\n\n  const handleMouseMove = ({ clientY, clientX }) => {\n    if (isDraggable) {\n      onChange({\n        valueY: valueY + clientY - mouseDownY,\n        valueX: valueX + clientX - mouseDownX,\n      });\n    }\n  };\n\n  const handleMouseUp = () => {\n    setIsDraggable(false);\n  };\n\n  useEffect(handleEventListener(\"mousemove\", handleMouseMove), [isDraggable]);\n  useEffect(handleEventListener(\"mouseup\", handleMouseUp), [isDraggable]);\n\n  return (\n    <DraggableComponentStyle\n      onMouseDown={handleMouseDown}\n      top={valueY}\n      left={valueX}\n      height={height}\n      width={width}\n      backgroundColor={backgroundColor}\n    ></DraggableComponentStyle>\n  );\n};\n\nexport { DraggableComponent };\n","import { useEffect, useState } from \"react\";\n\nimport { DraggableComponent } from \"./DraggableComponent\";\n\nconst DraggableComponentField = () => {\n  const [valueY, setValueY] = useState(200);\n  const [valueX, setValueX] = useState(0);\n\n  const handleXYvalue = ({ valueY, valueX }) => {\n    if (valueY >= 200) {\n      setValueY(valueY);\n    }\n    if (valueX >= 0) {\n      setValueX(valueX);\n    }\n  };\n\n  return (\n    <section>\n      <DraggableComponent\n        valueY={valueY}\n        valueX={valueX}\n        onChange={handleXYvalue}\n      />\n      <p>valueY={valueY}</p>\n      <p>valueX={valueX}</p>\n    </section>\n  );\n};\n\nexport { DraggableComponentField };\n","import styled from \"@emotion/styled\";\n\nconst DraggableComponentStyle = styled.div`\n  position: absolute;\n\n  top: ${({ top }) => {\n    return top;\n  }}px;\n\n  left: ${({ left }) => {\n    return left;\n  }}px;\n\n  height: ${({ height }) => {\n    return height;\n  }}px;\n\n  width: ${({ width }) => {\n    return width;\n  }}px;\n\n  background-color: ${({ backgroundColor }) => {\n    return backgroundColor;\n  }};\n`;\n\nexport { DraggableComponentStyle };\n","import { useState, useEffect } from \"react\";\n\nimport { setLinearGradient } from \"./setLinearGradient\";\n\nimport { GradientHoverStyleBase } from \"./GradientHoverStyle\";\n\nconst GradientHover = () => {\n  const [isGradientAnimation, setIsGradientAnimation] = useState(false);\n  const [parentNodeInformation, setParentnodeInformation] = useState({});\n  const [gradientLeft, setGradientLeft] = useState(-40);\n\n  const gradientAnimation = () => {\n    if (gradientLeft >= parentNodeInformation.offsetWidth + 40) {\n      setGradientLeft(-40);\n      setIsGradientAnimation(false);\n    } else {\n      setGradientLeft(gradientLeft + 5);\n    }\n  };\n\n  const handleMouseOver = (event) => {\n    setParentnodeInformation(event.target.parentNode);\n    setIsGradientAnimation(true);\n  };\n\n  useEffect(() => {\n    const animation = setInterval(gradientAnimation, 5);\n\n    if (!isGradientAnimation) {\n      clearInterval(animation);\n    }\n\n    return () => {\n      clearInterval(animation);\n    };\n  }, [isGradientAnimation, gradientLeft]);\n\n  return (\n    <GradientHoverStyleBase\n      onMouseOver={handleMouseOver}\n      backgroundimage={setLinearGradient(gradientLeft)}\n    ></GradientHoverStyleBase>\n  );\n};\n\nexport { GradientHover };\n","import { GradientHover } from \"./GradientHover\";\n\nimport { GradientHoverFieldStyleBase } from \"./GradientHoverFieldStyle\";\n\nconst GradientHoverField = () => {\n  return (\n    <div>\n      <GradientHoverFieldStyleBase>\n        Gradient hover\n        <GradientHover />\n      </GradientHoverFieldStyleBase>\n    </div>\n  );\n};\n\nexport { GradientHoverField };\n","import styled from \"@emotion/styled\";\n\nconst GradientHoverFieldStyleBase = styled.div`\n  height: 150px;\n  width: 800px;\n\n  background-color: black;\n  color: white;\n\n  position: relative;\n`;\n\nexport { GradientHoverFieldStyleBase };\n","import styled from \"@emotion/styled\";\n\nconst GradientHoverStyleBase = styled.div`\n  position: absolute;\n\n  top: 0px;\n  left: 0px;\n  height: 100%;\n  width: 100%;\n\n  background: none;\n  color: white;\n  background-image: ${({ backgroundimage }) => {\n    return backgroundimage;\n  }};\n`;\n\nexport { GradientHoverStyleBase };\n","const setLinearGradient = (gradientLeft) => {\n  return `linear-gradient(\n    to right,\n  rgba(255, 255, 255, 0),\n  rgba(255, 255, 255, 0)\n    ${gradientLeft}px,\n  rgba(255, 255, 255, 1)\n    ${gradientLeft + 20}px,\n  rgba(255, 255, 255, 1)\n    ${gradientLeft + 20}px,\n  rgba(255, 255, 255, 0)\n    ${gradientLeft + 40}px\n  );`;\n};\n\nexport { setLinearGradient };\n","import { useEffect, useState } from \"react\";\n\nconst LogicGates = () => {\n  const [inputA, setInputA] = useState(false);\n  const [inputB, setInputB] = useState(false);\n  const [inputC, setInputC] = useState(false);\n  const [inputD, setInputD] = useState(0);\n  const [inputE, setInputE] = useState(0);\n  const [output, setOutput] = useState(false);\n\n  const handleTrueA = () => {\n    setInputA(true);\n  };\n  const handleFalseA = () => {\n    setInputA(false);\n  };\n  const handleTrueB = () => {\n    setInputB(true);\n  };\n  const handleFalseB = () => {\n    setInputB(false);\n  };\n  const handleTrueC = () => {\n    setInputC(true);\n  };\n  const handleFalseC = () => {\n    setInputC(false);\n  };\n  const handleValueD = () => {\n    const newValueD = inputD + 1;\n    if (newValueD === 2) {\n      setInputD(-1);\n    } else {\n      setInputD(newValueD);\n    }\n  };\n  const handleValueE = () => {\n    const newValueE = inputE + 1;\n    if (newValueE === 2) {\n      setInputE(-1);\n    } else {\n      setInputE(newValueE);\n    }\n  };\n\n  const nor = (a, b) => {\n    return !(a || b);\n  };\n\n  const nand = (a, b) => {\n    return !(a && b);\n  };\n\n  const ternarAND = (a, b) => {\n    if (a <= b) {\n      return a;\n    } else {\n      return b;\n    }\n  };\n  const ternarOR = (a, b) => {\n    if (a >= b) {\n      return a;\n    } else {\n      return b;\n    }\n  };\n\n  useEffect(() => {\n    const valOneAB = nor(inputA, inputB);\n    const valTwoA = nor(inputA, valOneAB);\n    const valTwoB = nor(valOneAB, inputB);\n    const valThreeAB = nor(valTwoA, valTwoB);\n    const valFourAB = nor(valThreeAB, valThreeAB);\n\n    setOutput(valFourAB);\n  }, [inputA, inputB, inputC]);\n\n  return (\n    <div>\n      <div>\n        <button type=\"button\" onClick={(inputA && handleFalseA) || handleTrueA}>\n          A: {(inputA && \"true\") || \"false\"}\n        </button>\n        <button type=\"button\" onClick={(inputB && handleFalseB) || handleTrueB}>\n          B: {(inputB && \"true\") || \"false\"}\n        </button>\n        <button type=\"button\" onClick={(inputC && handleFalseC) || handleTrueC}>\n          C: {(inputC && \"true\") || \"false\"}\n        </button>\n        <p>{(output && \"true\") || \"false\"}</p>\n      </div>\n      <div>\n        <button type=\"button\" onClick={handleValueD}>\n          D: {inputD}\n        </button>\n        <button type=\"button\" onClick={handleValueE}>\n          E: {inputE}\n        </button>\n        <p>{ternarAND(inputD, inputE)}</p>\n        <p>{ternarOR(inputD, inputE)}</p>\n      </div>\n    </div>\n  );\n};\n\nexport { LogicGates };\n","import { useState } from \"react\";\n\nimport { Navigate } from \"react-router-dom\";\n\nconst NavigationTest = () => {\n  const [pagePath, setPagePath] = useState(\"test\");\n\n  const handlePagePath = (event) => {\n    event.preventDefault();\n    setPagePath(event.currentTarget.elements.pageNameInput.value);\n    event.currentTarget.reset();\n  };\n\n  return (\n    <section>\n      <form onSubmit={handlePagePath}>\n        <input name=\"pageNameInput\" type=\"text\" placeholder=\"Enter page name\" />\n        <button type=\"submit\">Enter</button>\n      </form>\n      <Navigate to={`/${pagePath}`} />\n    </section>\n  );\n};\n\nexport { NavigationTest };\n","const RecursionFunctionTest = () => {\n  const recursionFunction = (number) => {\n    if (number <= 0) {\n      return number;\n    } else {\n      return 2 * number - 1 + recursionFunction(number - 1);\n    }\n  };\n\n  const recursionFunction2 = (number) => {\n    if (number === 0) {\n      return 0;\n    } else {\n      return 3 * number * (number - 1) + 1 + recursionFunction2(number - 1);\n    }\n  };\n\n  return (\n    <div>\n      <p>Square of 0: {recursionFunction2(0)}</p>\n      <p>Square of 1: {recursionFunction2(1)}</p>\n      <p>Square of 2: {recursionFunction2(2)}</p>\n      <p>Square of 3: {recursionFunction2(3)}</p>\n      <p>Square of 4: {recursionFunction2(4)}</p>\n      <p>Square of 5: {recursionFunction2(5)}</p>\n      <p>Square of 6: {recursionFunction2(6)}</p>\n      <p>Square of 7: {recursionFunction2(7)}</p>\n      <p>Square of 8: {recursionFunction2(8)}</p>\n      <p>Square of 9: {recursionFunction2(9)}</p>\n      <p>Square of 10: {recursionFunction2(10)}</p>\n    </div>\n  );\n};\n\nexport { RecursionFunctionTest };\n/*\n\n(x + 1)^3 = (x^2 + 2x + 1)*(x + 1) = x^3 + 2x^2 + x + x^2 + 2x + 1 = x^3 + 3x^2 + 3x + 1;\n\n3(x - 1)^2 + 3(x - 1) + 1 = 3x^2 - 6x + 3 + 3x - 3 + 1 = 3x^2 - 3x + 1 = 3x(x - 1) + 1;\n\n3^3 = 27 = (3*1*0 + 1) + (3*2*1 + 1) + (3*3*2 + 1) = 1 + 7 + 19\n\n*/\n","import { useState } from \"react\";\n\nimport { ComponentSelector } from \"./ComponentSelector\";\n\nimport { LogicGates } from \"./LogicGates\";\nimport { CustomRangeField } from \"./CustomRange\";\nimport { DraggableComponentField } from \"./DraggableComponent\";\nimport { RecursionFunctionTest } from \"./Recursion\";\nimport { NavigationTest } from \"./NavigationTest\";\nimport { GradientHoverField } from \"./GradientHover\";\nimport { CellularAutomaton } from \"./CellularAutomaton\";\nimport { CellularAutomatonLite } from \"./CellularAutomatonLite\";\nimport { AnimationTest } from \"./AnimationTest\";\nimport { TotalDigitalization } from \"./TotalDigitalization\";\nimport { BinarySystemTest } from \"./BinarySystemTest\";\n\nconst TestPage = () => {\n  const [componentName, setComponentName] = useState(\"Total digitalization\");\n\n  const chooseComponent = (newComponentName) => {\n    setComponentName(newComponentName);\n  };\n\n  return (\n    <section>\n      <ComponentSelector\n        componentNames={[\n          \"Logic gates\",\n          \"Simplest custom range\",\n          \"Draggable component\",\n          \"Navigation test\",\n          \"Recursion\",\n          \"Gradient hover\",\n          \"Cellular automaton\",\n          \"Cellular automaton lite\",\n          \"Animation test\",\n          \"Total digitalization\",\n          \"Binary system\",\n        ]}\n        initialComponentName={componentName}\n        onChange={chooseComponent}\n      />\n      {componentName === \"Logic gates\" && <LogicGates />}\n      {componentName === \"Simplest custom range\" && <CustomRangeField />}\n      {componentName === \"Draggable component\" && <DraggableComponentField />}\n      {componentName === \"Navigation test\" && <NavigationTest />}\n      {componentName === \"Recursion\" && <RecursionFunctionTest />}\n      {componentName === \"Gradient hover\" && <GradientHoverField />}\n      {componentName === \"Cellular automaton\" && <CellularAutomaton />}\n      {componentName === \"Cellular automaton lite\" && <CellularAutomatonLite />}\n      {componentName === \"Animation test\" && <AnimationTest />}\n      {componentName === \"Total digitalization\" && <TotalDigitalization />}\n      {componentName === \"Binary system\" && <BinarySystemTest />}\n    </section>\n  );\n};\n\nexport { TestPage };\n","import { useState } from \"react\";\n\nimport db from \"./totalDigitalizationDB.json\";\n\nconst TotalDigitalization = () => {\n  const [query, setQuery] = useState(\"\");\n  const [result, setResult] = useState(\"\");\n\n  const handleQuery = ({ target }) => {\n    setQuery(target.value);\n  };\n\n  const transformTextToDigits = () => {\n    setResult(\n      query\n        .split(\"\")\n        .map((character) => {\n          let binaryDigit = db.indexOf(character);\n          if (binaryDigit < 10) {\n            binaryDigit = \"0\" + binaryDigit;\n          }\n          return String(binaryDigit);\n        })\n        .join(\"\")\n    );\n  };\n\n  const transformDigitsToText = () => {\n    setResult(\n      query\n        .split(\"\")\n        .reduce((total, character, characterIndex, characterArray) => {\n          let newTotal = total + character;\n\n          if (\n            characterIndex % 2 === 1 &&\n            characterIndex !== characterArray.length - 1\n          ) {\n            newTotal += \" \";\n          }\n\n          return newTotal;\n        }, \"\")\n        .split(\" \")\n        .map((character) => {\n          return db[Number(character)];\n        })\n        .join(\"\")\n    );\n  };\n\n  return (\n    <div>\n      <div>\n        <button\n          onClick={transformTextToDigits}\n          style={{\n            backgroundColor: \"rgb(0, 0, 200)\",\n            color: \"rgb(255, 255, 55)\",\n          }}\n        >\n          Text to digits\n        </button>\n        <button\n          onClick={transformDigitsToText}\n          style={{\n            backgroundColor: \"rgb(0, 0, 200)\",\n            color: \"rgb(255, 255, 55)\",\n          }}\n        >\n          Digits to text\n        </button>\n      </div>\n      <textarea\n        onChange={handleQuery}\n        placeholder=\"Enter some text or numbers\"\n        style={{ height: \"300px\", width: \"750px\", resize: \"none\" }}\n      />\n      <p style={{ width: \"750px\", overflowWrap: \"break-word\" }}>{result}</p>\n    </div>\n  );\n};\n\nexport { TotalDigitalization };\n"],"names":["AnimationTest","transformValues","setTransformValues","useState","r","ry","rx","p","_jsxs","children","_jsx","AnimationTestControllers","onChange","newValues","value","AnimationTestObject","AnimationTestController","_ref","range","color","style","position","height","DraggableComponent","_ref2","valueX","valueY","width","backgroundColor","transformRotateValue","setTransformRotateValue","transformRotateYvalue","setTransformRotateYvalue","transformRotateXvalue","setTransformRotateXvalue","perspectiveValue","setPerspectiveValue","useEffect","type","onClick","reset","border","transformOrigin","transform","concat","BinarySystemTest","query","setQuery","result","setResult","placeholder","target","Cells","cells","cellNumber","CellStyleBase","isActive","CellularAutomaton","cellsData","setCellsData","createCellsDataArray","CellularFieldStyleBase","map","cellData","Number","dataset","number","styled","div","_templateObject","_taggedTemplateLiteral","_templateObject2","CellularAutomatonLite","event","cellY","cellX","clientY","clientX","currentTarget","top","left","getBoundingClientRect","y","x","getCellPosition","getIsCell","some","cell","props","removeCell","filter","_ref3","_ref4","ComponentSelector","componentNames","initialComponentName","componentName","setComponentName","chooseComponent","newComponentName","ComponentSelectorContainerStyleBase","ComponentSelectorButtonStyleBase","htmlFor","isactive","toString","ComponentSelectorRadioButtonStyleBase","id","name","checked","ComponentSelectorRadioButtonTextStyleBase","nav","label","input","_templateObject3","span","_templateObject4","CustomRange","isDraggable","setIsDraggable","mouseDownX","setMouseDownX","handleEventListener","newRangeValue","handleMouseUp","RangeField","RangeDial","onMouseDown","CustomRangeField","rangeValue","setRangeValue","mouseDownY","setMouseDownY","DraggableComponentStyle","DraggableComponentField","setValueY","setValueX","_ref5","GradientHover","isGradientAnimation","setIsGradientAnimation","parentNodeInformation","setParentnodeInformation","gradientLeft","setGradientLeft","gradientAnimation","offsetWidth","animation","setInterval","clearInterval","GradientHoverStyleBase","onMouseOver","parentNode","backgroundimage","setLinearGradient","GradientHoverField","GradientHoverFieldStyleBase","LogicGates","inputA","setInputA","inputB","setInputB","inputC","setInputC","inputD","setInputD","inputE","setInputE","output","setOutput","nor","a","b","valOneAB","valTwoA","valTwoB","valThreeAB","valFourAB","handleFalseA","handleTrueA","handleFalseB","handleTrueB","handleFalseC","handleTrueC","handleValueD","newValueD","handleValueE","newValueE","ternarOR","ternarAND","NavigationTest","pagePath","setPagePath","onSubmit","preventDefault","elements","pageNameInput","Navigate","to","RecursionFunctionTest","recursionFunction2","TestPage","TotalDigitalization","transformTextToDigits","split","character","binaryDigit","db","indexOf","String","join","transformDigitsToText","reduce","total","characterIndex","characterArray","newTotal","length","resize","overflowWrap"],"sourceRoot":""}