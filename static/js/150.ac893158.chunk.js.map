{"version":3,"file":"static/js/150.ac893158.chunk.js","mappings":"6MAOA,MAAMA,EAAwBA,KAC5B,MAAOC,EAAWC,IAAgBC,EAAAA,EAAAA,UAAS,IAarCC,EAAYA,CAACC,EAAOC,EAAOC,IACxBF,EAAMG,MACVC,GAASA,EAAKC,MAAMC,MAAQL,GAASG,EAAKC,MAAME,OAASL,IA8B9D,OACEM,EAAAA,EAAAA,KAACC,EAAAA,uBAAsB,CAACC,QArBLC,IACnB,MAAM,MAAEV,EAAK,MAAEC,GAxBQS,KACvB,MAAM,QAAEC,EAAO,QAAEC,EAAO,OAAEC,GAAWH,GAC/B,IAAEL,EAAG,KAAEC,GAASO,EAAOC,wBACvBC,EAAIJ,EAAUN,EACdW,EAAIJ,EAAUN,EAIpB,MAAO,CAAEN,MAHKe,EAAKA,EAAI,GAGPd,MAFFe,EAAKA,EAAI,GAEA,EAgBEC,CAAgBP,GAErCZ,EAAUH,EAAWK,EAAOC,GATfiB,EAACnB,EAAOC,EAAOC,KACzBF,EAAMoB,QACVhB,KAAWA,EAAKC,MAAMC,MAAQL,GAASG,EAAKC,MAAME,OAASL,IAC7D,EAOCiB,CAAWvB,EAAWK,EAAOC,IAE7BL,EAAa,IACRD,GAEHY,EAAAA,EAAAA,KAACa,EAAAA,cAAa,CAEZf,IAAKL,EACLM,KAAML,EACNoB,UAAU,GAAK,GAAAC,OAHPtB,EAAK,MAAAsB,OAAKrB,MAMtBsB,QAAQC,IAAI1B,EAAUH,EAAWK,EAAOC,IAC1C,EAI6CwB,SAC1C9B,EAAU+B,KAAKvB,GACPA,KAEc,C,6GCxD7B,MAAMK,EAAyBmB,EAAAA,EAAOC,IAAGC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,yNAenCV,EAAgBO,EAAAA,EAAOC,IAAGG,IAAAA,GAAAD,EAAAA,EAAAA,GAAA,wPAMvBE,IAAc,IAAb,IAAE3B,GAAK2B,EACb,OAAO3B,CAAG,IAGJ4B,IAAe,IAAd,KAAE3B,GAAM2B,EACf,OAAO3B,CAAI,IAOO4B,IAAmB,IAAlB,SAAEb,GAAUa,EAC/B,OAAQb,EAAY,eAAmB,oBAAoB,IAKpDc,IAAmB,IAAlB,SAAEd,GAAUc,EACpB,OAAQd,EAAY,qBAAyB,cAAc,G","sources":["pages/test/CellularAutomatonLite/CellularAutomatonLite.jsx","pages/test/CellularAutomatonLite/CellularAutomatonLiteStyle.js"],"sourcesContent":["import { useState } from \"react\";\n\nimport {\n  CellularFieldStyleBase,\n  CellStyleBase,\n} from \"./CellularAutomatonLiteStyle\";\n\nconst CellularAutomatonLite = () => {\n  const [cellsData, setCellsData] = useState([]);\n\n  const getCellPosition = (event) => {\n    const { clientY, clientX, target } = event;\n    const { top, left } = target.getBoundingClientRect();\n    const y = clientY - top;\n    const x = clientX - left;\n    const cellY = y - (y % 10);\n    const cellX = x - (x % 10);\n\n    return { cellY, cellX };\n  };\n\n  const getIsCell = (cells, cellY, cellX) => {\n    return cells.some(\n      (cell) => cell.props.top === cellY && cell.props.left === cellX\n    );\n  };\n\n  const removeCell = (cells, cellY, cellX) => {\n    return cells.filter(\n      (cell) => !(cell.props.top === cellY && cell.props.left === cellX)\n    );\n  };\n\n  const addCellData = (event) => {\n    const { cellY, cellX } = getCellPosition(event);\n\n    if (getIsCell(cellsData, cellY, cellX)) {\n      removeCell(cellsData, cellY, cellX);\n    } else {\n      setCellsData([\n        ...cellsData,\n\n        <CellStyleBase\n          key={`${cellY}, ${cellX}`}\n          top={cellY}\n          left={cellX}\n          isActive={true}\n        ></CellStyleBase>,\n      ]);\n      console.log(getIsCell(cellsData, cellY, cellX));\n    }\n  };\n\n  return (\n    <CellularFieldStyleBase onClick={addCellData}>\n      {cellsData.map((cell) => {\n        return cell;\n      })}\n    </CellularFieldStyleBase>\n  );\n};\n\nexport { CellularAutomatonLite };\n/*\n\n      {cellsData.map((cellData, cellNumber) => {\n        return (\n\n        );\n      })}\n\n*/\n","import styled from \"@emotion/styled\";\n\nconst CellularFieldStyleBase = styled.div`\n  box-sizing: content-box;\n  height: 500px;\n  width: 500px;\n\n  border-style: solid;\n  border-width: 1px;\n  border-color: rgb(0, 0, 0);\n\n  display: flex;\n  flex-wrap: wrap;\n\n  position: relative;\n`;\n\nconst CellStyleBase = styled.div`\n  position: absolute;\n\n  height: 10px;\n  width: 10px;\n\n  top: ${({ top }) => {\n    return top;\n  }}px;\n\n  left: ${({ left }) => {\n    return left;\n  }}px;\n\n  border-style: solid;\n  border-width: 1px;\n  border-color: rgb(0, 0, 0);\n\n  background-color: ${({ isActive }) => {\n    return (isActive && \"rgb(0, 0, 0)\") || \"rgb(255, 255, 255)\";\n  }};\n\n  font-size: 9px;\n\n  color: ${({ isActive }) => {\n    return (isActive && \"rgb(255, 255, 255)\") || \"rgb(0, 0, 0)\";\n  }};\n`;\n\nexport { CellularFieldStyleBase, CellStyleBase };\n"],"names":["CellularAutomatonLite","cellsData","setCellsData","useState","getIsCell","cells","cellY","cellX","some","cell","props","top","left","_jsx","CellularFieldStyleBase","onClick","event","clientY","clientX","target","getBoundingClientRect","y","x","getCellPosition","removeCell","filter","CellStyleBase","isActive","concat","console","log","children","map","styled","div","_templateObject","_taggedTemplateLiteral","_templateObject2","_ref","_ref2","_ref3","_ref4"],"sourceRoot":""}