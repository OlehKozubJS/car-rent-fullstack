{"version":3,"file":"static/js/929.dae04224.chunk.js","mappings":"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","sources":["pages/test/AnimationTest/AnimationTest.jsx","pages/test/AnimationTest/AnimationTestController.jsx","pages/test/DraggableComponent/DraggableComponent.jsx","pages/test/DraggableComponent/DraggableComponentField.jsx","pages/test/DraggableComponent/DraggableComponentStyle.js"],"sourcesContent":["import { useState } from \"react\";\n\nimport { AnimationTestController } from \"./AnimationTestController\";\n\nconst AnimationTest = () => {\n  const [transformRotateValue, setTransformRotateValue] = useState(0);\n  const [transformRotateYvalue, setTransformRotateYvalue] = useState(0);\n  const [transformRotateXvalue, setTransformRotateXvalue] = useState(0);\n  const [perspectiveValue, setPerspectiveValue] = useState(0);\n\n  const handleTransformRotateValue = ({ valueX }) => {\n    if (valueX >= 0 && valueX <= 180) {\n      setTransformRotateValue(valueX);\n    }\n  };\n\n  const handleTransformRotateYvalue = ({ valueX }) => {\n    if (valueX >= 0 && valueX <= 180) {\n      setTransformRotateYvalue(valueX);\n    }\n  };\n\n  const handleTransformRotateXvalue = ({ valueX }) => {\n    if (valueX >= 0 && valueX <= 180) {\n      setTransformRotateXvalue(valueX);\n    }\n  };\n\n  const handlePerspectiveValue = ({ valueX }) => {\n    if (valueX >= 0 && valueX <= 180) {\n      setPerspectiveValue(valueX);\n    }\n  };\n  return (\n    <div>\n      <AnimationTestController\n        onChange={handleTransformRotateValue}\n        value={transformRotateValue}\n        color={\"red\"}\n      />\n      <AnimationTestController\n        onChange={handleTransformRotateYvalue}\n        value={transformRotateYvalue}\n        color={\"green\"}\n      />\n      <AnimationTestController\n        onChange={handleTransformRotateXvalue}\n        value={transformRotateXvalue}\n        color={\"blue\"}\n      />\n      <AnimationTestController\n        onChange={handlePerspectiveValue}\n        value={perspectiveValue}\n        color={\"cyan\"}\n      />\n      <p>transform: rotate: {transformRotateValue}</p>\n      <p>transfrom: rotateY: {transformRotateYvalue}</p>\n      <p>transform: rotateX: {transformRotateXvalue}</p>\n      <p>transform: perspective: {perspectiveValue}</p>\n      <div>\n        <div></div>\n      </div>\n    </div>\n  );\n};\n\nexport { AnimationTest };\n","import { useState } from \"react\";\n\nimport { DraggableComponent } from \"../DraggableComponent\";\n\nconst AnimationTestController = ({ onChange, value, color }) => {\n  return (\n    <div style={{ position: \"relative\", height: \"25px\" }}>\n      <DraggableComponent\n        onChange={onChange}\n        valueX={value}\n        valueY={0}\n        height={25}\n        width={50}\n        backgroundColor={color}\n      />\n    </div>\n  );\n};\n\nexport { AnimationTestController };\n","import { useEffect, useState } from \"react\";\n\nimport { handleEventListener } from \"../../../hooks\";\n\nimport { DraggableComponentStyle } from \"./DraggableComponentStyle\";\n\nconst DraggableComponent = ({\n  onChange,\n  valueY,\n  valueX,\n  height,\n  width,\n  backgroundColor,\n}) => {\n  const [isDraggable, setIsDraggable] = useState(false);\n  const [mouseDownY, setMouseDownY] = useState(valueY);\n  const [mouseDownX, setMouseDownX] = useState(valueX);\n\n  const handleMouseDown = ({ clientY, clientX }) => {\n    setIsDraggable(true);\n    setMouseDownY(clientY);\n    setMouseDownX(clientX);\n  };\n\n  const handleMouseMove = ({ clientY, clientX }) => {\n    if (isDraggable) {\n      onChange({\n        valueY: valueY + clientY - mouseDownY,\n        valueX: valueX + clientX - mouseDownX,\n      });\n    }\n  };\n\n  const handleMouseUp = () => {\n    setIsDraggable(false);\n  };\n\n  useEffect(handleEventListener(\"mousemove\", handleMouseMove), [isDraggable]);\n  useEffect(handleEventListener(\"mouseup\", handleMouseUp), [isDraggable]);\n\n  return (\n    <DraggableComponentStyle\n      onMouseDown={handleMouseDown}\n      top={valueY}\n      left={valueX}\n      height={height}\n      width={width}\n      backgroundColor={backgroundColor}\n    ></DraggableComponentStyle>\n  );\n};\n\nexport { DraggableComponent };\n","import { useEffect, useState } from \"react\";\n\nimport { DraggableComponent } from \"./DraggableComponent\";\n\nconst DraggableComponentField = () => {\n  const [valueY, setValueY] = useState(200);\n  const [valueX, setValueX] = useState(0);\n\n  const handleXYvalue = ({ valueY, valueX }) => {\n    if (valueY >= 200) {\n      setValueY(valueY);\n    }\n    if (valueX >= 0) {\n      setValueX(valueX);\n    }\n  };\n\n  return (\n    <section>\n      <DraggableComponent\n        valueY={valueY}\n        valueX={valueX}\n        onChange={handleXYvalue}\n      />\n      <p>valueY={valueY}</p>\n      <p>valueX={valueX}</p>\n    </section>\n  );\n};\n\nexport { DraggableComponentField };\n","import styled from \"@emotion/styled\";\n\nconst DraggableComponentStyle = styled.div`\n  position: absolute;\n\n  top: ${({ top }) => {\n    return top;\n  }}px;\n\n  left: ${({ left }) => {\n    return left;\n  }}px;\n\n  height: ${({ height }) => {\n    return height;\n  }}px;\n\n  width: ${({ width }) => {\n    return width;\n  }}px;\n\n  background-color: ${({ backgroundColor }) => {\n    return backgroundColor;\n  }};\n`;\n\nexport { DraggableComponentStyle };\n"],"names":["AnimationTest","transformRotateValue","setTransformRotateValue","useState","transformRotateYvalue","setTransformRotateYvalue","transformRotateXvalue","setTransformRotateXvalue","perspectiveValue","setPerspectiveValue","_jsxs","children","_jsx","AnimationTestController","onChange","_ref","valueX","value","color","_ref2","_ref3","_ref4","style","position","height","DraggableComponent","valueY","width","backgroundColor","isDraggable","setIsDraggable","mouseDownY","setMouseDownY","mouseDownX","setMouseDownX","useEffect","handleEventListener","clientY","clientX","handleMouseUp","DraggableComponentStyle","onMouseDown","top","left","DraggableComponentField","setValueY","setValueX","styled","div","_templateObject","_taggedTemplateLiteral","_ref5"],"sourceRoot":""}