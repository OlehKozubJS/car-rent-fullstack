{"version":3,"file":"static/js/150.799a2ca8.chunk.js","mappings":"sLAEA,MAAMA,EAAQA,KACZ,IAAIC,EAAQ,GAEZ,IAAK,IAAIC,EAAa,EAAGA,GAAc,KAAMA,GAAc,EACzDD,EAAQ,IACHA,GACHE,EAAAA,EAAAA,KAACC,EAAAA,cAAa,CAAkBC,UAAU,GAAtBH,IAIxB,OAAOD,CAAK,C,yGCHd,MAUMK,EAAwBA,KAC5B,MAAOC,EAAWC,IAAgBC,EAAAA,EAAAA,UAAS,IAc3C,OACEC,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,CAAE,UAEAT,EAAAA,EAAAA,KAACU,EAAAA,uBAAsB,CAACC,QAfLC,IAAiB,IAAhB,OAAEC,GAAQD,EAChCP,EACED,EAAUU,KAAI,CAACC,EAAUhB,IACnBiB,OAAOH,EAAOI,QAAQC,UAAYnB,GAC5BgB,EAEDA,IAGZ,EAMiDN,SAC7CL,EAAUU,KAAI,CAACC,EAAUhB,KAEtBC,EAAAA,EAAAA,KAACC,EAAAA,cAAa,CAEZ,cAAaF,EACbG,SAAUa,GAFLhB,SAOZ,C,6GC9CP,MAAMW,EAAyBS,EAAAA,EAAOC,IAAGC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,gMAanCrB,EAAgBkB,EAAAA,EAAOC,IAAGG,IAAAA,GAAAD,EAAAA,EAAAA,GAAA,0LAQVV,IAAmB,IAAlB,SAAEV,GAAUU,EAC/B,OAAQV,EAAY,eAAmB,oBAAoB,IAIpDsB,IAAmB,IAAlB,SAAEtB,GAAUsB,EACpB,OAAQtB,EAAY,qBAAyB,cAAc,G","sources":["pages/test/CellularAutomatonLite/Cells.jsx","pages/test/CellularAutomatonLite/CellularAutomatonLite.jsx","pages/test/CellularAutomatonLite/CellularAutomatonStyle.js"],"sourcesContent":["import { CellStyleBase } from \"./CellularAutomatonStyle\";\n\nconst Cells = () => {\n  let cells = [];\n\n  for (let cellNumber = 1; cellNumber <= 2500; cellNumber += 1) {\n    cells = [\n      ...cells,\n      <CellStyleBase key={cellNumber} isActive={false}></CellStyleBase>,\n    ];\n  }\n\n  return cells;\n};\n\nexport { Cells };\n","import { useState } from \"react\";\n\nimport {\n  CellularFieldStyleBase,\n  CellStyleBase,\n} from \"./CellularAutomatonStyle\";\n\nimport { Cells } from \"./Cells\";\n\nconst createCellsDataArray = () => {\n  let cellsData = [];\n\n  for (let cellNumber = 1; cellNumber <= 2500; cellNumber += 1) {\n    cellsData = [...cellsData, false];\n  }\n\n  return cellsData;\n};\n\nconst CellularAutomatonLite = () => {\n  const [cellsData, setCellsData] = useState([]);\n\n  const changeCellData = ({ target }) => {\n    setCellsData(\n      cellsData.map((cellData, cellNumber) => {\n        if (Number(target.dataset.number) === cellNumber) {\n          return !cellData;\n        } else {\n          return cellData;\n        }\n      })\n    );\n  };\n\n  return (\n    <>\n      Hello!\n      <CellularFieldStyleBase onClick={changeCellData}>\n        {cellsData.map((cellData, cellNumber) => {\n          return (\n            <CellStyleBase\n              key={cellNumber}\n              data-number={cellNumber}\n              isActive={cellData}\n            ></CellStyleBase>\n          );\n        })}\n      </CellularFieldStyleBase>\n    </>\n  );\n};\n\nexport { CellularAutomatonLite };\n/*\n\n\n\n*/\n","import styled from \"@emotion/styled\";\n\nconst CellularFieldStyleBase = styled.div`\n  box-sizing: content-box;\n  height: 500px;\n  width: 500px;\n\n  border-style: solid;\n  border-width: 1px;\n  border-color: rgb(0, 0, 0);\n\n  display: flex;\n  flex-wrap: wrap;\n`;\n\nconst CellStyleBase = styled.div`\n  height: 10px;\n  width: 10px;\n\n  border-style: solid;\n  border-width: 1px;\n  border-color: rgb(0, 0, 0);\n\n  background-color: ${({ isActive }) => {\n    return (isActive && \"rgb(0, 0, 0)\") || \"rgb(255, 255, 255)\";\n  }};\n\n  font-size: 9px;\n  color: ${({ isActive }) => {\n    return (isActive && \"rgb(255, 255, 255)\") || \"rgb(0, 0, 0)\";\n  }};\n`;\n\nexport { CellularFieldStyleBase, CellStyleBase };\n"],"names":["Cells","cells","cellNumber","_jsx","CellStyleBase","isActive","CellularAutomatonLite","cellsData","setCellsData","useState","_jsxs","_Fragment","children","CellularFieldStyleBase","onClick","_ref","target","map","cellData","Number","dataset","number","styled","div","_templateObject","_taggedTemplateLiteral","_templateObject2","_ref2"],"sourceRoot":""}