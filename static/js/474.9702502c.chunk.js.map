{"version":3,"file":"static/js/474.9702502c.chunk.js","mappings":"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","sources":["pages/test/AnimationTest/AnimationTestController.jsx","pages/test/AnimationTest/AnimationTestControllers.jsx","pages/test/DraggableComponent/DraggableComponent.jsx","pages/test/DraggableComponent/DraggableComponentField.jsx","pages/test/DraggableComponent/DraggableComponentStyle.js"],"sourcesContent":["import { DraggableComponent } from \"../DraggableComponent\";\n\nconst AnimationTestController = ({ onChange, value, range, color }) => {\n  const handleValue = ({ valueX }) => {\n    if (valueX >= 0 && valueX <= range) {\n      onChange(valueX);\n    }\n  };\n\n  return (\n    <div style={{ position: \"relative\", height: \"50px\" }}>\n      <DraggableComponent\n        onChange={handleValue}\n        valueX={value}\n        valueY={0}\n        height={50}\n        width={50}\n        backgroundColor={color}\n      />\n    </div>\n  );\n};\n\nexport { AnimationTestController };\n","import { useEffect, useState } from \"react\";\n\nimport { AnimationTestController } from \"./AnimationTestController\";\n\nconst AnimationTestControllers = () => {\n  const [transformRotateValue, setTransformRotateValue] = useState(0);\n  const [transformRotateYvalue, setTransformRotateYvalue] = useState(0);\n  const [transformRotateXvalue, setTransformRotateXvalue] = useState(0);\n  const [perspectiveValue, setPerspectiveValue] = useState(500);\n\n  const handleTransformRotateValue = (value) => setTransformRotateValue(value);\n  const handleTransformRotateYvalue = (value) =>\n    setTransformRotateYvalue(value);\n  const handleTransformRotateXvalue = (value) =>\n    setTransformRotateXvalue(value);\n  const handlePerspectiveValue = (value) => setPerspectiveValue(value);\n\n  const reset = () => {\n    setTransformRotateValue(0);\n    setTransformRotateYvalue(0);\n    setTransformRotateXvalue(0);\n    setPerspectiveValue(500);\n  };\n\n  useEffect(() => {}, [\n    transformRotateValue,\n    transformRotateYvalue,\n    transformRotateXvalue,\n    perspectiveValue,\n  ]);\n\n  return (\n    <div>\n      <AnimationTestController\n        onChange={handleTransformRotateValue}\n        value={transformRotateValue}\n        range={180}\n        color={\"red\"}\n      />\n      <AnimationTestController\n        onChange={handleTransformRotateYvalue}\n        value={transformRotateYvalue}\n        range={180}\n        color={\"green\"}\n      />\n      <AnimationTestController\n        onChange={handleTransformRotateXvalue}\n        value={transformRotateXvalue}\n        range={180}\n        color={\"blue\"}\n      />\n      <AnimationTestController\n        onChange={handlePerspectiveValue}\n        value={perspectiveValue}\n        range={500}\n        color={\"cyan\"}\n      />\n      <button\n        type=\"button\"\n        onClick={reset}\n        style={{ backgroundColor: \"rgb(250, 225, 225)\" }}\n      >\n        Reset\n      </button>\n      <p>transform: rotate: {transformRotateValue}</p>\n      <p>transfrom: rotateY: {transformRotateYvalue}</p>\n      <p>transform: rotateX: {transformRotateXvalue}</p>\n      <p>transform: perspective: {perspectiveValue}</p>\n    </div>\n  );\n};\n\nexport { AnimationTestControllers };\n","import { useEffect, useState } from \"react\";\n\nimport { handleEventListener } from \"../../../hooks\";\n\nimport { DraggableComponentStyle } from \"./DraggableComponentStyle\";\n\nconst DraggableComponent = ({\n  onChange,\n  valueY,\n  valueX,\n  height,\n  width,\n  backgroundColor,\n}) => {\n  const [isDraggable, setIsDraggable] = useState(false);\n  const [mouseDownY, setMouseDownY] = useState(valueY);\n  const [mouseDownX, setMouseDownX] = useState(valueX);\n\n  const handleMouseDown = ({ clientY, clientX }) => {\n    setIsDraggable(true);\n    setMouseDownY(clientY);\n    setMouseDownX(clientX);\n  };\n\n  const handleMouseMove = ({ clientY, clientX }) => {\n    if (isDraggable) {\n      onChange({\n        valueY: valueY + clientY - mouseDownY,\n        valueX: valueX + clientX - mouseDownX,\n      });\n    }\n  };\n\n  const handleMouseUp = () => {\n    setIsDraggable(false);\n  };\n\n  useEffect(handleEventListener(\"mousemove\", handleMouseMove), [isDraggable]);\n  useEffect(handleEventListener(\"mouseup\", handleMouseUp), [isDraggable]);\n\n  return (\n    <DraggableComponentStyle\n      onMouseDown={handleMouseDown}\n      top={valueY}\n      left={valueX}\n      height={height}\n      width={width}\n      backgroundColor={backgroundColor}\n    ></DraggableComponentStyle>\n  );\n};\n\nexport { DraggableComponent };\n","import { useEffect, useState } from \"react\";\n\nimport { DraggableComponent } from \"./DraggableComponent\";\n\nconst DraggableComponentField = () => {\n  const [valueY, setValueY] = useState(200);\n  const [valueX, setValueX] = useState(0);\n\n  const handleXYvalue = ({ valueY, valueX }) => {\n    if (valueY >= 200) {\n      setValueY(valueY);\n    }\n    if (valueX >= 0) {\n      setValueX(valueX);\n    }\n  };\n\n  return (\n    <section>\n      <DraggableComponent\n        valueY={valueY}\n        valueX={valueX}\n        onChange={handleXYvalue}\n      />\n      <p>valueY={valueY}</p>\n      <p>valueX={valueX}</p>\n    </section>\n  );\n};\n\nexport { DraggableComponentField };\n","import styled from \"@emotion/styled\";\n\nconst DraggableComponentStyle = styled.div`\n  position: absolute;\n\n  top: ${({ top }) => {\n    return top;\n  }}px;\n\n  left: ${({ left }) => {\n    return left;\n  }}px;\n\n  height: ${({ height }) => {\n    return height;\n  }}px;\n\n  width: ${({ width }) => {\n    return width;\n  }}px;\n\n  background-color: ${({ backgroundColor }) => {\n    return backgroundColor;\n  }};\n`;\n\nexport { DraggableComponentStyle };\n"],"names":["AnimationTestController","_ref","onChange","value","range","color","_jsx","style","position","height","children","DraggableComponent","_ref2","valueX","valueY","width","backgroundColor","AnimationTestControllers","transformRotateValue","setTransformRotateValue","useState","transformRotateYvalue","setTransformRotateYvalue","transformRotateXvalue","setTransformRotateXvalue","perspectiveValue","setPerspectiveValue","useEffect","_jsxs","type","onClick","reset","isDraggable","setIsDraggable","mouseDownY","setMouseDownY","mouseDownX","setMouseDownX","handleEventListener","_ref3","clientY","clientX","handleMouseUp","DraggableComponentStyle","onMouseDown","top","left","DraggableComponentField","setValueY","setValueX","styled","div","_templateObject","_taggedTemplateLiteral","_ref4","_ref5"],"sourceRoot":""}