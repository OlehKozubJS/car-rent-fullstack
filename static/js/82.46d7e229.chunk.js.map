{"version":3,"file":"static/js/82.46d7e229.chunk.js","mappings":"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","sources":["pages/test/AnimationTest/AnimationTest.jsx","pages/test/AnimationTest/AnimationTestController.jsx","pages/test/DraggableComponent/DraggableComponent.jsx","pages/test/DraggableComponent/DraggableComponentField.jsx","pages/test/DraggableComponent/DraggableComponentStyle.js"],"sourcesContent":["import { useState } from \"react\";\n\nimport { AnimationTestController } from \"./AnimationTestController\";\n\nconst handleValue = (valueSetter) => {\n  return ({ valueX }) => {\n    if (valueX >= 0 && valueX <= 180) {\n      valueSetter(valueX);\n    }\n  };\n};\n\nconst AnimationTest = () => {\n  const [transformRotateValue, setTransformRotateValue] = useState(0);\n  const [transformRotateYvalue, setTransformRotateYvalue] = useState(0);\n  const [transformRotateXvalue, setTransformRotateXvalue] = useState(0);\n  const [perspectiveValue, setPerspectiveValue] = useState(0);\n\n  const handleTransformRotateValue = handleValue(setTransformRotateValue);\n  const handleTransformRotateYvalue = handleValue(setTransformRotateYvalue);\n  const handleTransformRotateXvalue = handleValue(setTransformRotateXvalue);\n  const handlePerspectiveValue = handleValue(setPerspectiveValue);\n\n  return (\n    <div>\n      <AnimationTestController\n        onChange={handleTransformRotateValue}\n        value={transformRotateValue}\n        color={\"red\"}\n      />\n      <AnimationTestController\n        onChange={handleTransformRotateYvalue}\n        value={transformRotateYvalue}\n        color={\"green\"}\n      />\n      <AnimationTestController\n        onChange={handleTransformRotateXvalue}\n        value={transformRotateXvalue}\n        color={\"blue\"}\n      />\n      <AnimationTestController\n        onChange={handlePerspectiveValue}\n        value={perspectiveValue}\n        color={\"cyan\"}\n      />\n      <p>transform: rotate: {transformRotateValue}</p>\n      <p>transfrom: rotateY: {transformRotateYvalue}</p>\n      <p>transform: rotateX: {transformRotateXvalue}</p>\n      <p>transform: perspective: {perspectiveValue}</p>\n      <div>\n        <div\n          style={{\n            height: \"250px\",\n            width: \"250px\",\n            border: \"5px solid rgb(150, 250, 250)\",\n            backgroundColor: \"red\",\n            transformOrigin: \"center\",\n            transform: `perspective(${perspectiveValue}px) rotate(${transformRotateValue}deg) rotateY(${transformRotateYvalue}deg) rotateX(${transformRotateXvalue}deg)`,\n          }}\n        >\n          Hello\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport { AnimationTest };\n","import { DraggableComponent } from \"../DraggableComponent\";\n\nconst AnimationTestController = ({ onChange, value, range, color }) => {\n  const handleValue = () => {\n    return ({ valueX }) => {\n      if (valueX >= 0 && valueX <= range) {\n        onChange(valueX);\n      }\n    };\n  };\n\n  return (\n    <div style={{ position: \"relative\", height: \"50px\" }}>\n      <DraggableComponent\n        onChange={handleValue}\n        valueX={value}\n        valueY={0}\n        height={50}\n        width={50}\n        backgroundColor={color}\n      />\n    </div>\n  );\n};\n\nexport { AnimationTestController };\n","import { useEffect, useState } from \"react\";\n\nimport { handleEventListener } from \"../../../hooks\";\n\nimport { DraggableComponentStyle } from \"./DraggableComponentStyle\";\n\nconst DraggableComponent = ({\n  onChange,\n  valueY,\n  valueX,\n  height,\n  width,\n  backgroundColor,\n}) => {\n  const [isDraggable, setIsDraggable] = useState(false);\n  const [mouseDownY, setMouseDownY] = useState(valueY);\n  const [mouseDownX, setMouseDownX] = useState(valueX);\n\n  const handleMouseDown = ({ clientY, clientX }) => {\n    setIsDraggable(true);\n    setMouseDownY(clientY);\n    setMouseDownX(clientX);\n  };\n\n  const handleMouseMove = ({ clientY, clientX }) => {\n    if (isDraggable) {\n      onChange({\n        valueY: valueY + clientY - mouseDownY,\n        valueX: valueX + clientX - mouseDownX,\n      });\n    }\n  };\n\n  const handleMouseUp = () => {\n    setIsDraggable(false);\n  };\n\n  useEffect(handleEventListener(\"mousemove\", handleMouseMove), [isDraggable]);\n  useEffect(handleEventListener(\"mouseup\", handleMouseUp), [isDraggable]);\n\n  return (\n    <DraggableComponentStyle\n      onMouseDown={handleMouseDown}\n      top={valueY}\n      left={valueX}\n      height={height}\n      width={width}\n      backgroundColor={backgroundColor}\n    ></DraggableComponentStyle>\n  );\n};\n\nexport { DraggableComponent };\n","import { useEffect, useState } from \"react\";\n\nimport { DraggableComponent } from \"./DraggableComponent\";\n\nconst DraggableComponentField = () => {\n  const [valueY, setValueY] = useState(200);\n  const [valueX, setValueX] = useState(0);\n\n  const handleXYvalue = ({ valueY, valueX }) => {\n    if (valueY >= 200) {\n      setValueY(valueY);\n    }\n    if (valueX >= 0) {\n      setValueX(valueX);\n    }\n  };\n\n  return (\n    <section>\n      <DraggableComponent\n        valueY={valueY}\n        valueX={valueX}\n        onChange={handleXYvalue}\n      />\n      <p>valueY={valueY}</p>\n      <p>valueX={valueX}</p>\n    </section>\n  );\n};\n\nexport { DraggableComponentField };\n","import styled from \"@emotion/styled\";\n\nconst DraggableComponentStyle = styled.div`\n  position: absolute;\n\n  top: ${({ top }) => {\n    return top;\n  }}px;\n\n  left: ${({ left }) => {\n    return left;\n  }}px;\n\n  height: ${({ height }) => {\n    return height;\n  }}px;\n\n  width: ${({ width }) => {\n    return width;\n  }}px;\n\n  background-color: ${({ backgroundColor }) => {\n    return backgroundColor;\n  }};\n`;\n\nexport { DraggableComponentStyle };\n"],"names":["handleValue","valueSetter","_ref","valueX","AnimationTest","transformRotateValue","setTransformRotateValue","useState","transformRotateYvalue","setTransformRotateYvalue","transformRotateXvalue","setTransformRotateXvalue","perspectiveValue","setPerspectiveValue","handleTransformRotateValue","handleTransformRotateYvalue","handleTransformRotateXvalue","handlePerspectiveValue","_jsxs","children","_jsx","AnimationTestController","onChange","value","color","style","height","width","border","backgroundColor","transformOrigin","transform","concat","range","position","DraggableComponent","_ref2","valueY","isDraggable","setIsDraggable","mouseDownY","setMouseDownY","mouseDownX","setMouseDownX","useEffect","handleEventListener","_ref3","clientY","clientX","handleMouseUp","DraggableComponentStyle","onMouseDown","top","left","DraggableComponentField","setValueY","setValueX","styled","div","_templateObject","_taggedTemplateLiteral","_ref4","_ref5"],"sourceRoot":""}