{"version":3,"file":"static/js/150.498b4d1f.chunk.js","mappings":"sLAEA,MAAMA,EAAQA,KACZ,IAAIC,EAAQ,GAEZ,IAAK,IAAIC,EAAa,EAAGA,GAAc,KAAMA,GAAc,EACzDD,EAAQ,IACHA,GACHE,EAAAA,EAAAA,KAACC,EAAAA,cAAa,CAAkBC,UAAU,GAAtBH,IAIxB,OAAOD,CAAK,C,yGCHd,MAUMK,EAAwBA,KAC5B,MAAOC,EAAWC,IAAgBC,EAAAA,EAAAA,UAAS,IAc3C,OACEN,EAAAA,EAAAA,KAACO,EAAAA,uBAAsB,CAACC,QAbHC,IAAiB,IAAhB,OAAEC,GAAQD,EAChCJ,EACED,EAAUO,KAAI,CAACC,EAAUb,IACnBc,OAAOH,EAAOI,QAAQC,UAAYhB,GAC5Ba,EAEDA,IAGZ,EAI+CI,UAC9ChB,EAAAA,EAAAA,KAACC,EAAAA,cAAa,CAEZ,cAAaF,WACbG,UAAU,GAFLH,aAIgB,C,6GCvC7B,MAAMQ,EAAyBU,EAAAA,EAAOC,IAAGC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,gMAanCnB,EAAgBgB,EAAAA,EAAOC,IAAGG,IAAAA,GAAAD,EAAAA,EAAAA,GAAA,2NAIvBX,IAAc,IAAb,IAAEa,GAAKb,EACb,OAAOa,CAAG,IAGJC,IAAe,IAAd,KAAEC,GAAMD,EACf,OAAOC,CAAI,IAOOC,IAAmB,IAAlB,SAAEvB,GAAUuB,EAC/B,OAAQvB,EAAY,eAAmB,oBAAoB,IAKpDwB,IAAmB,IAAlB,SAAExB,GAAUwB,EACpB,OAAQxB,EAAY,qBAAyB,cAAc,G","sources":["pages/test/CellularAutomatonLite/Cells.jsx","pages/test/CellularAutomatonLite/CellularAutomatonLite.jsx","pages/test/CellularAutomatonLite/CellularAutomatonLiteStyle.js"],"sourcesContent":["import { CellStyleBase } from \"./CellularAutomatonLiteStyle\";\n\nconst Cells = () => {\n  let cells = [];\n\n  for (let cellNumber = 1; cellNumber <= 2500; cellNumber += 1) {\n    cells = [\n      ...cells,\n      <CellStyleBase key={cellNumber} isActive={false}></CellStyleBase>,\n    ];\n  }\n\n  return cells;\n};\n\nexport { Cells };\n","import { useState } from \"react\";\n\nimport {\n  CellularFieldStyleBase,\n  CellStyleBase,\n} from \"./CellularAutomatonLiteStyle\";\n\nimport { Cells } from \"./Cells\";\n\nconst createCellsDataArray = () => {\n  let cellsData = [];\n\n  for (let cellNumber = 1; cellNumber <= 2500; cellNumber += 1) {\n    cellsData = [...cellsData, false];\n  }\n\n  return cellsData;\n};\n\nconst CellularAutomatonLite = () => {\n  const [cellsData, setCellsData] = useState([]);\n\n  const changeCellData = ({ target }) => {\n    setCellsData(\n      cellsData.map((cellData, cellNumber) => {\n        if (Number(target.dataset.number) === cellNumber) {\n          return !cellData;\n        } else {\n          return cellData;\n        }\n      })\n    );\n  };\n\n  return (\n    <CellularFieldStyleBase onClick={changeCellData}>\n      <CellStyleBase\n        key={cellNumber}\n        data-number={cellNumber}\n        isActive={true}\n      ></CellStyleBase>\n    </CellularFieldStyleBase>\n  );\n};\n\nexport { CellularAutomatonLite };\n/*\n\n      {cellsData.map((cellData, cellNumber) => {\n        return (\n\n        );\n      })}\n\n*/\n","import styled from \"@emotion/styled\";\n\nconst CellularFieldStyleBase = styled.div`\n  box-sizing: content-box;\n  height: 500px;\n  width: 500px;\n\n  border-style: solid;\n  border-width: 1px;\n  border-color: rgb(0, 0, 0);\n\n  display: flex;\n  flex-wrap: wrap;\n`;\n\nconst CellStyleBase = styled.div`\n  height: 10px;\n  width: 10px;\n\n  top: ${({ top }) => {\n    return top;\n  }};\n\n  left: ${({ left }) => {\n    return left;\n  }};\n\n  border-style: solid;\n  border-width: 1px;\n  border-color: rgb(0, 0, 0);\n\n  background-color: ${({ isActive }) => {\n    return (isActive && \"rgb(0, 0, 0)\") || \"rgb(255, 255, 255)\";\n  }};\n\n  font-size: 9px;\n\n  color: ${({ isActive }) => {\n    return (isActive && \"rgb(255, 255, 255)\") || \"rgb(0, 0, 0)\";\n  }};\n`;\n\nexport { CellularFieldStyleBase, CellStyleBase };\n"],"names":["Cells","cells","cellNumber","_jsx","CellStyleBase","isActive","CellularAutomatonLite","cellsData","setCellsData","useState","CellularFieldStyleBase","onClick","_ref","target","map","cellData","Number","dataset","number","children","styled","div","_templateObject","_taggedTemplateLiteral","_templateObject2","top","_ref2","left","_ref3","_ref4"],"sourceRoot":""}