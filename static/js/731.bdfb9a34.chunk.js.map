{"version":3,"file":"static/js/731.bdfb9a34.chunk.js","mappings":"iOAMA,MAAMA,EAAsBA,KAC1B,MAAOC,EAAOC,IAAYC,EAAAA,EAAAA,UAAS,KAC5BC,EAAQC,IAAaF,EAAAA,EAAAA,UAAS,IAqDrC,OACEG,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACED,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACEC,EAAAA,EAAAA,KAAA,UACEC,QAnDsBC,KAC5BL,EACEJ,EACGU,MAAM,IACNC,KAAKC,IACJ,IAAIC,EAAcC,EAAGC,QAAQH,GAI7B,OAHIC,EAAc,KAChBA,EAAc,IAAMA,GAEfG,OAAOH,EAAY,IAE3BI,KAAK,IACT,EAwCKC,KAAK,SACLC,MAAO,CACLC,gBAAiB,iBACjBC,MAAO,qBACPf,SACH,oBAGDC,EAAAA,EAAAA,KAAA,UACEC,QA9CsBc,KAC5BlB,EACEJ,EACGU,MAAM,IACNa,QAAO,CAACC,EAAOZ,EAAWa,EAAgBC,KACzC,IAAIC,EAAWH,EAAQZ,EASvB,OANEa,EAAiB,IAAM,GACvBA,IAAmBC,EAAeE,OAAS,IAE3CD,GAAY,KAGPA,CAAQ,GACd,IACFjB,MAAM,KACNC,KAAKC,GACGE,EAAGe,OAAOjB,MAElBK,KAAK,IACT,EA0BKC,KAAK,SACLC,MAAO,CACLC,gBAAiB,iBACjBC,MAAO,qBACPf,SACH,oBAGDC,EAAAA,EAAAA,KAAA,UACEC,QAASsB,gCACTZ,KAAK,SACLC,MAAO,CACLC,gBAAiB,iBACjBC,MAAO,qBACPf,SACH,+BAGDC,EAAAA,EAAAA,KAAA,UACEC,QAASuB,kCACTb,KAAK,SACLC,MAAO,CACLC,gBAAiB,iBACjBC,MAAO,qBACPf,SACH,oCAIHC,EAAAA,EAAAA,KAAA,YACEyB,SAhGcC,IAAiB,IAAhB,OAAEC,GAAQD,EAC7BhC,EAASiC,EAAOC,MAAM,EAgGlBC,YAAY,6BACZjB,MAAO,CAAEkB,OAAQ,QAASC,MAAO,QAASC,OAAQ,WAEpDhC,EAAAA,EAAAA,KAAA,KAAGY,MAAO,CAAEmB,MAAO,QAASE,aAAc,cAAelC,SAAEH,MACvD,C","sources":["pages/test/TotalDigitalization/TotalDigitalization.jsx"],"sourcesContent":["import { useState } from \"react\";\n\nimport db from \"./totalDigitalizationDB.json\";\nimport ucl from \"./uaCyrillicLatinDB.json\";\nimport rcl from \"./ruCyrillicLatinDB.json\";\n\nconst TotalDigitalization = () => {\n  const [query, setQuery] = useState(\"\");\n  const [result, setResult] = useState(\"\");\n\n  const handleQuery = ({ target }) => {\n    setQuery(target.value);\n  };\n\n  const transformTextToDigits = () => {\n    setResult(\n      query\n        .split(\"\")\n        .map((character) => {\n          let binaryDigit = db.indexOf(character);\n          if (binaryDigit < 10) {\n            binaryDigit = \"0\" + binaryDigit;\n          }\n          return String(binaryDigit);\n        })\n        .join(\"\")\n    );\n  };\n\n  const transformDigitsToText = () => {\n    setResult(\n      query\n        .split(\"\")\n        .reduce((total, character, characterIndex, characterArray) => {\n          let newTotal = total + character;\n\n          if (\n            characterIndex % 2 === 1 &&\n            characterIndex !== characterArray.length - 1\n          ) {\n            newTotal += \" \";\n          }\n\n          return newTotal;\n        }, \"\")\n        .split(\" \")\n        .map((character) => {\n          return db[Number(character)];\n        })\n        .join(\"\")\n    );\n  };\n\n  const transformCyrillicToLatin = () => {\n    setResult(\n      query.split(\"\").map((character) => {\n        return Object.keys();\n      })\n    );\n  };\n\n  return (\n    <div>\n      <div>\n        <button\n          onClick={transformTextToDigits}\n          type=\"button\"\n          style={{\n            backgroundColor: \"rgb(0, 0, 200)\",\n            color: \"rgb(255, 255, 55)\",\n          }}\n        >\n          Text to digits\n        </button>\n        <button\n          onClick={transformDigitsToText}\n          type=\"button\"\n          style={{\n            backgroundColor: \"rgb(0, 0, 200)\",\n            color: \"rgb(255, 255, 55)\",\n          }}\n        >\n          Digits to text\n        </button>\n        <button\n          onClick={transformRussianCyrillicToLatin}\n          type=\"button\"\n          style={{\n            backgroundColor: \"rgb(0, 0, 200)\",\n            color: \"rgb(255, 255, 55)\",\n          }}\n        >\n          Russian Cyrillic to Latin\n        </button>\n        <button\n          onClick={transformUkrainianCyrillicToLatin}\n          type=\"button\"\n          style={{\n            backgroundColor: \"rgb(0, 0, 200)\",\n            color: \"rgb(255, 255, 55)\",\n          }}\n        >\n          Ukrainian Cyrillic to Latin\n        </button>\n      </div>\n      <textarea\n        onChange={handleQuery}\n        placeholder=\"Enter some text or numbers\"\n        style={{ height: \"300px\", width: \"750px\", resize: \"none\" }}\n      />\n      <p style={{ width: \"750px\", overflowWrap: \"break-word\" }}>{result}</p>\n    </div>\n  );\n};\n\nexport { TotalDigitalization };\n"],"names":["TotalDigitalization","query","setQuery","useState","result","setResult","_jsxs","children","_jsx","onClick","transformTextToDigits","split","map","character","binaryDigit","db","indexOf","String","join","type","style","backgroundColor","color","transformDigitsToText","reduce","total","characterIndex","characterArray","newTotal","length","Number","transformRussianCyrillicToLatin","transformUkrainianCyrillicToLatin","onChange","_ref","target","value","placeholder","height","width","resize","overflowWrap"],"sourceRoot":""}