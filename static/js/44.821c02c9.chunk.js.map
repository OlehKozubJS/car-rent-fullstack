{"version":3,"file":"static/js/44.821c02c9.chunk.js","mappings":"+MAMA,MAAMA,EAAqBC,IAAmC,IAAlC,OAAEC,EAAM,OAAEC,EAAM,SAAEC,GAAUH,EACtD,MAAOI,EAAaC,IAAkBC,EAAAA,EAAAA,WAAS,IACxCC,EAAYC,IAAiBF,EAAAA,EAAAA,UAASL,IACtCQ,EAAYC,IAAiBJ,EAAAA,EAAAA,UAASJ,GAEvCS,EAAkBC,IAA2B,IAA1B,QAAEC,EAAO,QAAEC,GAASF,EAC3CP,GAAe,GACfG,EAAcK,GACdH,EAAcI,EAAQ,EAoBxB,OAJAC,EAAAA,EAAAA,YAAUC,EAAAA,EAAAA,IAAoB,YAAaL,GAAkB,CAACP,KAC9DW,EAAAA,EAAAA,YAAUC,EAAAA,EAAAA,IAAoB,aAdNC,IAA2B,IAA1B,QAAEJ,EAAO,QAAEC,GAASG,EACvCb,GACFD,EAAS,CACPF,OAAQA,EAASY,EAAUN,EAC3BL,OAAQA,EAASY,EAAUL,GAE/B,IAQ2D,CAACL,KAC9DW,EAAAA,EAAAA,YAAUC,EAAAA,EAAAA,IAAoB,WANRE,KACpBb,GAAe,EAAM,IAKkC,CAACD,KAGxDe,EAAAA,EAAAA,KAACC,EAAAA,wBAAuB,CACtBC,YAAaV,EACbW,IAAKrB,EACLsB,KAAMrB,GACmB,C,8ECrC/B,MAAMkB,E,QAA0BI,EAAOC,IAAGC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,0IAEjC3B,IAAc,IAAb,IAAEsB,GAAKtB,EACb,OAAOsB,CAAG,IAEJV,IAAe,IAAd,KAAEW,GAAMX,EACf,OAAOW,CAAI,G","sources":["pages/test/DraggableComponent/DraggableComponent.jsx","pages/test/DraggableComponent/DraggableComponentStyle.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\n\nimport { handleEventListener } from \"../../../hooks\";\n\nimport { DraggableComponentStyle } from \"./DraggableComponentStyle\";\n\nconst DraggableComponent = ({ valueY, valueX, onChange }) => {\n  const [isDraggable, setIsDraggable] = useState(false);\n  const [mouseDownY, setMouseDownY] = useState(valueY);\n  const [mouseDownX, setMouseDownX] = useState(valueX);\n\n  const handleMouseDown = ({ clientY, clientX }) => {\n    setIsDraggable(true);\n    setMouseDownY(clientY);\n    setMouseDownX(clientX);\n  };\n\n  const handleMouseMove = ({ clientY, clientX }) => {\n    if (isDraggable) {\n      onChange({\n        valueY: valueY + clientY - mouseDownY,\n        valueX: valueX + clientX - mouseDownX,\n      });\n    }\n  };\n\n  const handleMouseUp = () => {\n    setIsDraggable(false);\n  };\n\n  useEffect(handleEventListener(\"mousedown\", handleMouseDown), [isDraggable]);\n  useEffect(handleEventListener(\"mousemove\", handleMouseMove), [isDraggable]);\n  useEffect(handleEventListener(\"mouseup\", handleMouseUp), [isDraggable]);\n\n  return (\n    <DraggableComponentStyle\n      onMouseDown={handleMouseDown}\n      top={valueY}\n      left={valueX}\n    ></DraggableComponentStyle>\n  );\n};\n\nexport { DraggableComponent };\n","import styled from \"@emotion/styled\";\n\nconst DraggableComponentStyle = styled.div`\n  position: absolute;\n  top: ${({ top }) => {\n    return top;\n  }}px;\n  left: ${({ left }) => {\n    return left;\n  }}px;\n  width: 50px;\n  height: 50px;\n  background-color: rgb(100, 100, 250);\n`;\n\nexport { DraggableComponentStyle };\n"],"names":["DraggableComponent","_ref","valueY","valueX","onChange","isDraggable","setIsDraggable","useState","mouseDownY","setMouseDownY","mouseDownX","setMouseDownX","handleMouseDown","_ref2","clientY","clientX","useEffect","handleEventListener","_ref3","handleMouseUp","_jsx","DraggableComponentStyle","onMouseDown","top","left","styled","div","_templateObject","_taggedTemplateLiteral"],"sourceRoot":""}