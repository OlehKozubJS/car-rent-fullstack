{"version":3,"file":"static/js/504.0fd755ba.chunk.js","mappings":"4TAIA,MAAMA,EAAgBA,KACpB,MAAOC,EAAiBC,IAAsBC,EAAAA,EAAAA,UAAS,CACrDC,EAAG,EACHC,GAAI,EACJC,GAAI,EACJC,EAAG,MAKL,OACEC,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACEC,EAAAA,EAAAA,KAACC,EAAAA,yBAAwB,CACvBC,SALyBC,GAAcX,EAAmBW,GAM1DC,MAAOb,KAETS,EAAAA,EAAAA,KAAA,OAAAD,UACEC,EAAAA,EAAAA,KAAA,OACEK,MAAO,CACLC,OAAQ,QACRC,MAAO,QACPC,OAAQ,+BACRC,gBAAiB,MACjBC,gBAAiB,SACjBC,UAAU,eAADC,OAAiBrB,EAAgBM,EAAC,eAAAe,OAAcrB,EAAgBG,EAAC,iBAAAkB,OAAgBrB,EAAgBI,GAAE,iBAAAiB,OAAgBrB,EAAgBK,GAAE,SAC9IG,SACH,cAIC,C,uFChCV,MAAMc,EAA0BC,IAAwC,IAAvC,SAAEZ,EAAQ,MAAEE,EAAK,MAAEW,EAAK,MAAEC,GAAOF,EAOhE,OACEd,EAAAA,EAAAA,KAAA,OAAKK,MAAO,CAAEY,SAAU,WAAYX,OAAQ,QAASP,UACnDC,EAAAA,EAAAA,KAACkB,EAAAA,mBAAkB,CACjBhB,SATciB,IAAiB,IAAhB,OAAEC,GAAQD,EACzBC,GAAU,GAAKA,GAAUL,GAC3Bb,EAASkB,EACX,EAOIA,OAAQhB,EACRiB,OAAQ,EACRf,OAAQ,GACRC,MAAO,GACPE,gBAAiBO,KAEf,C,kGCfV,MAAMf,EAA2Ba,IAA0B,IAAzB,SAAEZ,EAAQ,MAAEE,GAAOU,EACnD,MAAOQ,EAAsBC,IAA2B9B,EAAAA,EAAAA,UAASW,EAAMV,IAChE8B,EAAuBC,IAA4BhC,EAAAA,EAAAA,UAASW,EAAMT,KAClE+B,EAAuBC,IAA4BlC,EAAAA,EAAAA,UAASW,EAAMR,KAClEgC,EAAkBC,IAAuBpC,EAAAA,EAAAA,UAASW,EAAMP,GA8B/D,OAdAiC,EAAAA,EAAAA,YAAU,KACR5B,EAAS,CACPR,EAAG4B,EACH3B,GAAI6B,EACJ5B,GAAI8B,EACJ7B,EAAG+B,GACH,GACD,CACDN,EACAE,EACAE,EACAE,KAIA9B,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACEC,EAAAA,EAAAA,KAACa,EAAAA,wBAAuB,CACtBX,SA/B8BE,GAAUmB,EAAwBnB,GAgChEA,MAAOkB,EACPP,MAAO,IACPC,MAAO,SAEThB,EAAAA,EAAAA,KAACa,EAAAA,wBAAuB,CACtBX,SApC+BE,GACnCqB,EAAyBrB,GAoCrBA,MAAOoB,EACPT,MAAO,IACPC,MAAO,WAEThB,EAAAA,EAAAA,KAACa,EAAAA,wBAAuB,CACtBX,SAxC+BE,GACnCuB,EAAyBvB,GAwCrBA,MAAOsB,EACPX,MAAO,IACPC,MAAO,UAEThB,EAAAA,EAAAA,KAACa,EAAAA,wBAAuB,CACtBX,SA5C0BE,GAAUyB,EAAoBzB,GA6CxDA,MAAOwB,EACPb,MAAO,IACPC,MAAO,UAEThB,EAAAA,EAAAA,KAAA,UACE+B,KAAK,SACLC,QAjDQC,KACZV,EAAwB,GACxBE,EAAyB,GACzBE,EAAyB,GACzBE,EAAoB,IAAI,EA8CpBxB,MAAO,CAAEI,gBAAiB,sBAAuBV,SAClD,WAGDD,EAAAA,EAAAA,MAAA,KAAAC,SAAA,CAAG,sBAAoBuB,MACvBxB,EAAAA,EAAAA,MAAA,KAAAC,SAAA,CAAG,uBAAqByB,MACxB1B,EAAAA,EAAAA,MAAA,KAAAC,SAAA,CAAG,uBAAqB2B,MACxB5B,EAAAA,EAAAA,MAAA,KAAAC,SAAA,CAAG,2BAAyB6B,OACxB,C,qJCzEV,MAAMM,EAAQA,KACZ,IAAIC,EAAQ,GAEZ,IAAK,IAAIC,EAAa,EAAGA,GAAc,KAAMA,GAAc,EACzDD,EAAQ,IACHA,GACHnC,EAAAA,EAAAA,KAACqC,EAAAA,cAAa,CAAkBC,UAAU,GAAtBF,IAIxB,OAAOD,CAAK,C,qGCHd,MAUMI,EAAoBA,KACxB,MAAOC,EAAWC,IAAgBhD,EAAAA,EAAAA,UAXPiD,MAC3B,IAAIF,EAAY,GAEhB,IAAK,IAAIJ,EAAa,EAAGA,GAAc,KAAMA,GAAc,EACzDI,EAAY,IAAIA,GAAW,GAG7B,OAAOA,CAAS,EAI2BE,IAc3C,OACE1C,EAAAA,EAAAA,KAAC2C,EAAAA,uBAAsB,CAACX,QAbHlB,IAAiB,IAAhB,OAAE8B,GAAQ9B,EAChC2B,EACED,EAAUK,KAAI,CAACC,EAAUV,IACnBW,OAAOH,EAAOI,QAAQC,UAAYb,GAC5BU,EAEDA,IAGZ,EAI+C/C,SAC7CyC,EAAUK,KAAI,CAACC,EAAUV,KAEtBpC,EAAAA,EAAAA,KAACqC,EAAAA,cAAa,CAEZ,cAAaD,EACbE,SAAUQ,GAFLV,MAMY,C,6GC3C7B,MAAMO,EAAyBO,EAAAA,EAAOC,IAAGC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,gMAanChB,EAAgBa,EAAAA,EAAOC,IAAGG,IAAAA,GAAAD,EAAAA,EAAAA,GAAA,0LAQVvC,IAAmB,IAAlB,SAAEwB,GAAUxB,EAC/B,OAAOwB,EAAW,eAAiB,oBAAoB,IAIhDnB,IAAmB,IAAlB,SAAEmB,GAAUnB,EACpB,OAAOmB,EAAW,qBAAuB,cAAc,G,uLCtB3D,MAAMiB,EAAwBA,KAC5B,MAAOf,EAAWC,IAAgBhD,EAAAA,EAAAA,UAAS,IA4C3C,OACEO,EAAAA,EAAAA,KAAC2C,EAAAA,uBAAsB,CAACX,QApBLwB,IACnB,MAAM,MAAEC,EAAK,MAAEC,GAxBQF,KACvB,MAAM,QAAEG,EAAO,QAAEC,EAAO,cAAEC,GAAkBL,GACtC,IAAEM,EAAG,KAAEC,GAASF,EAAcG,wBAC9BC,EAAIN,EAAUG,EACdI,EAAIN,EAAUG,EAIpB,MAAO,CAAEN,MAHKQ,EAAKA,EAAI,GAGPP,MAFFQ,EAAKA,EAAI,GAEA,EAgBEC,CAAgBX,GAbzBY,EAACjC,EAAOsB,EAAOC,IACxBvB,EAAMkC,MACVC,GAASA,EAAKC,MAAMT,MAAQL,GAASa,EAAKC,MAAMR,OAASL,IAaxDU,CAAU5B,EAAWiB,EAAOC,GAC9BjB,EAVe+B,EAACrC,EAAOsB,EAAOC,IACzBvB,EAAMsC,QACVH,KAAWA,EAAKC,MAAMT,MAAQL,GAASa,EAAKC,MAAMR,OAASL,KAQ/Cc,CAAWhC,EAAWiB,EAAOC,IAE1CjB,EAAa,IACRD,GAEHxC,EAAAA,EAAAA,KAACqC,EAAAA,cAAa,CAEZyB,IAAKL,EACLM,KAAML,EACNpB,UAAU,GAAK,GAAA1B,OAHP6C,EAAK,MAAA7C,OAAK8C,KAMxB,EAI6C3D,SAC1CyC,EAAUK,KAAKyB,GACPA,KAEc,C,6GCvD7B,MAAM3B,EAAyBO,EAAAA,EAAOC,IAAGC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,yNAenChB,EAAgBa,EAAAA,EAAOC,IAAGG,IAAAA,GAAAD,EAAAA,EAAAA,GAAA,wPAMvBvC,IAAc,IAAb,IAAEgD,GAAKhD,EACb,OAAOgD,CAAG,IAGJ3C,IAAe,IAAd,KAAE4C,GAAM5C,EACf,OAAO4C,CAAI,IAOOW,IAAmB,IAAlB,SAAEpC,GAAUoC,EAC/B,OAAQpC,EAAY,eAAmB,oBAAoB,IAKpDqC,IAAmB,IAAlB,SAAErC,GAAUqC,EACpB,OAAQrC,EAAY,qBAAyB,cAAc,G,2LCjC/D,MAAMsC,EAAoB9D,IAInB,IAJoB,eACzB+D,EAAc,qBACdC,EAAoB,SACpB5E,GACDY,EACC,MAAOiE,EAAeC,IAAoBvF,EAAAA,EAAAA,UAASqF,GAE7CG,EAAmBzB,IACvB,MAAM0B,EAAmB1B,EAAMZ,OAAOxC,MACtC4E,EAAiBE,GACjBhF,EAASgF,EAAiB,EAG5B,OACElF,EAAAA,EAAAA,KAACmF,EAAAA,oCAAmC,CAAApF,SACjC8E,EAAehC,KAAKzC,IAEjBN,EAAAA,EAAAA,MAACsF,EAAAA,iCAAgC,CAE/BC,QAASjF,EACTkF,UAAWP,IAAkB3E,GAAOmF,WAAWxF,SAAA,EAE/CC,EAAAA,EAAAA,KAACwF,EAAAA,sCAAqC,CACpCC,GAAIrF,EACJsF,KAAK,uBACL3D,KAAK,QACL3B,MAAOA,EACPuF,QAASZ,IAAkB3E,EAC3BF,SAAU+E,KAEZjF,EAAAA,EAAAA,KAAC4F,EAAAA,0CAAyC,CAAA7F,SACvCK,MAbEA,MAkByB,C,6OC3C1C,MAAM+E,EAAsCjC,EAAAA,EAAO2C,IAAGzC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,oHAShD+B,EAAmClC,EAAAA,EAAO4C,MAAKxC,IAAAA,GAAAD,EAAAA,EAAAA,GAAA,4WAU/BvC,IAAmB,IAAlB,SAAEwE,GAAUxE,EAC/B,MAAoB,SAAbwE,EAAsB,oBAAsB,wBAAwB,IAczEE,EAAwCtC,EAAAA,EAAO6C,MAAKC,IAAAA,GAAA3C,EAAAA,EAAAA,GAAA,4BAIpDuC,EAA4C1C,EAAAA,EAAO+C,KAAIC,IAAAA,GAAA7C,EAAAA,EAAAA,GAAA,6B,uLClC7D,MAAM8C,EAAcrF,IAA0B,IAAzB,MAAEV,EAAK,SAAEF,GAAUY,EACtC,MAAOsF,EAAaC,IAAkB5G,EAAAA,EAAAA,WAAS,IACxC6G,EAAYC,IAAiB9G,EAAAA,EAAAA,UAAS,GAyB7C,OAJAqC,EAAAA,EAAAA,YAAU0E,EAAAA,EAAAA,IAAoB,aAdN9B,IAAkB,IAAjB,QAAEd,GAASc,EAClC,GAAI0B,EAAa,CACf,MAAMK,EAAgBrG,EAAQwD,EAAU0C,EAEpCG,GAAiB,GAAKA,GAAiB,KACzCvG,EAASuG,EAEb,KAO2D,CAACL,KAE9DtE,EAAAA,EAAAA,YAAU0E,EAAAA,EAAAA,IAAoB,WANRE,KACpBL,GAAe,EAAM,IAKkC,CAACD,KAGxDpG,EAAAA,EAAAA,KAAC2G,EAAAA,WAAU,CAAA5G,UACTC,EAAAA,EAAAA,KAAC4G,EAAAA,UAAS,CAACC,YAzBS1F,IAAkB,IAAjB,QAAEyC,GAASzC,EAClCkF,GAAe,GACfE,EAAc3C,EAAQ,EAuBqBG,KAAM3D,KACpC,C,0FChCjB,MAAM0G,EAAmBA,KACvB,MAAOC,EAAYC,IAAiBvH,EAAAA,EAAAA,UAAS,GAM7C,OACEK,EAAAA,EAAAA,MAAA,WAAAC,SAAA,EACEC,EAAAA,EAAAA,KAACmG,EAAAA,YAAW,CAACjG,SANSuG,IACxBO,EAAcP,EAAc,EAKerG,MAAO2G,KAChD/G,EAAAA,EAAAA,KAAA,KAAAD,SAAIgH,MACI,C,6FCbd,MAAMJ,EAAazD,EAAAA,EAAOC,IAAGC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,8GAQvBuD,EAAY1D,EAAAA,EAAOC,IAAGG,IAAAA,GAAAD,EAAAA,EAAAA,GAAA,sIAGlBvC,IAAe,IAAd,KAAEiD,GAAMjD,EACf,OAAOiD,CAAI,G,4LCRf,MAAM7C,EAAqBJ,IAOpB,IAPqB,SAC1BZ,EAAQ,OACRmB,EAAM,OACND,EAAM,OACNd,EAAM,MACNC,EAAK,gBACLE,GACDK,EACC,MAAOsF,EAAaC,IAAkB5G,EAAAA,EAAAA,WAAS,IACxCwH,EAAYC,IAAiBzH,EAAAA,EAAAA,UAAS4B,IACtCiF,EAAYC,IAAiB9G,EAAAA,EAAAA,UAAS2B,GAwB7C,OAHAU,EAAAA,EAAAA,YAAU0E,EAAAA,EAAAA,IAAoB,aAbN9B,IAA2B,IAA1B,QAAEf,EAAO,QAAEC,GAASc,EACvC0B,GACFlG,EAAS,CACPmB,OAAQA,EAASsC,EAAUsD,EAC3B7F,OAAQA,EAASwC,EAAU0C,GAE/B,IAO2D,CAACF,KAC9DtE,EAAAA,EAAAA,YAAU0E,EAAAA,EAAAA,IAAoB,WALRE,KACpBL,GAAe,EAAM,IAIkC,CAACD,KAGxDpG,EAAAA,EAAAA,KAACmH,EAAAA,wBAAuB,CACtBN,YAxBoB1F,IAA2B,IAA1B,QAAEwC,EAAO,QAAEC,GAASzC,EAC3CkF,GAAe,GACfa,EAAcvD,GACd4C,EAAc3C,EAAQ,EAsBpBE,IAAKzC,EACL0C,KAAM3C,EACNd,OAAQA,EACRC,MAAOA,EACPE,gBAAiBA,GACQ,C,iGC5C/B,MAAM2G,EAA0BA,KAC9B,MAAO/F,EAAQgG,IAAa5H,EAAAA,EAAAA,UAAS,MAC9B2B,EAAQkG,IAAa7H,EAAAA,EAAAA,UAAS,GAWrC,OACEK,EAAAA,EAAAA,MAAA,WAAAC,SAAA,EACEC,EAAAA,EAAAA,KAACkB,EAAAA,mBAAkB,CACjBG,OAAQA,EACRD,OAAQA,EACRlB,SAdgBY,IAAyB,IAAxB,OAAEO,EAAM,OAAED,GAAQN,EACnCO,GAAU,KACZgG,EAAUhG,GAERD,GAAU,GACZkG,EAAUlG,EACZ,KAUEtB,EAAAA,EAAAA,MAAA,KAAAC,SAAA,CAAG,UAAQsB,MACXvB,EAAAA,EAAAA,MAAA,KAAAC,SAAA,CAAG,UAAQqB,OACH,C,8ECxBd,MAAM+F,E,QAA0BjE,EAAOC,IAAGC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,uIAGjCvC,IAAc,IAAb,IAAEgD,GAAKhD,EACb,OAAOgD,CAAG,IAGJ3C,IAAe,IAAd,KAAE4C,GAAM5C,EACf,OAAO4C,CAAI,IAGHW,IAAiB,IAAhB,OAAEpE,GAAQoE,EACnB,OAAOpE,CAAM,IAGNqE,IAAgB,IAAf,MAAEpE,GAAOoE,EACjB,OAAOpE,CAAK,IAGMgH,IAA0B,IAAzB,gBAAE9G,GAAiB8G,EACtC,OAAO9G,CAAe,G,2PChB1B,MAAM+G,EAAgBA,KACpB,MAAOC,EAAqBC,IAA0BjI,EAAAA,EAAAA,WAAS,IACxDkI,EAAuBC,IAA4BnI,EAAAA,EAAAA,UAAS,CAAC,IAC7DoI,EAAcC,IAAmBrI,EAAAA,EAAAA,WAAU,IAE5CsI,EAAoBA,KACpBF,GAAgBF,EAAsBK,YAAc,IACtDF,GAAiB,IACjBJ,GAAuB,IAEvBI,EAAgBD,EAAe,EACjC,EAoBF,OAZA/F,EAAAA,EAAAA,YAAU,KACR,MAAMmG,EAAYC,YAAYH,EAAmB,GAMjD,OAJKN,GACHU,cAAcF,GAGT,KACLE,cAAcF,EAAU,CACzB,GACA,CAACR,EAAqBI,KAGvB7H,EAAAA,EAAAA,KAACoI,EAAAA,uBAAsB,CACrBC,YAnBqB7E,IACvBoE,EAAyBpE,EAAMZ,OAAO0F,YACtCZ,GAAuB,EAAK,EAkB1Ba,iBAAiBC,EAAAA,EAAAA,mBAAkBX,IACX,C,4FCrC9B,MAAMY,EAAqBA,KAEvBzI,EAAAA,EAAAA,KAAA,OAAAD,UACED,EAAAA,EAAAA,MAAC4I,EAAAA,4BAA2B,CAAA3I,SAAA,CAAC,kBAE3BC,EAAAA,EAAAA,KAACwH,EAAAA,cAAa,Q,kFCPtB,MAAMkB,E,QAA8BxF,EAAOC,IAAGC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,oH,6ECA9C,MAAM+E,E,QAAyBlF,EAAOC,IAAGC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,iKAUnBvC,IAA0B,IAAzB,gBAAEyH,GAAiBzH,EACtC,OAAOyH,CAAe,G,+LCb1B,MAAMC,EAAqBX,GACnB,6FAANjH,OAIIiH,EAAY,uCAAAjH,OAEZiH,EAAe,GAAE,uCAAAjH,OAEjBiH,EAAe,GAAE,uCAAAjH,OAEjBiH,EAAe,GAAE,W,0ECTvB,MAAMc,EAAaA,KACjB,MAAOC,EAAQC,IAAapJ,EAAAA,EAAAA,WAAS,IAC9BqJ,EAAQC,IAAatJ,EAAAA,EAAAA,WAAS,IAC9BuJ,EAAQC,IAAaxJ,EAAAA,EAAAA,WAAS,IAC9ByJ,EAAQC,IAAa1J,EAAAA,EAAAA,UAAS,IAC9B2J,EAAQC,IAAa5J,EAAAA,EAAAA,UAAS,IAC9B6J,EAAQC,IAAa9J,EAAAA,EAAAA,WAAS,GAqC/B+J,EAAMA,CAACC,EAAGC,MACLD,GAAKC,GAgChB,OAVA5H,EAAAA,EAAAA,YAAU,KACR,MAAM6H,EAAWH,EAAIZ,EAAQE,GACvBc,EAAUJ,EAAIZ,EAAQe,GACtBE,EAAUL,EAAIG,EAAUb,GACxBgB,EAAaN,EAAII,EAASC,GAC1BE,EAAYP,EAAIM,EAAYA,GAElCP,EAAUQ,EAAU,GACnB,CAACnB,EAAQE,EAAQE,KAGlBlJ,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACED,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACED,EAAAA,EAAAA,MAAA,UAAQiC,KAAK,SAASC,QAAU4G,GApEjBoB,MACnBnB,GAAU,EAAM,IAJEoB,MAClBpB,GAAU,EAAK,GAsE4D9I,SAAA,CAAC,MACjE6I,EAAU,OAAW,YAE5B9I,EAAAA,EAAAA,MAAA,UAAQiC,KAAK,SAASC,QAAU8G,GAjEjBoB,MACnBnB,GAAU,EAAM,IAJEoB,MAClBpB,GAAU,EAAK,GAmE4DhJ,SAAA,CAAC,MACjE+I,EAAU,OAAW,YAE5BhJ,EAAAA,EAAAA,MAAA,UAAQiC,KAAK,SAASC,QAAUgH,GA9DjBoB,MACnBnB,GAAU,EAAM,IAJEoB,MAClBpB,GAAU,EAAK,GAgE4DlJ,SAAA,CAAC,MACjEiJ,EAAU,OAAW,YAE5BhJ,EAAAA,EAAAA,KAAA,KAAAD,SAAKuJ,EAAU,OAAW,cAE5BxJ,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACED,EAAAA,EAAAA,MAAA,UAAQiC,KAAK,SAASC,QAjEPsI,KACnB,MAAMC,EAAYrB,EAAS,EAEzBC,EADgB,IAAdoB,GACS,EAEDA,EACZ,EA2DgDxK,SAAA,CAAC,MACvCmJ,MAENpJ,EAAAA,EAAAA,MAAA,UAAQiC,KAAK,SAASC,QA5DPwI,KACnB,MAAMC,EAAYrB,EAAS,EAEzBC,EADgB,IAAdoB,GACS,EAEDA,EACZ,EAsDgD1K,SAAA,CAAC,MACvCqJ,MAENpJ,EAAAA,EAAAA,KAAA,KAAAD,UA9Ca0J,EA8CCP,EA9CEQ,EA8CMN,EA7CtBK,GAAKC,EACAD,EAEAC,MA2CL1J,EAAAA,EAAAA,KAAA,KAAAD,SAxCW2K,EAACjB,EAAGC,IACfD,GAAKC,EACAD,EAEAC,EAoCDgB,CAASxB,EAAQE,WA/CTuB,IAAClB,EAAGC,CAiDd,C,kKClGV,MAAMkB,EAAiBA,KACrB,MAAOC,EAAUC,IAAerL,EAAAA,EAAAA,UAAS,QAQzC,OACEK,EAAAA,EAAAA,MAAA,WAAAC,SAAA,EACED,EAAAA,EAAAA,MAAA,QAAMiL,SARcvH,IACtBA,EAAMwH,iBACNF,EAAYtH,EAAMK,cAAcoH,SAASC,cAAc9K,OACvDoD,EAAMK,cAAc5B,OAAO,EAKMlC,SAAA,EAC7BC,EAAAA,EAAAA,KAAA,SAAO0F,KAAK,gBAAgB3D,KAAK,OAAOoJ,YAAY,qBACpDnL,EAAAA,EAAAA,KAAA,UAAQ+B,KAAK,SAAQhC,SAAC,cAExBC,EAAAA,EAAAA,KAACoL,EAAAA,GAAQ,CAACC,GAAE,IAAAzK,OAAMiK,OACV,C,6JCpBd,MAAMS,EAAwBA,KAC5B,MAQMC,EAAsBtI,GACX,IAAXA,EACK,EAEA,EAAIA,GAAUA,EAAS,GAAK,EAAIsI,EAAmBtI,EAAS,GAIvE,OACEnD,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACED,EAAAA,EAAAA,MAAA,KAAAC,SAAA,CAAG,gBAAcwL,EAAmB,OACpCzL,EAAAA,EAAAA,MAAA,KAAAC,SAAA,CAAG,gBAAcwL,EAAmB,OACpCzL,EAAAA,EAAAA,MAAA,KAAAC,SAAA,CAAG,gBAAcwL,EAAmB,OACpCzL,EAAAA,EAAAA,MAAA,KAAAC,SAAA,CAAG,gBAAcwL,EAAmB,OACpCzL,EAAAA,EAAAA,MAAA,KAAAC,SAAA,CAAG,gBAAcwL,EAAmB,OACpCzL,EAAAA,EAAAA,MAAA,KAAAC,SAAA,CAAG,gBAAcwL,EAAmB,OACpCzL,EAAAA,EAAAA,MAAA,KAAAC,SAAA,CAAG,gBAAcwL,EAAmB,OACpCzL,EAAAA,EAAAA,MAAA,KAAAC,SAAA,CAAG,gBAAcwL,EAAmB,OACpCzL,EAAAA,EAAAA,MAAA,KAAAC,SAAA,CAAG,gBAAcwL,EAAmB,OACpCzL,EAAAA,EAAAA,MAAA,KAAAC,SAAA,CAAG,gBAAcwL,EAAmB,OACpCzL,EAAAA,EAAAA,MAAA,KAAAC,SAAA,CAAG,iBAAewL,EAAmB,SACjC,C,4QChBV,MAAMC,EAAWA,KACf,MAAOzG,EAAeC,IAAoBvF,EAAAA,EAAAA,UAAS,kBAMnD,OACEK,EAAAA,EAAAA,MAAA,WAAAC,SAAA,EACEC,EAAAA,EAAAA,KAAC4E,EAAAA,kBAAiB,CAChBC,eAAgB,CACd,cACA,wBACA,sBACA,kBACA,YACA,iBACA,qBACA,0BACA,kBAEFC,qBAAsBC,EACtB7E,SAnBmBgF,IACvBF,EAAiBE,EAAiB,IAoBb,gBAAlBH,IAAmC/E,EAAAA,EAAAA,KAAC2I,EAAAA,WAAU,IAC5B,0BAAlB5D,IAA6C/E,EAAAA,EAAAA,KAAC8G,EAAAA,iBAAgB,IAC5C,wBAAlB/B,IAA2C/E,EAAAA,EAAAA,KAACoH,EAAAA,wBAAuB,IACjD,oBAAlBrC,IAAuC/E,EAAAA,EAAAA,KAAC4K,EAAAA,eAAc,IACpC,cAAlB7F,IAAiC/E,EAAAA,EAAAA,KAACsL,EAAAA,sBAAqB,IACrC,mBAAlBvG,IAAsC/E,EAAAA,EAAAA,KAACyI,EAAAA,mBAAkB,IACvC,uBAAlB1D,IAA0C/E,EAAAA,EAAAA,KAACuC,EAAAA,kBAAiB,IAC1C,4BAAlBwC,IAA+C/E,EAAAA,EAAAA,KAACuD,EAAAA,sBAAqB,IACnD,mBAAlBwB,IAAsC/E,EAAAA,EAAAA,KAACV,EAAAA,cAAa,MAC7C,C","sources":["pages/test/AnimationTest/AnimationTest.jsx","pages/test/AnimationTest/AnimationTestController.jsx","pages/test/AnimationTest/AnimationTestControllers.jsx","pages/test/CellularAutomaton/Cells.jsx","pages/test/CellularAutomaton/CellularAutomaton.jsx","pages/test/CellularAutomaton/CellularAutomatonStyle.js","pages/test/CellularAutomatonLite/CellularAutomatonLite.jsx","pages/test/CellularAutomatonLite/CellularAutomatonLiteStyle.js","pages/test/ComponentSelector/ComponentSelector.jsx","pages/test/ComponentSelector/ComponentSelectorStyle.js","pages/test/CustomRange/CustomRange.jsx","pages/test/CustomRange/CustomRangeField.jsx","pages/test/CustomRange/CustomRangeStyle.js","pages/test/DraggableComponent/DraggableComponent.jsx","pages/test/DraggableComponent/DraggableComponentField.jsx","pages/test/DraggableComponent/DraggableComponentStyle.js","pages/test/GradientHover/GradientHover.jsx","pages/test/GradientHover/GradientHoverField.jsx","pages/test/GradientHover/GradientHoverFieldStyle.js","pages/test/GradientHover/GradientHoverStyle.js","pages/test/GradientHover/setLinearGradient.js","pages/test/LogicGates/LogicGates.jsx","pages/test/NavigationTest/NavigationTest.jsx","pages/test/Recursion/RecursionFunctionTest.jsx","pages/test/TestPage.jsx"],"sourcesContent":["import { useState } from \"react\";\n\nimport { AnimationTestControllers } from \"./AnimationTestControllers\";\n\nconst AnimationTest = () => {\n  const [transformValues, setTransformValues] = useState({\n    r: 0,\n    ry: 0,\n    rx: 0,\n    p: 500,\n  });\n\n  const handleTransformValues = (newValues) => setTransformValues(newValues);\n\n  return (\n    <div>\n      <AnimationTestControllers\n        onChange={handleTransformValues}\n        value={transformValues}\n      />\n      <div>\n        <div\n          style={{\n            height: \"250px\",\n            width: \"250px\",\n            border: \"5px solid rgb(150, 250, 250)\",\n            backgroundColor: \"red\",\n            transformOrigin: \"center\",\n            transform: `perspective(${transformValues.p}px) rotate(${transformValues.r}deg) rotateY(${transformValues.ry}deg) rotateX(${transformValues.rx}deg)`,\n          }}\n        >\n          Hello\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport { AnimationTest };\n","import { DraggableComponent } from \"../DraggableComponent\";\n\nconst AnimationTestController = ({ onChange, value, range, color }) => {\n  const handleValue = ({ valueX }) => {\n    if (valueX >= 0 && valueX <= range) {\n      onChange(valueX);\n    }\n  };\n\n  return (\n    <div style={{ position: \"relative\", height: \"50px\" }}>\n      <DraggableComponent\n        onChange={handleValue}\n        valueX={value}\n        valueY={0}\n        height={50}\n        width={50}\n        backgroundColor={color}\n      />\n    </div>\n  );\n};\n\nexport { AnimationTestController };\n","import { useEffect, useState } from \"react\";\n\nimport { AnimationTestController } from \"./AnimationTestController\";\n\nconst AnimationTestControllers = ({ onChange, value }) => {\n  const [transformRotateValue, setTransformRotateValue] = useState(value.r);\n  const [transformRotateYvalue, setTransformRotateYvalue] = useState(value.ry);\n  const [transformRotateXvalue, setTransformRotateXvalue] = useState(value.rx);\n  const [perspectiveValue, setPerspectiveValue] = useState(value.p);\n\n  const handleTransformRotateValue = (value) => setTransformRotateValue(value);\n  const handleTransformRotateYvalue = (value) =>\n    setTransformRotateYvalue(value);\n  const handleTransformRotateXvalue = (value) =>\n    setTransformRotateXvalue(value);\n  const handlePerspectiveValue = (value) => setPerspectiveValue(value);\n\n  const reset = () => {\n    setTransformRotateValue(0);\n    setTransformRotateYvalue(0);\n    setTransformRotateXvalue(0);\n    setPerspectiveValue(500);\n  };\n\n  useEffect(() => {\n    onChange({\n      r: transformRotateValue,\n      ry: transformRotateYvalue,\n      rx: transformRotateXvalue,\n      p: perspectiveValue,\n    });\n  }, [\n    transformRotateValue,\n    transformRotateYvalue,\n    transformRotateXvalue,\n    perspectiveValue,\n  ]);\n\n  return (\n    <div>\n      <AnimationTestController\n        onChange={handleTransformRotateValue}\n        value={transformRotateValue}\n        range={180}\n        color={\"red\"}\n      />\n      <AnimationTestController\n        onChange={handleTransformRotateYvalue}\n        value={transformRotateYvalue}\n        range={180}\n        color={\"green\"}\n      />\n      <AnimationTestController\n        onChange={handleTransformRotateXvalue}\n        value={transformRotateXvalue}\n        range={180}\n        color={\"blue\"}\n      />\n      <AnimationTestController\n        onChange={handlePerspectiveValue}\n        value={perspectiveValue}\n        range={500}\n        color={\"cyan\"}\n      />\n      <button\n        type=\"button\"\n        onClick={reset}\n        style={{ backgroundColor: \"rgb(250, 225, 225)\" }}\n      >\n        Reset\n      </button>\n      <p>transform: rotate: {transformRotateValue}</p>\n      <p>transfrom: rotateY: {transformRotateYvalue}</p>\n      <p>transform: rotateX: {transformRotateXvalue}</p>\n      <p>transform: perspective: {perspectiveValue}</p>\n    </div>\n  );\n};\n\nexport { AnimationTestControllers };\n","import { CellStyleBase } from \"./CellularAutomatonStyle\";\n\nconst Cells = () => {\n  let cells = [];\n\n  for (let cellNumber = 1; cellNumber <= 2500; cellNumber += 1) {\n    cells = [\n      ...cells,\n      <CellStyleBase key={cellNumber} isActive={false}></CellStyleBase>,\n    ];\n  }\n\n  return cells;\n};\n\nexport { Cells };\n","import { useState } from \"react\";\n\nimport {\n  CellularFieldStyleBase,\n  CellStyleBase,\n} from \"./CellularAutomatonStyle\";\n\nimport { Cells } from \"./Cells\";\n\nconst createCellsDataArray = () => {\n  let cellsData = [];\n\n  for (let cellNumber = 1; cellNumber <= 2500; cellNumber += 1) {\n    cellsData = [...cellsData, false];\n  }\n\n  return cellsData;\n};\n\nconst CellularAutomaton = () => {\n  const [cellsData, setCellsData] = useState(createCellsDataArray());\n\n  const changeCellData = ({ target }) => {\n    setCellsData(\n      cellsData.map((cellData, cellNumber) => {\n        if (Number(target.dataset.number) === cellNumber) {\n          return !cellData;\n        } else {\n          return cellData;\n        }\n      })\n    );\n  };\n\n  return (\n    <CellularFieldStyleBase onClick={changeCellData}>\n      {cellsData.map((cellData, cellNumber) => {\n        return (\n          <CellStyleBase\n            key={cellNumber}\n            data-number={cellNumber}\n            isActive={cellData}\n          ></CellStyleBase>\n        );\n      })}\n    </CellularFieldStyleBase>\n  );\n};\n\nexport { CellularAutomaton };\n","import styled from \"@emotion/styled\";\n\nconst CellularFieldStyleBase = styled.div`\n  box-sizing: content-box;\n  height: 500px;\n  width: 500px;\n\n  border-style: solid;\n  border-width: 1px;\n  border-color: rgb(0, 0, 0);\n\n  display: flex;\n  flex-wrap: wrap;\n`;\n\nconst CellStyleBase = styled.div`\n  height: 10px;\n  width: 10px;\n\n  border-style: solid;\n  border-width: 1px;\n  border-color: rgb(0, 0, 0);\n\n  background-color: ${({ isActive }) => {\n    return isActive ? \"rgb(0, 0, 0)\" : \"rgb(255, 255, 255)\";\n  }};\n\n  font-size: 9px;\n  color: ${({ isActive }) => {\n    return isActive ? \"rgb(255, 255, 255)\" : \"rgb(0, 0, 0)\";\n  }};\n`;\n\nexport { CellularFieldStyleBase, CellStyleBase };\n","import { useState } from \"react\";\n\nimport {\n  CellularFieldStyleBase,\n  CellStyleBase,\n} from \"./CellularAutomatonLiteStyle\";\n\nconst CellularAutomatonLite = () => {\n  const [cellsData, setCellsData] = useState([]);\n\n  const getCellPosition = (event) => {\n    const { clientY, clientX, currentTarget } = event;\n    const { top, left } = currentTarget.getBoundingClientRect();\n    const y = clientY - top;\n    const x = clientX - left;\n    const cellY = y - (y % 10);\n    const cellX = x - (x % 10);\n\n    return { cellY, cellX };\n  };\n\n  const getIsCell = (cells, cellY, cellX) => {\n    return cells.some(\n      (cell) => cell.props.top === cellY && cell.props.left === cellX\n    );\n  };\n\n  const removeCell = (cells, cellY, cellX) => {\n    return cells.filter(\n      (cell) => !(cell.props.top === cellY && cell.props.left === cellX)\n    );\n  };\n\n  const addCellData = (event) => {\n    const { cellY, cellX } = getCellPosition(event);\n\n    if (getIsCell(cellsData, cellY, cellX)) {\n      setCellsData(removeCell(cellsData, cellY, cellX));\n    } else {\n      setCellsData([\n        ...cellsData,\n\n        <CellStyleBase\n          key={`${cellY}, ${cellX}`}\n          top={cellY}\n          left={cellX}\n          isActive={true}\n        ></CellStyleBase>,\n      ]);\n    }\n  };\n\n  return (\n    <CellularFieldStyleBase onClick={addCellData}>\n      {cellsData.map((cell) => {\n        return cell;\n      })}\n    </CellularFieldStyleBase>\n  );\n};\n\nexport { CellularAutomatonLite };\n","import styled from \"@emotion/styled\";\n\nconst CellularFieldStyleBase = styled.div`\n  box-sizing: content-box;\n  height: 500px;\n  width: 500px;\n\n  border-style: solid;\n  border-width: 1px;\n  border-color: rgb(0, 0, 0);\n\n  display: flex;\n  flex-wrap: wrap;\n\n  position: relative;\n`;\n\nconst CellStyleBase = styled.div`\n  position: absolute;\n\n  height: 10px;\n  width: 10px;\n\n  top: ${({ top }) => {\n    return top;\n  }}px;\n\n  left: ${({ left }) => {\n    return left;\n  }}px;\n\n  border-style: solid;\n  border-width: 1px;\n  border-color: rgb(0, 0, 0);\n\n  background-color: ${({ isActive }) => {\n    return (isActive && \"rgb(0, 0, 0)\") || \"rgb(255, 255, 255)\";\n  }};\n\n  font-size: 9px;\n\n  color: ${({ isActive }) => {\n    return (isActive && \"rgb(255, 255, 255)\") || \"rgb(0, 0, 0)\";\n  }};\n`;\n\nexport { CellularFieldStyleBase, CellStyleBase };\n","import { useState } from \"react\";\n\nimport {\n  ComponentSelectorContainerStyleBase,\n  ComponentSelectorButtonStyleBase,\n  ComponentSelectorRadioButtonStyleBase,\n  ComponentSelectorRadioButtonTextStyleBase,\n} from \"./ComponentSelectorStyle\";\n\nconst ComponentSelector = ({\n  componentNames,\n  initialComponentName,\n  onChange,\n}) => {\n  const [componentName, setComponentName] = useState(initialComponentName);\n\n  const chooseComponent = (event) => {\n    const newComponentName = event.target.value;\n    setComponentName(newComponentName);\n    onChange(newComponentName);\n  };\n\n  return (\n    <ComponentSelectorContainerStyleBase>\n      {componentNames.map((value) => {\n        return (\n          <ComponentSelectorButtonStyleBase\n            key={value}\n            htmlFor={value}\n            isactive={(componentName === value).toString()}\n          >\n            <ComponentSelectorRadioButtonStyleBase\n              id={value}\n              name=\"chooseComponentRadio\"\n              type=\"radio\"\n              value={value}\n              checked={componentName === value}\n              onChange={chooseComponent}\n            />\n            <ComponentSelectorRadioButtonTextStyleBase>\n              {value}\n            </ComponentSelectorRadioButtonTextStyleBase>\n          </ComponentSelectorButtonStyleBase>\n        );\n      })}\n    </ComponentSelectorContainerStyleBase>\n  );\n};\n\nexport { ComponentSelector };\n","import styled from \"@emotion/styled\";\n\nconst ComponentSelectorContainerStyleBase = styled.nav`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  gap: 12px;\n\n  margin-bottom: 10px;\n`;\n\nconst ComponentSelectorButtonStyleBase = styled.label`\n  height: 24px;\n\n  display: flex;\n  padding-inline: 24px;\n  justify-content: center;\n  align-items: center;\n\n  border: none;\n  border-radius: 12px;\n  background-color: ${({ isactive }) => {\n    return isactive === \"true\" ? \"rgb(112, 52, 255)\" : \"rgba(138, 138, 137, 1)\";\n  }};\n\n  color: #fff;\n  font-size: 14px;\n  line-height: 20px;\n\n  font-family: \"Manrope-SemiBold\", sans-serif;\n\n  &:hover {\n    background-color: rgb(68, 11, 205);\n  }\n`;\n\nconst ComponentSelectorRadioButtonStyleBase = styled.input`\n  display: none;\n`;\n\nconst ComponentSelectorRadioButtonTextStyleBase = styled.span`\n  display: inline;\n`;\n\nexport {\n  ComponentSelectorContainerStyleBase,\n  ComponentSelectorButtonStyleBase,\n  ComponentSelectorRadioButtonStyleBase,\n  ComponentSelectorRadioButtonTextStyleBase,\n};\n","import { useEffect, useState } from \"react\";\n\nimport { handleEventListener } from \"../../../hooks\";\n\nimport { RangeField, RangeDial } from \"./CustomRangeStyle\";\n\nconst CustomRange = ({ value, onChange }) => {\n  const [isDraggable, setIsDraggable] = useState(false);\n  const [mouseDownX, setMouseDownX] = useState(0);\n\n  const handleMouseDown = ({ clientX }) => {\n    setIsDraggable(true);\n    setMouseDownX(clientX);\n  };\n\n  const handleMouseMove = ({ clientX }) => {\n    if (isDraggable) {\n      const newRangeValue = value + clientX - mouseDownX;\n\n      if (newRangeValue >= 0 && newRangeValue <= 450) {\n        onChange(newRangeValue);\n      }\n    }\n  };\n\n  const handleMouseUp = () => {\n    setIsDraggable(false);\n  };\n\n  useEffect(handleEventListener(\"mousemove\", handleMouseMove), [isDraggable]);\n\n  useEffect(handleEventListener(\"mouseup\", handleMouseUp), [isDraggable]);\n\n  return (\n    <RangeField>\n      <RangeDial onMouseDown={handleMouseDown} left={value}></RangeDial>\n    </RangeField>\n  );\n};\n\nexport { CustomRange };\n","import { useState } from \"react\";\n\nimport { CustomRange } from \"./CustomRange\";\n\nconst CustomRangeField = () => {\n  const [rangeValue, setRangeValue] = useState(0);\n\n  const handleRangeValue = (newRangeValue) => {\n    setRangeValue(newRangeValue);\n  };\n\n  return (\n    <section>\n      <CustomRange onChange={handleRangeValue} value={rangeValue} />\n      <p>{rangeValue}</p>\n    </section>\n  );\n};\n\nexport { CustomRangeField };\n","import styled from \"@emotion/styled\";\n\nconst RangeField = styled.div`\n  width: 500px;\n  height: 50px;\n  background-color: rgb(200, 200, 250);\n\n  position: relative;\n`;\n\nconst RangeDial = styled.div`\n  position: absolute;\n  top: 0;\n  left: ${({ left }) => {\n    return left;\n  }}px;\n  width: 50px;\n  height: 50px;\n  background-color: rgb(100, 100, 250);\n`;\n\nexport { RangeField, RangeDial };\n","import { useEffect, useState } from \"react\";\n\nimport { handleEventListener } from \"../../../hooks\";\n\nimport { DraggableComponentStyle } from \"./DraggableComponentStyle\";\n\nconst DraggableComponent = ({\n  onChange,\n  valueY,\n  valueX,\n  height,\n  width,\n  backgroundColor,\n}) => {\n  const [isDraggable, setIsDraggable] = useState(false);\n  const [mouseDownY, setMouseDownY] = useState(valueY);\n  const [mouseDownX, setMouseDownX] = useState(valueX);\n\n  const handleMouseDown = ({ clientY, clientX }) => {\n    setIsDraggable(true);\n    setMouseDownY(clientY);\n    setMouseDownX(clientX);\n  };\n\n  const handleMouseMove = ({ clientY, clientX }) => {\n    if (isDraggable) {\n      onChange({\n        valueY: valueY + clientY - mouseDownY,\n        valueX: valueX + clientX - mouseDownX,\n      });\n    }\n  };\n\n  const handleMouseUp = () => {\n    setIsDraggable(false);\n  };\n\n  useEffect(handleEventListener(\"mousemove\", handleMouseMove), [isDraggable]);\n  useEffect(handleEventListener(\"mouseup\", handleMouseUp), [isDraggable]);\n\n  return (\n    <DraggableComponentStyle\n      onMouseDown={handleMouseDown}\n      top={valueY}\n      left={valueX}\n      height={height}\n      width={width}\n      backgroundColor={backgroundColor}\n    ></DraggableComponentStyle>\n  );\n};\n\nexport { DraggableComponent };\n","import { useEffect, useState } from \"react\";\n\nimport { DraggableComponent } from \"./DraggableComponent\";\n\nconst DraggableComponentField = () => {\n  const [valueY, setValueY] = useState(200);\n  const [valueX, setValueX] = useState(0);\n\n  const handleXYvalue = ({ valueY, valueX }) => {\n    if (valueY >= 200) {\n      setValueY(valueY);\n    }\n    if (valueX >= 0) {\n      setValueX(valueX);\n    }\n  };\n\n  return (\n    <section>\n      <DraggableComponent\n        valueY={valueY}\n        valueX={valueX}\n        onChange={handleXYvalue}\n      />\n      <p>valueY={valueY}</p>\n      <p>valueX={valueX}</p>\n    </section>\n  );\n};\n\nexport { DraggableComponentField };\n","import styled from \"@emotion/styled\";\n\nconst DraggableComponentStyle = styled.div`\n  position: absolute;\n\n  top: ${({ top }) => {\n    return top;\n  }}px;\n\n  left: ${({ left }) => {\n    return left;\n  }}px;\n\n  height: ${({ height }) => {\n    return height;\n  }}px;\n\n  width: ${({ width }) => {\n    return width;\n  }}px;\n\n  background-color: ${({ backgroundColor }) => {\n    return backgroundColor;\n  }};\n`;\n\nexport { DraggableComponentStyle };\n","import { useState, useEffect } from \"react\";\n\nimport { setLinearGradient } from \"./setLinearGradient\";\n\nimport { GradientHoverStyleBase } from \"./GradientHoverStyle\";\n\nconst GradientHover = () => {\n  const [isGradientAnimation, setIsGradientAnimation] = useState(false);\n  const [parentNodeInformation, setParentnodeInformation] = useState({});\n  const [gradientLeft, setGradientLeft] = useState(-40);\n\n  const gradientAnimation = () => {\n    if (gradientLeft >= parentNodeInformation.offsetWidth + 40) {\n      setGradientLeft(-40);\n      setIsGradientAnimation(false);\n    } else {\n      setGradientLeft(gradientLeft + 5);\n    }\n  };\n\n  const handleMouseOver = (event) => {\n    setParentnodeInformation(event.target.parentNode);\n    setIsGradientAnimation(true);\n  };\n\n  useEffect(() => {\n    const animation = setInterval(gradientAnimation, 5);\n\n    if (!isGradientAnimation) {\n      clearInterval(animation);\n    }\n\n    return () => {\n      clearInterval(animation);\n    };\n  }, [isGradientAnimation, gradientLeft]);\n\n  return (\n    <GradientHoverStyleBase\n      onMouseOver={handleMouseOver}\n      backgroundimage={setLinearGradient(gradientLeft)}\n    ></GradientHoverStyleBase>\n  );\n};\n\nexport { GradientHover };\n","import { GradientHover } from \"./GradientHover\";\n\nimport { GradientHoverFieldStyleBase } from \"./GradientHoverFieldStyle\";\n\nconst GradientHoverField = () => {\n  return (\n    <div>\n      <GradientHoverFieldStyleBase>\n        Gradient hover\n        <GradientHover />\n      </GradientHoverFieldStyleBase>\n    </div>\n  );\n};\n\nexport { GradientHoverField };\n","import styled from \"@emotion/styled\";\n\nconst GradientHoverFieldStyleBase = styled.div`\n  height: 150px;\n  width: 800px;\n\n  background-color: black;\n  color: white;\n\n  position: relative;\n`;\n\nexport { GradientHoverFieldStyleBase };\n","import styled from \"@emotion/styled\";\n\nconst GradientHoverStyleBase = styled.div`\n  position: absolute;\n\n  top: 0px;\n  left: 0px;\n  height: 100%;\n  width: 100%;\n\n  background: none;\n  color: white;\n  background-image: ${({ backgroundimage }) => {\n    return backgroundimage;\n  }};\n`;\n\nexport { GradientHoverStyleBase };\n","const setLinearGradient = (gradientLeft) => {\n  return `linear-gradient(\n    to right,\n  rgba(255, 255, 255, 0),\n  rgba(255, 255, 255, 0)\n    ${gradientLeft}px,\n  rgba(255, 255, 255, 1)\n    ${gradientLeft + 20}px,\n  rgba(255, 255, 255, 1)\n    ${gradientLeft + 20}px,\n  rgba(255, 255, 255, 0)\n    ${gradientLeft + 40}px\n  );`;\n};\n\nexport { setLinearGradient };\n","import { useEffect, useState } from \"react\";\n\nconst LogicGates = () => {\n  const [inputA, setInputA] = useState(false);\n  const [inputB, setInputB] = useState(false);\n  const [inputC, setInputC] = useState(false);\n  const [inputD, setInputD] = useState(0);\n  const [inputE, setInputE] = useState(0);\n  const [output, setOutput] = useState(false);\n\n  const handleTrueA = () => {\n    setInputA(true);\n  };\n  const handleFalseA = () => {\n    setInputA(false);\n  };\n  const handleTrueB = () => {\n    setInputB(true);\n  };\n  const handleFalseB = () => {\n    setInputB(false);\n  };\n  const handleTrueC = () => {\n    setInputC(true);\n  };\n  const handleFalseC = () => {\n    setInputC(false);\n  };\n  const handleValueD = () => {\n    const newValueD = inputD + 1;\n    if (newValueD === 2) {\n      setInputD(-1);\n    } else {\n      setInputD(newValueD);\n    }\n  };\n  const handleValueE = () => {\n    const newValueE = inputE + 1;\n    if (newValueE === 2) {\n      setInputE(-1);\n    } else {\n      setInputE(newValueE);\n    }\n  };\n\n  const nor = (a, b) => {\n    return !(a || b);\n  };\n\n  const nand = (a, b) => {\n    return !(a && b);\n  };\n\n  const ternarAND = (a, b) => {\n    if (a <= b) {\n      return a;\n    } else {\n      return b;\n    }\n  };\n  const ternarOR = (a, b) => {\n    if (a >= b) {\n      return a;\n    } else {\n      return b;\n    }\n  };\n\n  useEffect(() => {\n    const valOneAB = nor(inputA, inputB);\n    const valTwoA = nor(inputA, valOneAB);\n    const valTwoB = nor(valOneAB, inputB);\n    const valThreeAB = nor(valTwoA, valTwoB);\n    const valFourAB = nor(valThreeAB, valThreeAB);\n\n    setOutput(valFourAB);\n  }, [inputA, inputB, inputC]);\n\n  return (\n    <div>\n      <div>\n        <button type=\"button\" onClick={(inputA && handleFalseA) || handleTrueA}>\n          A: {(inputA && \"true\") || \"false\"}\n        </button>\n        <button type=\"button\" onClick={(inputB && handleFalseB) || handleTrueB}>\n          B: {(inputB && \"true\") || \"false\"}\n        </button>\n        <button type=\"button\" onClick={(inputC && handleFalseC) || handleTrueC}>\n          C: {(inputC && \"true\") || \"false\"}\n        </button>\n        <p>{(output && \"true\") || \"false\"}</p>\n      </div>\n      <div>\n        <button type=\"button\" onClick={handleValueD}>\n          D: {inputD}\n        </button>\n        <button type=\"button\" onClick={handleValueE}>\n          E: {inputE}\n        </button>\n        <p>{ternarAND(inputD, inputE)}</p>\n        <p>{ternarOR(inputD, inputE)}</p>\n      </div>\n    </div>\n  );\n};\n\nexport { LogicGates };\n","import { useState } from \"react\";\n\nimport { Navigate } from \"react-router-dom\";\n\nconst NavigationTest = () => {\n  const [pagePath, setPagePath] = useState(\"test\");\n\n  const handlePagePath = (event) => {\n    event.preventDefault();\n    setPagePath(event.currentTarget.elements.pageNameInput.value);\n    event.currentTarget.reset();\n  };\n\n  return (\n    <section>\n      <form onSubmit={handlePagePath}>\n        <input name=\"pageNameInput\" type=\"text\" placeholder=\"Enter page name\" />\n        <button type=\"submit\">Enter</button>\n      </form>\n      <Navigate to={`/${pagePath}`} />\n    </section>\n  );\n};\n\nexport { NavigationTest };\n","const RecursionFunctionTest = () => {\n  const recursionFunction = (number) => {\n    if (number <= 0) {\n      return number;\n    } else {\n      return 2 * number - 1 + recursionFunction(number - 1);\n    }\n  };\n\n  const recursionFunction2 = (number) => {\n    if (number === 0) {\n      return 0;\n    } else {\n      return 3 * number * (number - 1) + 1 + recursionFunction2(number - 1);\n    }\n  };\n\n  return (\n    <div>\n      <p>Square of 0: {recursionFunction2(0)}</p>\n      <p>Square of 1: {recursionFunction2(1)}</p>\n      <p>Square of 2: {recursionFunction2(2)}</p>\n      <p>Square of 3: {recursionFunction2(3)}</p>\n      <p>Square of 4: {recursionFunction2(4)}</p>\n      <p>Square of 5: {recursionFunction2(5)}</p>\n      <p>Square of 6: {recursionFunction2(6)}</p>\n      <p>Square of 7: {recursionFunction2(7)}</p>\n      <p>Square of 8: {recursionFunction2(8)}</p>\n      <p>Square of 9: {recursionFunction2(9)}</p>\n      <p>Square of 10: {recursionFunction2(10)}</p>\n    </div>\n  );\n};\n\nexport { RecursionFunctionTest };\n/*\n\n(x + 1)^3 = (x^2 + 2x + 1)*(x + 1) = x^3 + 2x^2 + x + x^2 + 2x + 1 = x^3 + 3x^2 + 3x + 1;\n\n3(x - 1)^2 + 3(x - 1) + 1 = 3x^2 - 6x + 3 + 3x - 3 + 1 = 3x^2 - 3x + 1 = 3x(x - 1) + 1;\n\n3^3 = 27 = (3*1*0 + 1) + (3*2*1 + 1) + (3*3*2 + 1) = 1 + 7 + 19\n\n*/\n","import { useState } from \"react\";\n\nimport { ComponentSelector } from \"./ComponentSelector\";\n\nimport { LogicGates } from \"./LogicGates\";\nimport { CustomRangeField } from \"./CustomRange\";\nimport { DraggableComponentField } from \"./DraggableComponent\";\nimport { RecursionFunctionTest } from \"./Recursion\";\nimport { NavigationTest } from \"./NavigationTest\";\nimport { GradientHoverField } from \"./GradientHover\";\nimport { CellularAutomaton } from \"./CellularAutomaton\";\nimport { CellularAutomatonLite } from \"./CellularAutomatonLite\";\nimport { AnimationTest } from \"./AnimationTest\";\n\nconst TestPage = () => {\n  const [componentName, setComponentName] = useState(\"Animation test\");\n\n  const chooseComponent = (newComponentName) => {\n    setComponentName(newComponentName);\n  };\n\n  return (\n    <section>\n      <ComponentSelector\n        componentNames={[\n          \"Logic gates\",\n          \"Simplest custom range\",\n          \"Draggable component\",\n          \"Navigation test\",\n          \"Recursion\",\n          \"Gradient hover\",\n          \"Cellular automaton\",\n          \"Cellular automaton lite\",\n          \"Animation test\",\n        ]}\n        initialComponentName={componentName}\n        onChange={chooseComponent}\n      />\n      {componentName === \"Logic gates\" && <LogicGates />}\n      {componentName === \"Simplest custom range\" && <CustomRangeField />}\n      {componentName === \"Draggable component\" && <DraggableComponentField />}\n      {componentName === \"Navigation test\" && <NavigationTest />}\n      {componentName === \"Recursion\" && <RecursionFunctionTest />}\n      {componentName === \"Gradient hover\" && <GradientHoverField />}\n      {componentName === \"Cellular automaton\" && <CellularAutomaton />}\n      {componentName === \"Cellular automaton lite\" && <CellularAutomatonLite />}\n      {componentName === \"Animation test\" && <AnimationTest />}\n    </section>\n  );\n};\n\nexport { TestPage };\n"],"names":["AnimationTest","transformValues","setTransformValues","useState","r","ry","rx","p","_jsxs","children","_jsx","AnimationTestControllers","onChange","newValues","value","style","height","width","border","backgroundColor","transformOrigin","transform","concat","AnimationTestController","_ref","range","color","position","DraggableComponent","_ref2","valueX","valueY","transformRotateValue","setTransformRotateValue","transformRotateYvalue","setTransformRotateYvalue","transformRotateXvalue","setTransformRotateXvalue","perspectiveValue","setPerspectiveValue","useEffect","type","onClick","reset","Cells","cells","cellNumber","CellStyleBase","isActive","CellularAutomaton","cellsData","setCellsData","createCellsDataArray","CellularFieldStyleBase","target","map","cellData","Number","dataset","number","styled","div","_templateObject","_taggedTemplateLiteral","_templateObject2","CellularAutomatonLite","event","cellY","cellX","clientY","clientX","currentTarget","top","left","getBoundingClientRect","y","x","getCellPosition","getIsCell","some","cell","props","removeCell","filter","_ref3","_ref4","ComponentSelector","componentNames","initialComponentName","componentName","setComponentName","chooseComponent","newComponentName","ComponentSelectorContainerStyleBase","ComponentSelectorButtonStyleBase","htmlFor","isactive","toString","ComponentSelectorRadioButtonStyleBase","id","name","checked","ComponentSelectorRadioButtonTextStyleBase","nav","label","input","_templateObject3","span","_templateObject4","CustomRange","isDraggable","setIsDraggable","mouseDownX","setMouseDownX","handleEventListener","newRangeValue","handleMouseUp","RangeField","RangeDial","onMouseDown","CustomRangeField","rangeValue","setRangeValue","mouseDownY","setMouseDownY","DraggableComponentStyle","DraggableComponentField","setValueY","setValueX","_ref5","GradientHover","isGradientAnimation","setIsGradientAnimation","parentNodeInformation","setParentnodeInformation","gradientLeft","setGradientLeft","gradientAnimation","offsetWidth","animation","setInterval","clearInterval","GradientHoverStyleBase","onMouseOver","parentNode","backgroundimage","setLinearGradient","GradientHoverField","GradientHoverFieldStyleBase","LogicGates","inputA","setInputA","inputB","setInputB","inputC","setInputC","inputD","setInputD","inputE","setInputE","output","setOutput","nor","a","b","valOneAB","valTwoA","valTwoB","valThreeAB","valFourAB","handleFalseA","handleTrueA","handleFalseB","handleTrueB","handleFalseC","handleTrueC","handleValueD","newValueD","handleValueE","newValueE","ternarOR","ternarAND","NavigationTest","pagePath","setPagePath","onSubmit","preventDefault","elements","pageNameInput","placeholder","Navigate","to","RecursionFunctionTest","recursionFunction2","TestPage"],"sourceRoot":""}